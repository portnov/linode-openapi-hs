-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createClient
module Linode.Operations.CreateClient where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /account/oauth-clients
-- 
-- Creates an OAuth Client, which can be used to allow users (using their Linode account) to log in to your own application, and optionally grant your application some amount of access to their Linodes or other entities.
createClient :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe CreateClientRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateClientResponse)) -- ^ Monad containing the result of the operation
createClient config
             body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateClientResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateClientResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      OAuthClient)
                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateClientResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        CreateClientResponseBodyDefault)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/oauth-clients") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/oauth-clients
-- 
-- The same as 'createClient' but returns the raw 'Data.ByteString.Char8.ByteString'
createClientRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   Linode.Common.Configuration s ->
                   GHC.Base.Maybe CreateClientRequestBody ->
                   m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createClientRaw config
                body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/oauth-clients") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/oauth-clients
-- 
-- Monadic version of 'createClient' (use with 'Linode.Common.runWithConfiguration')
createClientM :: forall m s . (Linode.Common.MonadHTTP m,
                               Linode.Common.SecurityScheme s) =>
                 GHC.Base.Maybe CreateClientRequestBody ->
                 Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                    m
                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                        (Network.HTTP.Client.Types.Response CreateClientResponse))
createClientM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateClientResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateClientResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       OAuthClient)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateClientResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                         CreateClientResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/oauth-clients") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/oauth-clients
-- 
-- Monadic version of 'createClientRaw' (use with 'Linode.Common.runWithConfiguration')
createClientRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                  Linode.Common.SecurityScheme s) =>
                    GHC.Base.Maybe CreateClientRequestBody ->
                    Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                       m
                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createClientRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/oauth-clients") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createClientRequestBody
-- 
-- 
data CreateClientRequestBody = CreateClientRequestBody {
  -- | id: The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
  createClientRequestBodyId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 512
  -- * Minimum length of 1
  , createClientRequestBodyLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | public: If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the \<a target=\"_top\" href=\"https:\/\/oauth.net\/2\/\">OAuth spec\<\/a> for more details.
  , createClientRequestBodyPublic :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | redirect_uri: The location a successful log in from \<a target=\"_top\" href=\"https:\/\/login.linode.com\">https:\/\/login.linode.com\<\/a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
  , createClientRequestBodyRedirect_uri :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | secret: The OAuth Client secret, used in the OAuth exchange.  This is returned as \`\<REDACTED>\` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
  , createClientRequestBodySecret :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | status: The status of this application.  \`active\` by default.
  , createClientRequestBodyStatus :: (GHC.Base.Maybe CreateClientRequestBodyStatus)
  -- | thumbnail_url: The URL where this client\'s thumbnail may be viewed, or \`null\` if this client does not have a thumbnail set.
  , createClientRequestBodyThumbnail_url :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateClientRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (createClientRequestBodyId obj) : (Data.Aeson..=) "label" (createClientRequestBodyLabel obj) : (Data.Aeson..=) "public" (createClientRequestBodyPublic obj) : (Data.Aeson..=) "redirect_uri" (createClientRequestBodyRedirect_uri obj) : (Data.Aeson..=) "secret" (createClientRequestBodySecret obj) : (Data.Aeson..=) "status" (createClientRequestBodyStatus obj) : (Data.Aeson..=) "thumbnail_url" (createClientRequestBodyThumbnail_url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (createClientRequestBodyId obj) GHC.Base.<> ((Data.Aeson..=) "label" (createClientRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "public" (createClientRequestBodyPublic obj) GHC.Base.<> ((Data.Aeson..=) "redirect_uri" (createClientRequestBodyRedirect_uri obj) GHC.Base.<> ((Data.Aeson..=) "secret" (createClientRequestBodySecret obj) GHC.Base.<> ((Data.Aeson..=) "status" (createClientRequestBodyStatus obj) GHC.Base.<> (Data.Aeson..=) "thumbnail_url" (createClientRequestBodyThumbnail_url obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateClientRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateClientRequestBody" (\obj -> ((((((GHC.Base.pure CreateClientRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumbnail_url"))
-- | Defines the enum schema createClientRequestBodyStatus
-- 
-- The status of this application.  \`active\` by default.
data CreateClientRequestBodyStatus
    = CreateClientRequestBodyStatusEnumOther Data.Aeson.Types.Internal.Value
    | CreateClientRequestBodyStatusEnumTyped Data.Text.Internal.Text
    | CreateClientRequestBodyStatusEnumString_active
    | CreateClientRequestBodyStatusEnumString_disabled
    | CreateClientRequestBodyStatusEnumString_suspended
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateClientRequestBodyStatus
    where toJSON (CreateClientRequestBodyStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateClientRequestBodyStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateClientRequestBodyStatusEnumString_active) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (CreateClientRequestBodyStatusEnumString_disabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled"
          toJSON (CreateClientRequestBodyStatusEnumString_suspended) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "suspended"
instance Data.Aeson.FromJSON CreateClientRequestBodyStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then CreateClientRequestBodyStatusEnumString_active
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled")
                                                then CreateClientRequestBodyStatusEnumString_disabled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "suspended")
                                                      then CreateClientRequestBodyStatusEnumString_suspended
                                                      else CreateClientRequestBodyStatusEnumOther val)
-- | Represents a response of the operation 'createClient'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateClientResponseError' is used.
data CreateClientResponse =                                      
   CreateClientResponseError GHC.Base.String                     -- ^ Means either no matching case available or a parse error
  | CreateClientResponse200 OAuthClient                          -- ^ Client created successfully.
  | CreateClientResponseDefault CreateClientResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateClientResponseBodyDefault
-- 
-- 
data CreateClientResponseBodyDefault = CreateClientResponseBodyDefault {
  -- | errors
  createClientResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateClientResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createClientResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createClientResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateClientResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateClientResponseBodyDefault" (\obj -> GHC.Base.pure CreateClientResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
