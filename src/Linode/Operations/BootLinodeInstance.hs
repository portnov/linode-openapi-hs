-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation bootLinodeInstance
module Linode.Operations.BootLinodeInstance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/boot
-- 
-- Boots a Linode you have permission to modify. If no parameters are given, a Config profile
-- will be chosen for this boot based on the following criteria:
-- 
-- * If there is only one Config profile for this Linode, it will be used.
-- * If there is more than one Config profile, the last booted config will be used.
-- * If there is more than one Config profile and none were the last to be booted (because the
--   Linode was never booted or the last booted config was deleted) an error will be returned.
bootLinodeInstance :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ linodeId: The ID of the Linode to boot.
  -> GHC.Maybe.Maybe BootLinodeInstanceRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response BootLinodeInstanceResponse) -- ^ Monadic computation which returns the result of the operation
bootLinodeInstance linodeId
                   body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either BootLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> BootLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         Data.Aeson.Types.Internal.Object)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> BootLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           BootLinodeInstanceResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel linodeId)) GHC.Base.++ "/boot"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/boot.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data BootLinodeInstanceRequestBody = BootLinodeInstanceRequestBody {
  -- | config_id: The Linode Config ID to boot into.
  bootLinodeInstanceRequestBodyConfigId :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BootLinodeInstanceRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("config_id" Data.Aeson.Types.ToJSON..= bootLinodeInstanceRequestBodyConfigId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("config_id" Data.Aeson.Types.ToJSON..= bootLinodeInstanceRequestBodyConfigId obj)
instance Data.Aeson.Types.FromJSON.FromJSON BootLinodeInstanceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BootLinodeInstanceRequestBody" (\obj -> GHC.Base.pure BootLinodeInstanceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "config_id"))
-- | Create a new 'BootLinodeInstanceRequestBody' with all required fields.
mkBootLinodeInstanceRequestBody :: BootLinodeInstanceRequestBody
mkBootLinodeInstanceRequestBody = BootLinodeInstanceRequestBody{bootLinodeInstanceRequestBodyConfigId = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'bootLinodeInstance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'BootLinodeInstanceResponseError' is used.
data BootLinodeInstanceResponse =
   BootLinodeInstanceResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | BootLinodeInstanceResponse200 Data.Aeson.Types.Internal.Object -- ^ Boot started.
  | BootLinodeInstanceResponseDefault BootLinodeInstanceResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data BootLinodeInstanceResponseBodyDefault = BootLinodeInstanceResponseBodyDefault {
  -- | errors
  bootLinodeInstanceResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BootLinodeInstanceResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= bootLinodeInstanceResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= bootLinodeInstanceResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON BootLinodeInstanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BootLinodeInstanceResponseBodyDefault" (\obj -> GHC.Base.pure BootLinodeInstanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'BootLinodeInstanceResponseBodyDefault' with all required fields.
mkBootLinodeInstanceResponseBodyDefault :: BootLinodeInstanceResponseBodyDefault
mkBootLinodeInstanceResponseBodyDefault = BootLinodeInstanceResponseBodyDefault{bootLinodeInstanceResponseBodyDefaultErrors = GHC.Maybe.Nothing}
