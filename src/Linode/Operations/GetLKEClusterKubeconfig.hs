-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLKEClusterKubeconfig
module Linode.Operations.GetLKEClusterKubeconfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /lke/clusters/{clusterId}/kubeconfig
-- 
-- Get the Kubeconfig file for a Cluster. Please note that it often takes 2-5 minutes before
-- the Kubeconfig file is ready after first [creating a new cluster](\/docs\/api\/linode-kubernetes-engine-lke\/\#kubernetes-cluster-create).
getLKEClusterKubeconfig :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ clusterId: ID of the Kubernetes cluster to look up.
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLKEClusterKubeconfigResponse) -- ^ Monadic computation which returns the result of the operation
getLKEClusterKubeconfig clusterId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLKEClusterKubeconfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterKubeconfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetLKEClusterKubeconfigResponseBody200)
                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterKubeconfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               GetLKEClusterKubeconfigResponseBodyDefault)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/lke/clusters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel clusterId)) GHC.Base.++ "/kubeconfig"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getLKEClusterKubeconfig'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLKEClusterKubeconfigResponseError' is used.
data GetLKEClusterKubeconfigResponse =
   GetLKEClusterKubeconfigResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLKEClusterKubeconfigResponse200 GetLKEClusterKubeconfigResponseBody200 -- ^ Returns the Base64-encoded Kubeconfig file for this Kubernetes cluster.
  | GetLKEClusterKubeconfigResponseDefault GetLKEClusterKubeconfigResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/lke\/clusters\/{clusterId}\/kubeconfig.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLKEClusterKubeconfigResponseBody200 = GetLKEClusterKubeconfigResponseBody200 {
  -- | kubeconfig: The Base64-encoded Kubeconfig file for this Cluster.
  getLKEClusterKubeconfigResponseBody200Kubeconfig :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLKEClusterKubeconfigResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("kubeconfig" Data.Aeson.Types.ToJSON..= getLKEClusterKubeconfigResponseBody200Kubeconfig obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("kubeconfig" Data.Aeson.Types.ToJSON..= getLKEClusterKubeconfigResponseBody200Kubeconfig obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterKubeconfigResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterKubeconfigResponseBody200" (\obj -> GHC.Base.pure GetLKEClusterKubeconfigResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "kubeconfig"))
-- | Create a new 'GetLKEClusterKubeconfigResponseBody200' with all required fields.
mkGetLKEClusterKubeconfigResponseBody200 :: GetLKEClusterKubeconfigResponseBody200
mkGetLKEClusterKubeconfigResponseBody200 = GetLKEClusterKubeconfigResponseBody200{getLKEClusterKubeconfigResponseBody200Kubeconfig = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLKEClusterKubeconfigResponseBodyDefault = GetLKEClusterKubeconfigResponseBodyDefault {
  -- | errors
  getLKEClusterKubeconfigResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLKEClusterKubeconfigResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLKEClusterKubeconfigResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLKEClusterKubeconfigResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterKubeconfigResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterKubeconfigResponseBodyDefault" (\obj -> GHC.Base.pure GetLKEClusterKubeconfigResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLKEClusterKubeconfigResponseBodyDefault' with all required fields.
mkGetLKEClusterKubeconfigResponseBodyDefault :: GetLKEClusterKubeconfigResponseBodyDefault
mkGetLKEClusterKubeconfigResponseBodyDefault = GetLKEClusterKubeconfigResponseBodyDefault{getLKEClusterKubeconfigResponseBodyDefaultErrors = GHC.Maybe.Nothing}
