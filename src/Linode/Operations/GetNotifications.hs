-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNotifications
module Linode.Operations.GetNotifications where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /account/notifications
-- 
-- Returns a collection of Notification objects representing important, often time-sensitive items related to your Account.
-- You cannot interact directly with Notifications, and a Notification will disappear when the circumstances causing it have been resolved. For example, if you have an important Ticket open, you must respond to the Ticket to dismiss the Notification.
getNotifications :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetNotificationsResponse) -- ^ Monadic computation which returns the result of the operation
getNotifications = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNotificationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNotificationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              GetNotificationsResponseBody200)
                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetNotificationsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                GetNotificationsResponseBodyDefault)
                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/notifications") GHC.Base.mempty)
-- | Represents a response of the operation 'getNotifications'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNotificationsResponseError' is used.
data GetNotificationsResponse =
   GetNotificationsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNotificationsResponse200 GetNotificationsResponseBody200 -- ^ Returns a paginated list of Notification objects.
  | GetNotificationsResponseDefault GetNotificationsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/account\/notifications.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNotificationsResponseBody200 = GetNotificationsResponseBody200 {
  -- | data
  getNotificationsResponseBody200Data :: (GHC.Maybe.Maybe ([Notification]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getNotificationsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getNotificationsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getNotificationsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNotificationsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getNotificationsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetNotificationsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNotificationsResponseBody200" (\obj -> (((GHC.Base.pure GetNotificationsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetNotificationsResponseBody200' with all required fields.
mkGetNotificationsResponseBody200 :: GetNotificationsResponseBody200
mkGetNotificationsResponseBody200 = GetNotificationsResponseBody200{getNotificationsResponseBody200Data = GHC.Maybe.Nothing,
                                                                    getNotificationsResponseBody200Page = GHC.Maybe.Nothing,
                                                                    getNotificationsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                    getNotificationsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNotificationsResponseBodyDefault = GetNotificationsResponseBodyDefault {
  -- | errors
  getNotificationsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNotificationsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getNotificationsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getNotificationsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetNotificationsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNotificationsResponseBodyDefault" (\obj -> GHC.Base.pure GetNotificationsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetNotificationsResponseBodyDefault' with all required fields.
mkGetNotificationsResponseBodyDefault :: GetNotificationsResponseBodyDefault
mkGetNotificationsResponseBodyDefault = GetNotificationsResponseBodyDefault{getNotificationsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
