-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation modifyObjectStorageBucketAccess
module Linode.Operations.ModifyObjectStorageBucketAccess where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Allows changing basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings.
-- Only allows enabling\/disabling CORS for all origins, and\/or setting canned ACLs.
-- 
-- 
-- For more fine-grained control of both systems, please use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/bucketops\/\#put-bucket-acl) directly.
modifyObjectStorageBucketAccess :: forall m . Linode.Common.MonadHTTP m => ModifyObjectStorageBucketAccessParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe ModifyObjectStorageBucketAccessRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response ModifyObjectStorageBucketAccessResponse) -- ^ Monadic computation which returns the result of the operation
modifyObjectStorageBucketAccess parameters
                                body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ModifyObjectStorageBucketAccessResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ModifyObjectStorageBucketAccessResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ModifyObjectStorageBucketAccessResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  ModifyObjectStorageBucketAccessResponseBodyDefault)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack (("/object-storage/buckets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (modifyObjectStorageBucketAccessParametersPathClusterId parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (modifyObjectStorageBucketAccessParametersPathBucket parameters))) GHC.Base.++ "/access"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/access.POST.parameters@ in the specification.
-- 
-- 
data ModifyObjectStorageBucketAccessParameters = ModifyObjectStorageBucketAccessParameters {
  -- | pathBucket: Represents the parameter named \'bucket\'
  -- 
  -- The bucket name.
  modifyObjectStorageBucketAccessParametersPathBucket :: Data.Text.Internal.Text
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- The ID of the cluster this bucket exists in.
  , modifyObjectStorageBucketAccessParametersPathClusterId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ModifyObjectStorageBucketAccessParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathBucket" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessParametersPathBucket obj : "pathClusterId" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessParametersPathClusterId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathBucket" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessParametersPathBucket obj) GHC.Base.<> ("pathClusterId" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessParametersPathClusterId obj))
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ModifyObjectStorageBucketAccessParameters" (\obj -> (GHC.Base.pure ModifyObjectStorageBucketAccessParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathBucket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId"))
-- | Create a new 'ModifyObjectStorageBucketAccessParameters' with all required fields.
mkModifyObjectStorageBucketAccessParameters :: Data.Text.Internal.Text -- ^ 'modifyObjectStorageBucketAccessParametersPathBucket'
  -> Data.Text.Internal.Text -- ^ 'modifyObjectStorageBucketAccessParametersPathClusterId'
  -> ModifyObjectStorageBucketAccessParameters
mkModifyObjectStorageBucketAccessParameters modifyObjectStorageBucketAccessParametersPathBucket modifyObjectStorageBucketAccessParametersPathClusterId = ModifyObjectStorageBucketAccessParameters{modifyObjectStorageBucketAccessParametersPathBucket = modifyObjectStorageBucketAccessParametersPathBucket,
                                                                                                                                                                                                   modifyObjectStorageBucketAccessParametersPathClusterId = modifyObjectStorageBucketAccessParametersPathClusterId}
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/access.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data ModifyObjectStorageBucketAccessRequestBody = ModifyObjectStorageBucketAccessRequestBody {
  -- | acl: The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
  modifyObjectStorageBucketAccessRequestBodyAcl :: (GHC.Maybe.Maybe ModifyObjectStorageBucketAccessRequestBodyAcl')
  -- | cors_enabled: If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
  , modifyObjectStorageBucketAccessRequestBodyCorsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ModifyObjectStorageBucketAccessRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("acl" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessRequestBodyAcl obj : "cors_enabled" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessRequestBodyCorsEnabled obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acl" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessRequestBodyAcl obj) GHC.Base.<> ("cors_enabled" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessRequestBodyCorsEnabled obj))
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ModifyObjectStorageBucketAccessRequestBody" (\obj -> (GHC.Base.pure ModifyObjectStorageBucketAccessRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cors_enabled"))
-- | Create a new 'ModifyObjectStorageBucketAccessRequestBody' with all required fields.
mkModifyObjectStorageBucketAccessRequestBody :: ModifyObjectStorageBucketAccessRequestBody
mkModifyObjectStorageBucketAccessRequestBody = ModifyObjectStorageBucketAccessRequestBody{modifyObjectStorageBucketAccessRequestBodyAcl = GHC.Maybe.Nothing,
                                                                                          modifyObjectStorageBucketAccessRequestBodyCorsEnabled = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/access.POST.requestBody.content.application\/json.schema.properties.acl@ in the specification.
-- 
-- The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
data ModifyObjectStorageBucketAccessRequestBodyAcl' =
   ModifyObjectStorageBucketAccessRequestBodyAcl'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ModifyObjectStorageBucketAccessRequestBodyAcl'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPrivate -- ^ Represents the JSON value @"private"@
  | ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPublicRead -- ^ Represents the JSON value @"public-read"@
  | ModifyObjectStorageBucketAccessRequestBodyAcl'EnumAuthenticatedRead -- ^ Represents the JSON value @"authenticated-read"@
  | ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPublicReadWrite -- ^ Represents the JSON value @"public-read-write"@
  | ModifyObjectStorageBucketAccessRequestBodyAcl'EnumCustom -- ^ Represents the JSON value @"custom"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ModifyObjectStorageBucketAccessRequestBodyAcl'
    where toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'Other val) = val
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPrivate) = "private"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPublicRead) = "public-read"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'EnumAuthenticatedRead) = "authenticated-read"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPublicReadWrite) = "public-read-write"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAcl'EnumCustom) = "custom"
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessRequestBodyAcl'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "private" -> ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPrivate
                                            | val GHC.Classes.== "public-read" -> ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPublicRead
                                            | val GHC.Classes.== "authenticated-read" -> ModifyObjectStorageBucketAccessRequestBodyAcl'EnumAuthenticatedRead
                                            | val GHC.Classes.== "public-read-write" -> ModifyObjectStorageBucketAccessRequestBodyAcl'EnumPublicReadWrite
                                            | val GHC.Classes.== "custom" -> ModifyObjectStorageBucketAccessRequestBodyAcl'EnumCustom
                                            | GHC.Base.otherwise -> ModifyObjectStorageBucketAccessRequestBodyAcl'Other val)
-- | Represents a response of the operation 'modifyObjectStorageBucketAccess'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ModifyObjectStorageBucketAccessResponseError' is used.
data ModifyObjectStorageBucketAccessResponse =
   ModifyObjectStorageBucketAccessResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ModifyObjectStorageBucketAccessResponse200 Data.Aeson.Types.Internal.Object -- ^ Access controls updated.
  | ModifyObjectStorageBucketAccessResponseDefault ModifyObjectStorageBucketAccessResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data ModifyObjectStorageBucketAccessResponseBodyDefault = ModifyObjectStorageBucketAccessResponseBodyDefault {
  -- | errors
  modifyObjectStorageBucketAccessResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ModifyObjectStorageBucketAccessResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= modifyObjectStorageBucketAccessResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ModifyObjectStorageBucketAccessResponseBodyDefault" (\obj -> GHC.Base.pure ModifyObjectStorageBucketAccessResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'ModifyObjectStorageBucketAccessResponseBodyDefault' with all required fields.
mkModifyObjectStorageBucketAccessResponseBodyDefault :: ModifyObjectStorageBucketAccessResponseBodyDefault
mkModifyObjectStorageBucketAccessResponseBodyDefault = ModifyObjectStorageBucketAccessResponseBodyDefault{modifyObjectStorageBucketAccessResponseBodyDefaultErrors = GHC.Maybe.Nothing}
