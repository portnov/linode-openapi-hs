-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation modifyObjectStorageBucketAccess
module Linode.Operations.ModifyObjectStorageBucketAccess where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Allows changing basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings.
-- Only allows enabling\/disabling CORS for all origins, and\/or setting canned ACLs.
-- 
-- 
-- For more fine-grained control of both systems, please use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/bucketops\/\#put-bucket-acl) directly.
modifyObjectStorageBucketAccess :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe ModifyObjectStorageBucketAccessRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response ModifyObjectStorageBucketAccessResponse)) -- ^ Monad containing the result of the operation
modifyObjectStorageBucketAccess config
                                body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ModifyObjectStorageBucketAccessResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ModifyObjectStorageBucketAccessResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ModifyObjectStorageBucketAccessResponseBody200)
                                                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ModifyObjectStorageBucketAccessResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 ModifyObjectStorageBucketAccessResponseBodyDefault)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- The same as 'modifyObjectStorageBucketAccess' but returns the raw 'Data.ByteString.Char8.ByteString'
modifyObjectStorageBucketAccessRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                                    Linode.Common.SecurityScheme s) =>
                                      Linode.Common.Configuration s ->
                                      GHC.Base.Maybe ModifyObjectStorageBucketAccessRequestBody ->
                                      m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
modifyObjectStorageBucketAccessRaw config
                                   body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Monadic version of 'modifyObjectStorageBucketAccess' (use with 'Linode.Common.runWithConfiguration')
modifyObjectStorageBucketAccessM :: forall m s . (Linode.Common.MonadHTTP m,
                                                  Linode.Common.SecurityScheme s) =>
                                    GHC.Base.Maybe ModifyObjectStorageBucketAccessRequestBody ->
                                    Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                       m
                                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                           (Network.HTTP.Client.Types.Response ModifyObjectStorageBucketAccessResponse))
modifyObjectStorageBucketAccessM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either ModifyObjectStorageBucketAccessResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ModifyObjectStorageBucketAccessResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ModifyObjectStorageBucketAccessResponseBody200)
                                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ModifyObjectStorageBucketAccessResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  ModifyObjectStorageBucketAccessResponseBodyDefault)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Monadic version of 'modifyObjectStorageBucketAccessRaw' (use with 'Linode.Common.runWithConfiguration')
modifyObjectStorageBucketAccessRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                                     Linode.Common.SecurityScheme s) =>
                                       GHC.Base.Maybe ModifyObjectStorageBucketAccessRequestBody ->
                                       Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                          m
                                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
modifyObjectStorageBucketAccessRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema modifyObjectStorageBucketAccessRequestBody
-- 
-- 
data ModifyObjectStorageBucketAccessRequestBody = ModifyObjectStorageBucketAccessRequestBody {
  -- | acl: The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
  modifyObjectStorageBucketAccessRequestBodyAcl :: (GHC.Base.Maybe ModifyObjectStorageBucketAccessRequestBodyAcl)
  -- | cors_enabled: If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
  , modifyObjectStorageBucketAccessRequestBodyCors_enabled :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ModifyObjectStorageBucketAccessRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "acl" (modifyObjectStorageBucketAccessRequestBodyAcl obj) : (Data.Aeson..=) "cors_enabled" (modifyObjectStorageBucketAccessRequestBodyCors_enabled obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "acl" (modifyObjectStorageBucketAccessRequestBodyAcl obj) GHC.Base.<> (Data.Aeson..=) "cors_enabled" (modifyObjectStorageBucketAccessRequestBodyCors_enabled obj))
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ModifyObjectStorageBucketAccessRequestBody" (\obj -> (GHC.Base.pure ModifyObjectStorageBucketAccessRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cors_enabled"))
-- | Defines the enum schema modifyObjectStorageBucketAccessRequestBodyAcl
-- 
-- The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
data ModifyObjectStorageBucketAccessRequestBodyAcl
    = ModifyObjectStorageBucketAccessRequestBodyAclEnumOther Data.Aeson.Types.Internal.Value
    | ModifyObjectStorageBucketAccessRequestBodyAclEnumTyped Data.Text.Internal.Text
    | ModifyObjectStorageBucketAccessRequestBodyAclEnumString_authenticated_read
    | ModifyObjectStorageBucketAccessRequestBodyAclEnumString_custom
    | ModifyObjectStorageBucketAccessRequestBodyAclEnumString_private
    | ModifyObjectStorageBucketAccessRequestBodyAclEnumString_public_read
    | ModifyObjectStorageBucketAccessRequestBodyAclEnumString_public_read_write
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ModifyObjectStorageBucketAccessRequestBodyAcl
    where toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumString_authenticated_read) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authenticated-read"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumString_custom) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumString_private) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumString_public_read) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read"
          toJSON (ModifyObjectStorageBucketAccessRequestBodyAclEnumString_public_read_write) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read-write"
instance Data.Aeson.FromJSON ModifyObjectStorageBucketAccessRequestBodyAcl
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authenticated-read")
                                          then ModifyObjectStorageBucketAccessRequestBodyAclEnumString_authenticated_read
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom")
                                                then ModifyObjectStorageBucketAccessRequestBodyAclEnumString_custom
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private")
                                                      then ModifyObjectStorageBucketAccessRequestBodyAclEnumString_private
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read")
                                                            then ModifyObjectStorageBucketAccessRequestBodyAclEnumString_public_read
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read-write")
                                                                  then ModifyObjectStorageBucketAccessRequestBodyAclEnumString_public_read_write
                                                                  else ModifyObjectStorageBucketAccessRequestBodyAclEnumOther val)
-- | Represents a response of the operation 'modifyObjectStorageBucketAccess'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ModifyObjectStorageBucketAccessResponseError' is used.
data ModifyObjectStorageBucketAccessResponse =                                                         
   ModifyObjectStorageBucketAccessResponseError GHC.Base.String                                        -- ^ Means either no matching case available or a parse error
  | ModifyObjectStorageBucketAccessResponse200 ModifyObjectStorageBucketAccessResponseBody200          -- ^ Access controls updated.
  | ModifyObjectStorageBucketAccessResponseDefault ModifyObjectStorageBucketAccessResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema ModifyObjectStorageBucketAccessResponseBody200
-- 
-- 
data ModifyObjectStorageBucketAccessResponseBody200 = ModifyObjectStorageBucketAccessResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ModifyObjectStorageBucketAccessResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ModifyObjectStorageBucketAccessResponseBody200" (\obj -> GHC.Base.pure ModifyObjectStorageBucketAccessResponseBody200)
-- | Defines the data type for the schema ModifyObjectStorageBucketAccessResponseBodyDefault
-- 
-- 
data ModifyObjectStorageBucketAccessResponseBodyDefault = ModifyObjectStorageBucketAccessResponseBodyDefault {
  -- | errors
  modifyObjectStorageBucketAccessResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ModifyObjectStorageBucketAccessResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (modifyObjectStorageBucketAccessResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (modifyObjectStorageBucketAccessResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON ModifyObjectStorageBucketAccessResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ModifyObjectStorageBucketAccessResponseBodyDefault" (\obj -> GHC.Base.pure ModifyObjectStorageBucketAccessResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
