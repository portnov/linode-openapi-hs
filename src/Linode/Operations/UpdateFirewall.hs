-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation updateFirewall
module Linode.Operations.UpdateFirewall where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > PUT /networking/firewalls/{firewallId}
-- 
-- Updates information for a Firewall. Some parts of a Firewall\'s configuration cannot
-- be manipulated by this endpoint:
-- 
-- - A Firewall\'s Devices cannot be set with this endpoint. Instead, use the
-- [Create Firewall Device](\/docs\/api\/networking\/\#firewall-device-create)
-- and [Delete Firewall Device](\/docs\/api\/networking\/\#firewall-device-delete)
-- endpoints to assign and remove this Firewall from Linode services.
-- 
-- - A Firewall\'s Rules cannot be changed with this endpoint. Instead, use the
-- [Update Firewall Rules](\/docs\/api\/networking\/\#firewall-rules-update)
-- endpoint to update your Rules.
-- 
-- - A Firewall\'s status can be set to \`enabled\` or \`disabled\` by this endpoint, but it cannot be
-- set to \`deleted\`. Instead, use the
-- [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete)
-- endpoint to delete a Firewall.
-- 
-- If a Firewall\'s status is changed with this endpoint, a corresponding \`firewall_enable\` or
-- \`firewall_disable\` Event will be generated.
updateFirewall :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe UpdateFirewallRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response UpdateFirewallResponse)) -- ^ Monad containing the result of the operation
updateFirewall config
               body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateFirewallResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateFirewallResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Firewall)
                                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateFirewallResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              UpdateFirewallResponseBodyDefault)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/networking/firewalls/{firewallId}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /networking/firewalls/{firewallId}
-- 
-- The same as 'updateFirewall' but returns the raw 'Data.ByteString.Char8.ByteString'
updateFirewallRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                   Linode.Common.SecurityScheme s) =>
                     Linode.Common.Configuration s ->
                     GHC.Base.Maybe UpdateFirewallRequestBody ->
                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
updateFirewallRaw config
                  body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/networking/firewalls/{firewallId}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /networking/firewalls/{firewallId}
-- 
-- Monadic version of 'updateFirewall' (use with 'Linode.Common.runWithConfiguration')
updateFirewallM :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   GHC.Base.Maybe UpdateFirewallRequestBody ->
                   Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response UpdateFirewallResponse))
updateFirewallM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either UpdateFirewallResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateFirewallResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             Firewall)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateFirewallResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                               UpdateFirewallResponseBodyDefault)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/networking/firewalls/{firewallId}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /networking/firewalls/{firewallId}
-- 
-- Monadic version of 'updateFirewallRaw' (use with 'Linode.Common.runWithConfiguration')
updateFirewallRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      GHC.Base.Maybe UpdateFirewallRequestBody ->
                      Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
updateFirewallRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/networking/firewalls/{firewallId}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema updateFirewallRequestBody
-- 
-- 
data UpdateFirewallRequestBody = UpdateFirewallRequestBody {
  -- | label
  updateFirewallRequestBodyLabel :: (GHC.Base.Maybe Firewall_properties_label)
  -- | status
  , updateFirewallRequestBodyStatus :: (GHC.Base.Maybe Firewall_properties_status)
  -- | tags
  , updateFirewallRequestBodyTags :: (GHC.Base.Maybe Firewall_properties_tags)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateFirewallRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "label" (updateFirewallRequestBodyLabel obj) : (Data.Aeson..=) "status" (updateFirewallRequestBodyStatus obj) : (Data.Aeson..=) "tags" (updateFirewallRequestBodyTags obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "label" (updateFirewallRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "status" (updateFirewallRequestBodyStatus obj) GHC.Base.<> (Data.Aeson..=) "tags" (updateFirewallRequestBodyTags obj)))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateFirewallRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateFirewallRequestBody" (\obj -> ((GHC.Base.pure UpdateFirewallRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags"))
-- | Represents a response of the operation 'updateFirewall'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateFirewallResponseError' is used.
data UpdateFirewallResponse =                                        
   UpdateFirewallResponseError GHC.Base.String                       -- ^ Means either no matching case available or a parse error
  | UpdateFirewallResponse200 Firewall                               -- ^ Firewall updated successfully.
  | UpdateFirewallResponseDefault UpdateFirewallResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema UpdateFirewallResponseBodyDefault
-- 
-- 
data UpdateFirewallResponseBodyDefault = UpdateFirewallResponseBodyDefault {
  -- | errors
  updateFirewallResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateFirewallResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (updateFirewallResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (updateFirewallResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateFirewallResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateFirewallResponseBodyDefault" (\obj -> GHC.Base.pure UpdateFirewallResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
