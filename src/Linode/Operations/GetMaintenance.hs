-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getMaintenance
module Linode.Operations.GetMaintenance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /account/maintenance
-- 
-- Returns a collection of Maintenance objects for any entity a user has permissions to view.
-- 
-- Currently, Linodes are the only entities available for viewing.
-- 
-- **Beta**: This endpoint is in beta. Please make sure to prepend all requests with \`\/v4beta\` instead of \`\/v4\`, and be aware that this endpoint may receive breaking updates in the future. This notice will be removed when this endpoint is out of beta.
getMaintenance :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetMaintenanceResponse)) -- ^ Monad containing the result of the operation
getMaintenance config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetMaintenanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMaintenanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetMaintenanceResponseBody200)
                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetMaintenanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                GetMaintenanceResponseBodyDefault)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/maintenance") [])
-- | > GET /account/maintenance
-- 
-- The same as 'getMaintenance' but returns the raw 'Data.ByteString.Char8.ByteString'
getMaintenanceRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                   Linode.Common.SecurityScheme s) =>
                     Linode.Common.Configuration s ->
                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getMaintenanceRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/maintenance") [])
-- | > GET /account/maintenance
-- 
-- Monadic version of 'getMaintenance' (use with 'Linode.Common.runWithConfiguration')
getMaintenanceM :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response GetMaintenanceResponse))
getMaintenanceM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetMaintenanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMaintenanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        GetMaintenanceResponseBody200)
                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetMaintenanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                          GetMaintenanceResponseBodyDefault)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/maintenance") [])
-- | > GET /account/maintenance
-- 
-- Monadic version of 'getMaintenanceRaw' (use with 'Linode.Common.runWithConfiguration')
getMaintenanceRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getMaintenanceRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/maintenance") [])
-- | Represents a response of the operation 'getMaintenance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetMaintenanceResponseError' is used.
data GetMaintenanceResponse =                                        
   GetMaintenanceResponseError GHC.Base.String                       -- ^ Means either no matching case available or a parse error
  | GetMaintenanceResponse200 GetMaintenanceResponseBody200          -- ^ Returns a paginated list of Maintenance objects.
  | GetMaintenanceResponseDefault GetMaintenanceResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetMaintenanceResponseBody200
-- 
-- 
data GetMaintenanceResponseBody200 = GetMaintenanceResponseBody200 {
  -- | data
  getMaintenanceResponseBody200Data :: (GHC.Base.Maybe ([] Maintenance))
  -- | page
  , getMaintenanceResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getMaintenanceResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getMaintenanceResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetMaintenanceResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getMaintenanceResponseBody200Data obj) : (Data.Aeson..=) "page" (getMaintenanceResponseBody200Page obj) : (Data.Aeson..=) "pages" (getMaintenanceResponseBody200Pages obj) : (Data.Aeson..=) "results" (getMaintenanceResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getMaintenanceResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getMaintenanceResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getMaintenanceResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getMaintenanceResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetMaintenanceResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMaintenanceResponseBody200" (\obj -> (((GHC.Base.pure GetMaintenanceResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Defines the data type for the schema GetMaintenanceResponseBodyDefault
-- 
-- 
data GetMaintenanceResponseBodyDefault = GetMaintenanceResponseBodyDefault {
  -- | errors
  getMaintenanceResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetMaintenanceResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getMaintenanceResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getMaintenanceResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetMaintenanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMaintenanceResponseBodyDefault" (\obj -> GHC.Base.pure GetMaintenanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
