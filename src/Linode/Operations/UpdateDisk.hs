-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation updateDisk
module Linode.Operations.UpdateDisk where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > PUT /linode/instances/{linodeId}/disks/{diskId}
-- 
-- Updates a Disk that you have permission to \`read_write\`.
updateDisk :: forall m . Linode.Common.MonadHTTP m => UpdateDiskParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Disk -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response UpdateDiskResponse) -- ^ Monadic computation which returns the result of the operation
updateDisk parameters
           body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateDiskResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateDiskResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                 Disk)
                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateDiskResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                   UpdateDiskResponseBodyDefault)
                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack (("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (updateDiskParametersPathLinodeId parameters))) GHC.Base.++ "/disks/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (updateDiskParametersPathDiskId parameters))) GHC.Base.++ ""))) GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/disks\/{diskId}.PUT.parameters@ in the specification.
-- 
-- 
data UpdateDiskParameters = UpdateDiskParameters {
  -- | pathDiskId: Represents the parameter named \'diskId\'
  -- 
  -- ID of the Disk to look up.
  updateDiskParametersPathDiskId :: GHC.Types.Int
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- ID of the Linode to look up.
  , updateDiskParametersPathLinodeId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateDiskParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathDiskId" Data.Aeson.Types.ToJSON..= updateDiskParametersPathDiskId obj : "pathLinodeId" Data.Aeson.Types.ToJSON..= updateDiskParametersPathLinodeId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathDiskId" Data.Aeson.Types.ToJSON..= updateDiskParametersPathDiskId obj) GHC.Base.<> ("pathLinodeId" Data.Aeson.Types.ToJSON..= updateDiskParametersPathLinodeId obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateDiskParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateDiskParameters" (\obj -> (GHC.Base.pure UpdateDiskParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDiskId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId"))
-- | Create a new 'UpdateDiskParameters' with all required fields.
mkUpdateDiskParameters :: GHC.Types.Int -- ^ 'updateDiskParametersPathDiskId'
  -> GHC.Types.Int -- ^ 'updateDiskParametersPathLinodeId'
  -> UpdateDiskParameters
mkUpdateDiskParameters updateDiskParametersPathDiskId updateDiskParametersPathLinodeId = UpdateDiskParameters{updateDiskParametersPathDiskId = updateDiskParametersPathDiskId,
                                                                                                              updateDiskParametersPathLinodeId = updateDiskParametersPathLinodeId}
-- | Represents a response of the operation 'updateDisk'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateDiskResponseError' is used.
data UpdateDiskResponse =
   UpdateDiskResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | UpdateDiskResponse200 Disk -- ^ The updated Disk.
  | UpdateDiskResponseDefault UpdateDiskResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data UpdateDiskResponseBodyDefault = UpdateDiskResponseBodyDefault {
  -- | errors
  updateDiskResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateDiskResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= updateDiskResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= updateDiskResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON UpdateDiskResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateDiskResponseBodyDefault" (\obj -> GHC.Base.pure UpdateDiskResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'UpdateDiskResponseBodyDefault' with all required fields.
mkUpdateDiskResponseBodyDefault :: UpdateDiskResponseBodyDefault
mkUpdateDiskResponseBodyDefault = UpdateDiskResponseBodyDefault{updateDiskResponseBodyDefaultErrors = GHC.Maybe.Nothing}
