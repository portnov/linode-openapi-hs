-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createObjectStorageObjectURL
module Linode.Operations.CreateObjectStorageObjectURL where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /object-storage/buckets/{clusterId}/{bucket}/object-url
-- 
-- Creates a pre-signed URL to access a single Object in a bucket. This
-- can be used to share objects, and also to create\/delete objects by using
-- the appropriate HTTP method in your request body\'s \`method\` parameter.
-- 
-- 
-- This endpoint is available for convenience. It is recommended that instead you
-- use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/)
-- directly.
createObjectStorageObjectURL :: forall m . Linode.Common.MonadHTTP m => CreateObjectStorageObjectURLParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe CreateObjectStorageObjectURLRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreateObjectStorageObjectURLResponse) -- ^ Monadic computation which returns the result of the operation
createObjectStorageObjectURL parameters
                             body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateObjectStorageObjectURLResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateObjectStorageObjectURLResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       CreateObjectStorageObjectURLResponseBody200)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateObjectStorageObjectURLResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                         CreateObjectStorageObjectURLResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack (("/object-storage/buckets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (createObjectStorageObjectURLParametersPathClusterId parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (createObjectStorageObjectURLParametersPathBucket parameters))) GHC.Base.++ "/object-url"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-url.POST.parameters@ in the specification.
-- 
-- 
data CreateObjectStorageObjectURLParameters = CreateObjectStorageObjectURLParameters {
  -- | pathBucket: Represents the parameter named \'bucket\'
  -- 
  -- The bucket name.
  createObjectStorageObjectURLParametersPathBucket :: Data.Text.Internal.Text
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- The ID of the cluster this bucket exists in.
  , createObjectStorageObjectURLParametersPathClusterId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateObjectStorageObjectURLParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathBucket" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLParametersPathBucket obj : "pathClusterId" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLParametersPathClusterId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathBucket" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLParametersPathBucket obj) GHC.Base.<> ("pathClusterId" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLParametersPathClusterId obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateObjectStorageObjectURLParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateObjectStorageObjectURLParameters" (\obj -> (GHC.Base.pure CreateObjectStorageObjectURLParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathBucket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId"))
-- | Create a new 'CreateObjectStorageObjectURLParameters' with all required fields.
mkCreateObjectStorageObjectURLParameters :: Data.Text.Internal.Text -- ^ 'createObjectStorageObjectURLParametersPathBucket'
  -> Data.Text.Internal.Text -- ^ 'createObjectStorageObjectURLParametersPathClusterId'
  -> CreateObjectStorageObjectURLParameters
mkCreateObjectStorageObjectURLParameters createObjectStorageObjectURLParametersPathBucket createObjectStorageObjectURLParametersPathClusterId = CreateObjectStorageObjectURLParameters{createObjectStorageObjectURLParametersPathBucket = createObjectStorageObjectURLParametersPathBucket,
                                                                                                                                                                                       createObjectStorageObjectURLParametersPathClusterId = createObjectStorageObjectURLParametersPathClusterId}
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-url.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateObjectStorageObjectURLRequestBody = CreateObjectStorageObjectURLRequestBody {
  -- | content_type: The expected \`Content-type\` header of the request this signed URL will be valid for.  If provided, the \`Content-type\` header _must_ be sent with the request when this URL is used, and _must_ be the same as it was when the signed URL was created. Required for all methods *except* \"GET\" or \"DELETE\".
  createObjectStorageObjectURLRequestBodyContentType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expires_in: How long this signed URL will be valid for, in seconds.  If omitted, the URL will be valid for 3600 seconds (1 hour).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 68400.0
  -- * Minimum  of 360.0
  , createObjectStorageObjectURLRequestBodyExpiresIn :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | method: The HTTP method allowed to be used with the pre-signed URL.
  , createObjectStorageObjectURLRequestBodyMethod :: Data.Text.Internal.Text
  -- | name: The name of the object that will be accessed with the pre-signed URL. This object need not exist, and no error will be returned if it doesn\'t. This behavior is useful for generating pre-signed URLs to upload new objects to by setting the \`method\` to \"PUT\".
  , createObjectStorageObjectURLRequestBodyName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateObjectStorageObjectURLRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("content_type" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyContentType obj : "expires_in" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyExpiresIn obj : "method" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyMethod obj : "name" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("content_type" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyContentType obj) GHC.Base.<> (("expires_in" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyExpiresIn obj) GHC.Base.<> (("method" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyMethod obj) GHC.Base.<> ("name" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLRequestBodyName obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateObjectStorageObjectURLRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateObjectStorageObjectURLRequestBody" (\obj -> (((GHC.Base.pure CreateObjectStorageObjectURLRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "content_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expires_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))
-- | Create a new 'CreateObjectStorageObjectURLRequestBody' with all required fields.
mkCreateObjectStorageObjectURLRequestBody :: Data.Text.Internal.Text -- ^ 'createObjectStorageObjectURLRequestBodyMethod'
  -> Data.Text.Internal.Text -- ^ 'createObjectStorageObjectURLRequestBodyName'
  -> CreateObjectStorageObjectURLRequestBody
mkCreateObjectStorageObjectURLRequestBody createObjectStorageObjectURLRequestBodyMethod createObjectStorageObjectURLRequestBodyName = CreateObjectStorageObjectURLRequestBody{createObjectStorageObjectURLRequestBodyContentType = GHC.Maybe.Nothing,
                                                                                                                                                                              createObjectStorageObjectURLRequestBodyExpiresIn = GHC.Maybe.Nothing,
                                                                                                                                                                              createObjectStorageObjectURLRequestBodyMethod = createObjectStorageObjectURLRequestBodyMethod,
                                                                                                                                                                              createObjectStorageObjectURLRequestBodyName = createObjectStorageObjectURLRequestBodyName}
-- | Represents a response of the operation 'createObjectStorageObjectURL'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateObjectStorageObjectURLResponseError' is used.
data CreateObjectStorageObjectURLResponse =
   CreateObjectStorageObjectURLResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateObjectStorageObjectURLResponse200 CreateObjectStorageObjectURLResponseBody200 -- ^ The URL with which to access your object.
  | CreateObjectStorageObjectURLResponseDefault CreateObjectStorageObjectURLResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-url.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateObjectStorageObjectURLResponseBody200 = CreateObjectStorageObjectURLResponseBody200 {
  -- | url: The signed URL to perform the request at.
  createObjectStorageObjectURLResponseBody200Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateObjectStorageObjectURLResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("url" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLResponseBody200Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("url" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLResponseBody200Url obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateObjectStorageObjectURLResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateObjectStorageObjectURLResponseBody200" (\obj -> GHC.Base.pure CreateObjectStorageObjectURLResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'CreateObjectStorageObjectURLResponseBody200' with all required fields.
mkCreateObjectStorageObjectURLResponseBody200 :: CreateObjectStorageObjectURLResponseBody200
mkCreateObjectStorageObjectURLResponseBody200 = CreateObjectStorageObjectURLResponseBody200{createObjectStorageObjectURLResponseBody200Url = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateObjectStorageObjectURLResponseBodyDefault = CreateObjectStorageObjectURLResponseBodyDefault {
  -- | errors
  createObjectStorageObjectURLResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateObjectStorageObjectURLResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createObjectStorageObjectURLResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateObjectStorageObjectURLResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateObjectStorageObjectURLResponseBodyDefault" (\obj -> GHC.Base.pure CreateObjectStorageObjectURLResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreateObjectStorageObjectURLResponseBodyDefault' with all required fields.
mkCreateObjectStorageObjectURLResponseBodyDefault :: CreateObjectStorageObjectURLResponseBodyDefault
mkCreateObjectStorageObjectURLResponseBodyDefault = CreateObjectStorageObjectURLResponseBodyDefault{createObjectStorageObjectURLResponseBodyDefaultErrors = GHC.Maybe.Nothing}
