-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeTypes
module Linode.Operations.GetLinodeTypes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/types
-- 
-- Returns collection of Linode Types, including pricing and specifications for each Type. These are used when [creating](\/docs\/api\/linode-instances\/\#linode-create) or [resizing](\/docs\/api\/linode-instances\/\#linode-resize) Linodes.
getLinodeTypes :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeTypesResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeTypes = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeTypesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTypesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                        GetLinodeTypesResponseBody200)
                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTypesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                          GetLinodeTypesResponseBodyDefault)
                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/types") GHC.Base.mempty)
-- | Represents a response of the operation 'getLinodeTypes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeTypesResponseError' is used.
data GetLinodeTypesResponse =
   GetLinodeTypesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeTypesResponse200 GetLinodeTypesResponseBody200 -- ^ A collection of Linode Types.
  | GetLinodeTypesResponseDefault GetLinodeTypesResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/linode\/types.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeTypesResponseBody200 = GetLinodeTypesResponseBody200 {
  -- | data
  getLinodeTypesResponseBody200Data :: (GHC.Maybe.Maybe ([LinodeType]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLinodeTypesResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLinodeTypesResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLinodeTypesResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeTypesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTypesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTypesResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeTypesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLinodeTypesResponseBody200' with all required fields.
mkGetLinodeTypesResponseBody200 :: GetLinodeTypesResponseBody200
mkGetLinodeTypesResponseBody200 = GetLinodeTypesResponseBody200{getLinodeTypesResponseBody200Data = GHC.Maybe.Nothing,
                                                                getLinodeTypesResponseBody200Page = GHC.Maybe.Nothing,
                                                                getLinodeTypesResponseBody200Pages = GHC.Maybe.Nothing,
                                                                getLinodeTypesResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeTypesResponseBodyDefault = GetLinodeTypesResponseBodyDefault {
  -- | errors
  getLinodeTypesResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeTypesResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLinodeTypesResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTypesResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTypesResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeTypesResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLinodeTypesResponseBodyDefault' with all required fields.
mkGetLinodeTypesResponseBodyDefault :: GetLinodeTypesResponseBodyDefault
mkGetLinodeTypesResponseBodyDefault = GetLinodeTypesResponseBodyDefault{getLinodeTypesResponseBodyDefaultErrors = GHC.Maybe.Nothing}
