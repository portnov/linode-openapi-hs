-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createLinodeInstance
module Linode.Operations.CreateLinodeInstance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > POST /linode/instances
-- 
-- Creates a Linode Instance on your Account. In order for this
-- request to complete successfully, your User must have the \`add_linodes\` grant. Creating a
-- new Linode will incur a charge on your Account.
-- 
-- Linodes can be created using one of the available Types. See
-- Types List ([GET \/linode\/types](\/docs\/api\/linode-types\/\#types-list)) to get more
-- information about each Type\'s specs and cost.
-- 
-- Linodes can be created in any one of our available Regions, which are accessible from the
-- Regions List ([GET \/regions](\/docs\/api\/regions\/\#regions-list)) endpoint.
-- 
-- In an effort to fight spam, Linode restricts outbound connections on ports 25, 465, and 587
-- on all Linodes for new accounts created after November 5th, 2019. For more information,
-- see [Sending Email on Linode](\/docs\/email\/running-a-mail-server\/\#sending-email-on-linode).
-- 
-- Linodes can be created in a number of ways:
-- 
-- * Using a Linode Public Image distribution or a Private Image you created based on another Linode.
--   * Access the Images List ([GET \/images](\/docs\/api\/images\/\#images-list)) endpoint with authentication to view
--     all available Images.
--   * The Linode will be \`running\` after it completes \`provisioning\`.
--   * A default config with two Disks, one being a 512 swap disk, is created.
--     * \`swap_size\` can be used to customize the swap disk size.
--   * Requires a \`root_pass\` be supplied to use for the root User\'s Account.
--   * It is recommended to supply SSH keys for the root User using the \`authorized_keys\` field.
--   * You may also supply a list of usernames via the \`authorized_users\` field.
--     * These users must have an SSH Key associated with your Profile first. See SSH Key Add ([POST \/profile\/sshkeys](\/docs\/api\/profile\/\#ssh-key-add)) for more information.
-- 
-- * Using a StackScript.
--   * See StackScripts List ([GET \/linode\/stackscripts](\/docs\/api\/stackscripts\/\#stackscripts-list)) for
--     a list of available StackScripts.
--   * The Linode will be \`running\` after it completes \`provisioning\`.
--   * Requires a compatible Image to be supplied.
--     * See StackScript View ([GET \/linode\/stackscript\/{stackscriptId}](\/docs\/api\/stackscripts\/\#stackscript-view)) for compatible Images.
--   * Requires a \`root_pass\` be supplied to use for the root User\'s Account.
--   * It is recommended to supply SSH keys for the root User using the \`authorized_keys\` field.
--   * You may also supply a list of usernames via the \`authorized_users\` field.
--     * These users must have an SSH Key associated with your Profile first. See SSH Key Add ([POST \/profile\/sshkeys](\/docs\/api\/profile\/\#ssh-key-add)) for more information.
-- 
-- * Using one of your other Linode\'s backups.
--   * You must create a Linode large enough to accommodate the Backup\'s size.
--   * The Disks and Config will match that of the Linode that was backed up.
--   * The \`root_pass\` will match that of the Linode that was backed up.
-- 
-- * Attached to a private VLAN.
--   * Review the \`interfaces\` property of the [Request Body Schema](\/docs\/api\/linode-instances\/\#linode-create__request-body-schema) for details.
--   * For more information, see our guide on [Getting Started with VLANs](\/docs\/guides\/getting-started-with-vlans\/).
-- 
-- * Create an empty Linode.
--   * The Linode will remain \`offline\` and must be manually started.
--     * See Linode Boot ([POST \/linode\/instances\/{linodeId}\/boot](\/docs\/api\/linode-instances\/\#linode-boot)).
--   * Disks and Configs must be created manually.
--   * This is only recommended for advanced use cases.
-- 
-- **Important**: You must be an unrestricted User in order to add or modify
-- tags on Linodes.
createLinodeInstance :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> CreateLinodeInstanceRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateLinodeInstanceResponse)) -- ^ Monad containing the result of the operation
createLinodeInstance config
                     body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              Linode)
                                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                CreateLinodeInstanceResponseBodyDefault)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances
-- 
-- The same as 'createLinodeInstance' but returns the raw 'Data.ByteString.Char8.ByteString'
createLinodeInstanceRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                         Linode.Common.SecurityScheme s) =>
                           Linode.Common.Configuration s ->
                           CreateLinodeInstanceRequestBody ->
                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createLinodeInstanceRaw config
                        body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances
-- 
-- Monadic version of 'createLinodeInstance' (use with 'Linode.Common.runWithConfiguration')
createLinodeInstanceM :: forall m s . (Linode.Common.MonadHTTP m,
                                       Linode.Common.SecurityScheme s) =>
                         CreateLinodeInstanceRequestBody ->
                         Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response CreateLinodeInstanceResponse))
createLinodeInstanceM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               Linode)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                 CreateLinodeInstanceResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances
-- 
-- Monadic version of 'createLinodeInstanceRaw' (use with 'Linode.Common.runWithConfiguration')
createLinodeInstanceRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                          Linode.Common.SecurityScheme s) =>
                            CreateLinodeInstanceRequestBody ->
                            Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                               m
                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createLinodeInstanceRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createLinodeInstanceRequestBody
-- 
-- 
data CreateLinodeInstanceRequestBody = CreateLinodeInstanceRequestBody {
  -- | authorized_keys
  createLinodeInstanceRequestBodyAuthorized_keys :: (GHC.Base.Maybe DiskRequest_properties_authorized_keys)
  -- | authorized_users
  , createLinodeInstanceRequestBodyAuthorized_users :: (GHC.Base.Maybe DiskRequest_properties_authorized_users)
  -- | backup_id: A Backup ID from another Linode\'s available backups. Your User must have
  -- \`read_write\` access to that Linode, the Backup must have a \`status\` of
  -- \`successful\`, and the Linode must be deployed to the same \`region\` as the Backup.
  -- See [GET \/linode\/instances\/{linodeId}\/backups](\/docs\/api\/linode-instances\/\#backups-list)
  -- for a Linode\'s available backups.
  -- 
  -- This field and the \`image\` field are mutually exclusive.
  , createLinodeInstanceRequestBodyBackup_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | backups_enabled: If this field is set to \`true\`, the created Linode will automatically be
  -- enrolled in the Linode Backup service. This will incur an additional charge.
  -- The cost for the Backup service is dependent on the Type of Linode deployed.
  -- 
  -- This option is always treated as \`true\` if the account-wide \`backups_enabled\`
  -- setting is \`true\`.  See [account settings](\/docs\/api\/account\/\#account-settings-view)
  -- for more information.
  -- 
  -- Backup pricing is included in the response from [\/linodes\/types](\/docs\/api\/linode-types\/\#types-list)
  , createLinodeInstanceRequestBodyBackups_enabled :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | booted: This field defaults to \`true\` if the Linode is created with an Image or from a Backup.
  -- If it is deployed from an Image or a Backup and you wish it to remain \`offline\` after deployment, set this to \`false\`.
  , createLinodeInstanceRequestBodyBooted :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | group
  , createLinodeInstanceRequestBodyGroup :: (GHC.Base.Maybe Linode_properties_group)
  -- | image
  , createLinodeInstanceRequestBodyImage :: (GHC.Base.Maybe DiskRequest_properties_image)
  -- | interfaces: An array of Network Interfaces to add to this Linode\'s Configuration Profile.
  -- 
  -- Up to three interface objects can be entered in this array. The position in the array determines the interface to which the settings apply:
  -- 
  -- - First\/0:  eth0
  -- - Second\/1: eth1
  -- - Third\/2:  eth2
  -- 
  -- When updating a Linode\'s interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.
  -- 
  -- If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.
  -- 
  -- **Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.
  -- 
  -- **Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([\/regions](\/docs\/api\/regions\/)) endpoint to view the capabilities of data center regions.
  -- If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
  -- the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility,
  -- you will be prompted to select a different data center or contact support.
  -- 
  -- **Note:** See our guide on [Getting Started with VLANs](\/docs\/guides\/getting-started-with-vlans\/) to view additional [limitations](\/docs\/guides\/getting-started-with-vlans\/\#limitations).
  , createLinodeInstanceRequestBodyInterfaces :: (GHC.Base.Maybe LinodeConfigInterfaces)
  -- | label
  , createLinodeInstanceRequestBodyLabel :: (GHC.Base.Maybe Linode_properties_label)
  -- | private_ip: If true, the created Linode will have private networking enabled and assigned a private IPv4 address.
  , createLinodeInstanceRequestBodyPrivate_ip :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | region: The [Region](\/docs\/api\/regions\/\#regions-list) where the Linode will be located.
  , createLinodeInstanceRequestBodyRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | root_pass
  , createLinodeInstanceRequestBodyRoot_pass :: (GHC.Base.Maybe DiskRequest_properties_root_pass)
  -- | stackscript_data
  , createLinodeInstanceRequestBodyStackscript_data :: (GHC.Base.Maybe DiskRequest_properties_stackscript_data)
  -- | stackscript_id
  , createLinodeInstanceRequestBodyStackscript_id :: (GHC.Base.Maybe DiskRequest_properties_stackscript_id)
  -- | swap_size: When deploying from an Image, this field is optional, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
  , createLinodeInstanceRequestBodySwap_size :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | tags
  , createLinodeInstanceRequestBodyTags :: (GHC.Base.Maybe Linode_properties_tags)
  -- | type: The [Linode Type](\/docs\/api\/linode-types\/\#types-list) of the Linode you are creating.
  , createLinodeInstanceRequestBodyType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateLinodeInstanceRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authorized_keys" (createLinodeInstanceRequestBodyAuthorized_keys obj) : (Data.Aeson..=) "authorized_users" (createLinodeInstanceRequestBodyAuthorized_users obj) : (Data.Aeson..=) "backup_id" (createLinodeInstanceRequestBodyBackup_id obj) : (Data.Aeson..=) "backups_enabled" (createLinodeInstanceRequestBodyBackups_enabled obj) : (Data.Aeson..=) "booted" (createLinodeInstanceRequestBodyBooted obj) : (Data.Aeson..=) "group" (createLinodeInstanceRequestBodyGroup obj) : (Data.Aeson..=) "image" (createLinodeInstanceRequestBodyImage obj) : (Data.Aeson..=) "interfaces" (createLinodeInstanceRequestBodyInterfaces obj) : (Data.Aeson..=) "label" (createLinodeInstanceRequestBodyLabel obj) : (Data.Aeson..=) "private_ip" (createLinodeInstanceRequestBodyPrivate_ip obj) : (Data.Aeson..=) "region" (createLinodeInstanceRequestBodyRegion obj) : (Data.Aeson..=) "root_pass" (createLinodeInstanceRequestBodyRoot_pass obj) : (Data.Aeson..=) "stackscript_data" (createLinodeInstanceRequestBodyStackscript_data obj) : (Data.Aeson..=) "stackscript_id" (createLinodeInstanceRequestBodyStackscript_id obj) : (Data.Aeson..=) "swap_size" (createLinodeInstanceRequestBodySwap_size obj) : (Data.Aeson..=) "tags" (createLinodeInstanceRequestBodyTags obj) : (Data.Aeson..=) "type" (createLinodeInstanceRequestBodyType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authorized_keys" (createLinodeInstanceRequestBodyAuthorized_keys obj) GHC.Base.<> ((Data.Aeson..=) "authorized_users" (createLinodeInstanceRequestBodyAuthorized_users obj) GHC.Base.<> ((Data.Aeson..=) "backup_id" (createLinodeInstanceRequestBodyBackup_id obj) GHC.Base.<> ((Data.Aeson..=) "backups_enabled" (createLinodeInstanceRequestBodyBackups_enabled obj) GHC.Base.<> ((Data.Aeson..=) "booted" (createLinodeInstanceRequestBodyBooted obj) GHC.Base.<> ((Data.Aeson..=) "group" (createLinodeInstanceRequestBodyGroup obj) GHC.Base.<> ((Data.Aeson..=) "image" (createLinodeInstanceRequestBodyImage obj) GHC.Base.<> ((Data.Aeson..=) "interfaces" (createLinodeInstanceRequestBodyInterfaces obj) GHC.Base.<> ((Data.Aeson..=) "label" (createLinodeInstanceRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "private_ip" (createLinodeInstanceRequestBodyPrivate_ip obj) GHC.Base.<> ((Data.Aeson..=) "region" (createLinodeInstanceRequestBodyRegion obj) GHC.Base.<> ((Data.Aeson..=) "root_pass" (createLinodeInstanceRequestBodyRoot_pass obj) GHC.Base.<> ((Data.Aeson..=) "stackscript_data" (createLinodeInstanceRequestBodyStackscript_data obj) GHC.Base.<> ((Data.Aeson..=) "stackscript_id" (createLinodeInstanceRequestBodyStackscript_id obj) GHC.Base.<> ((Data.Aeson..=) "swap_size" (createLinodeInstanceRequestBodySwap_size obj) GHC.Base.<> ((Data.Aeson..=) "tags" (createLinodeInstanceRequestBodyTags obj) GHC.Base.<> (Data.Aeson..=) "type" (createLinodeInstanceRequestBodyType obj)))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateLinodeInstanceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateLinodeInstanceRequestBody" (\obj -> ((((((((((((((((GHC.Base.pure CreateLinodeInstanceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "backup_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "backups_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "booted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interfaces")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_pass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "swap_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Represents a response of the operation 'createLinodeInstance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateLinodeInstanceResponseError' is used.
data CreateLinodeInstanceResponse =                                              
   CreateLinodeInstanceResponseError GHC.Base.String                             -- ^ Means either no matching case available or a parse error
  | CreateLinodeInstanceResponse200 Linode                                       -- ^ A new Linode is being created. 
  | CreateLinodeInstanceResponseDefault CreateLinodeInstanceResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateLinodeInstanceResponseBodyDefault
-- 
-- 
data CreateLinodeInstanceResponseBodyDefault = CreateLinodeInstanceResponseBodyDefault {
  -- | errors
  createLinodeInstanceResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateLinodeInstanceResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createLinodeInstanceResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createLinodeInstanceResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateLinodeInstanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateLinodeInstanceResponseBodyDefault" (\obj -> GHC.Base.pure CreateLinodeInstanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
