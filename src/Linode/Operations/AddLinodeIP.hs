-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation addLinodeIP
module Linode.Operations.AddLinodeIP where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/ips
-- 
-- Allocates a public or private IPv4 address to a Linode. Public IP Addresses, after the one included with each Linode, incur an additional monthly charge. If you need an additional public IP Address you must request one - please [open a support ticket](\/docs\/api\/support\/\#support-ticket-open). You may not add more than one private IPv4 address to a single Linode.
addLinodeIP :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> AddLinodeIPRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response AddLinodeIPResponse)) -- ^ Monad containing the result of the operation
addLinodeIP config
            body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either AddLinodeIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   IPAddress)
                                                                                                                                                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                     AddLinodeIPResponseBodyDefault)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/ips
-- 
-- The same as 'addLinodeIP' but returns the raw 'Data.ByteString.Char8.ByteString'
addLinodeIPRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                Linode.Common.SecurityScheme s) =>
                  Linode.Common.Configuration s ->
                  AddLinodeIPRequestBody ->
                  m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
addLinodeIPRaw config
               body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/ips
-- 
-- Monadic version of 'addLinodeIP' (use with 'Linode.Common.runWithConfiguration')
addLinodeIPM :: forall m s . (Linode.Common.MonadHTTP m,
                              Linode.Common.SecurityScheme s) =>
                AddLinodeIPRequestBody ->
                Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                   m
                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                       (Network.HTTP.Client.Types.Response AddLinodeIPResponse))
addLinodeIPM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either AddLinodeIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    IPAddress)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                      AddLinodeIPResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/ips
-- 
-- Monadic version of 'addLinodeIPRaw' (use with 'Linode.Common.runWithConfiguration')
addLinodeIPRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   AddLinodeIPRequestBody ->
                   Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
addLinodeIPRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema addLinodeIPRequestBody
-- 
-- 
data AddLinodeIPRequestBody = AddLinodeIPRequestBody {
  -- | public: Whether to create a public or private IPv4 address.
  addLinodeIPRequestBodyPublic :: GHC.Types.Bool
  -- | type: The type of address you are allocating. Only IPv4 addresses may be allocated through this endpoint.
  , addLinodeIPRequestBodyType :: AddLinodeIPRequestBodyType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AddLinodeIPRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "public" (addLinodeIPRequestBodyPublic obj) : (Data.Aeson..=) "type" (addLinodeIPRequestBodyType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "public" (addLinodeIPRequestBodyPublic obj) GHC.Base.<> (Data.Aeson..=) "type" (addLinodeIPRequestBodyType obj))
instance Data.Aeson.Types.FromJSON.FromJSON AddLinodeIPRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddLinodeIPRequestBody" (\obj -> (GHC.Base.pure AddLinodeIPRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema addLinodeIPRequestBodyType
-- 
-- The type of address you are allocating. Only IPv4 addresses may be allocated through this endpoint.
data AddLinodeIPRequestBodyType
    = AddLinodeIPRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | AddLinodeIPRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | AddLinodeIPRequestBodyTypeEnumString_ipv4
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AddLinodeIPRequestBodyType
    where toJSON (AddLinodeIPRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AddLinodeIPRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AddLinodeIPRequestBodyTypeEnumString_ipv4) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4"
instance Data.Aeson.FromJSON AddLinodeIPRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4")
                                          then AddLinodeIPRequestBodyTypeEnumString_ipv4
                                          else AddLinodeIPRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'addLinodeIP'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'AddLinodeIPResponseError' is used.
data AddLinodeIPResponse =                                     
   AddLinodeIPResponseError GHC.Base.String                    -- ^ Means either no matching case available or a parse error
  | AddLinodeIPResponse200 IPAddress                           -- ^ IP address was successfully allocated.
  | AddLinodeIPResponseDefault AddLinodeIPResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema AddLinodeIPResponseBodyDefault
-- 
-- 
data AddLinodeIPResponseBodyDefault = AddLinodeIPResponseBodyDefault {
  -- | errors
  addLinodeIPResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AddLinodeIPResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (addLinodeIPResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (addLinodeIPResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON AddLinodeIPResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddLinodeIPResponseBodyDefault" (\obj -> GHC.Base.pure AddLinodeIPResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
