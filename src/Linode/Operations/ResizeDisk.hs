-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation resizeDisk
module Linode.Operations.ResizeDisk where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/disks/{diskId}/resize
-- 
-- Resizes a Disk you have permission to \`read_write\`.
-- 
-- The Disk must not be in use. If the Disk is in use, the request will
-- succeed but the resize will ultimately fail. For a request to succeed,
-- the Linode must be shut down prior to resizing the Disk, or the Disk
-- must not be assigned to the Linode\'s active Configuration Profile.
-- 
-- If you are resizing the Disk to a smaller size, it cannot be made smaller
-- than what is required by the total size of the files current on the Disk.
resizeDisk :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> ResizeDiskRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response ResizeDiskResponse)) -- ^ Monad containing the result of the operation
resizeDisk config
           body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ResizeDiskResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ResizeDiskResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                ResizeDiskResponseBody200)
                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ResizeDiskResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                  ResizeDiskResponseBodyDefault)
                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks/{diskId}/resize") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/disks/{diskId}/resize
-- 
-- The same as 'resizeDisk' but returns the raw 'Data.ByteString.Char8.ByteString'
resizeDiskRaw :: forall m s . (Linode.Common.MonadHTTP m,
                               Linode.Common.SecurityScheme s) =>
                 Linode.Common.Configuration s ->
                 ResizeDiskRequestBody ->
                 m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
resizeDiskRaw config
              body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks/{diskId}/resize") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/disks/{diskId}/resize
-- 
-- Monadic version of 'resizeDisk' (use with 'Linode.Common.runWithConfiguration')
resizeDiskM :: forall m s . (Linode.Common.MonadHTTP m,
                             Linode.Common.SecurityScheme s) =>
               ResizeDiskRequestBody ->
               Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                  m
                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                      (Network.HTTP.Client.Types.Response ResizeDiskResponse))
resizeDiskM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either ResizeDiskResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ResizeDiskResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 ResizeDiskResponseBody200)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ResizeDiskResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                   ResizeDiskResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks/{diskId}/resize") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/disks/{diskId}/resize
-- 
-- Monadic version of 'resizeDiskRaw' (use with 'Linode.Common.runWithConfiguration')
resizeDiskRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                Linode.Common.SecurityScheme s) =>
                  ResizeDiskRequestBody ->
                  Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
resizeDiskRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks/{diskId}/resize") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema resizeDiskRequestBody
-- 
-- 
data ResizeDiskRequestBody = ResizeDiskRequestBody {
  -- | size: The desired size, in MB, of the disk.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  resizeDiskRequestBodySize :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ResizeDiskRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "size" (resizeDiskRequestBodySize obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "size" (resizeDiskRequestBodySize obj))
instance Data.Aeson.Types.FromJSON.FromJSON ResizeDiskRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResizeDiskRequestBody" (\obj -> GHC.Base.pure ResizeDiskRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size"))
-- | Represents a response of the operation 'resizeDisk'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ResizeDiskResponseError' is used.
data ResizeDiskResponse =                                    
   ResizeDiskResponseError GHC.Base.String                   -- ^ Means either no matching case available or a parse error
  | ResizeDiskResponse200 ResizeDiskResponseBody200          -- ^ Resize started.
  | ResizeDiskResponseDefault ResizeDiskResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema ResizeDiskResponseBody200
-- 
-- 
data ResizeDiskResponseBody200 = ResizeDiskResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ResizeDiskResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ResizeDiskResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResizeDiskResponseBody200" (\obj -> GHC.Base.pure ResizeDiskResponseBody200)
-- | Defines the data type for the schema ResizeDiskResponseBodyDefault
-- 
-- 
data ResizeDiskResponseBodyDefault = ResizeDiskResponseBodyDefault {
  -- | errors
  resizeDiskResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ResizeDiskResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (resizeDiskResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (resizeDiskResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON ResizeDiskResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResizeDiskResponseBodyDefault" (\obj -> GHC.Base.pure ResizeDiskResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
