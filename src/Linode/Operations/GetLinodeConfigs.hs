-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeConfigs
module Linode.Operations.GetLinodeConfigs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/configs
-- 
-- Lists Configuration profiles associated with a Linode.
getLinodeConfigs :: forall m . Linode.Common.MonadHTTP m => GetLinodeConfigsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeConfigsResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeConfigs parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeConfigsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeConfigsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetLinodeConfigsResponseBody200)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeConfigsParametersPathLinodeId parameters))) GHC.Base.++ "/configs"))) [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinodeConfigsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
inode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinodeConfigsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/configs.GET.parameters@ in the specification.
-- 
-- 
data GetLinodeConfigsParameters = GetLinodeConfigsParameters {
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- ID of the Linode to look up Configuration profiles for.
  getLinodeConfigsParametersPathLinodeId :: GHC.Types.Int
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  , getLinodeConfigsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getLinodeConfigsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeConfigsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeConfigsParametersPathLinodeId obj : "queryPage" Data.Aeson.Types.ToJSON..= getLinodeConfigsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getLinodeConfigsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeConfigsParametersPathLinodeId obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= getLinodeConfigsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getLinodeConfigsParametersQueryPageSize obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeConfigsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeConfigsParameters" (\obj -> ((GHC.Base.pure GetLinodeConfigsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetLinodeConfigsParameters' with all required fields.
mkGetLinodeConfigsParameters :: GHC.Types.Int -- ^ 'getLinodeConfigsParametersPathLinodeId'
  -> GetLinodeConfigsParameters
mkGetLinodeConfigsParameters getLinodeConfigsParametersPathLinodeId = GetLinodeConfigsParameters{getLinodeConfigsParametersPathLinodeId = getLinodeConfigsParametersPathLinodeId,
                                                                                                 getLinodeConfigsParametersQueryPage = GHC.Maybe.Nothing,
                                                                                                 getLinodeConfigsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getLinodeConfigs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeConfigsResponseError' is used.
data GetLinodeConfigsResponse =
   GetLinodeConfigsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeConfigsResponse200 GetLinodeConfigsResponseBody200 -- ^ Returns an array of Configuration profiles associated with this Linode. 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/configs.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeConfigsResponseBody200 = GetLinodeConfigsResponseBody200 {
  -- | data
  getLinodeConfigsResponseBody200Data :: (GHC.Maybe.Maybe ([LinodeConfig]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLinodeConfigsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLinodeConfigsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLinodeConfigsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeConfigsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLinodeConfigsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeConfigsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeConfigsResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeConfigsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLinodeConfigsResponseBody200' with all required fields.
mkGetLinodeConfigsResponseBody200 :: GetLinodeConfigsResponseBody200
mkGetLinodeConfigsResponseBody200 = GetLinodeConfigsResponseBody200{getLinodeConfigsResponseBody200Data = GHC.Maybe.Nothing,
                                                                    getLinodeConfigsResponseBody200Page = GHC.Maybe.Nothing,
                                                                    getLinodeConfigsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                    getLinodeConfigsResponseBody200Results = GHC.Maybe.Nothing}
