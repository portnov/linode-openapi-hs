-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createLKECluster
module Linode.Operations.CreateLKECluster where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > POST /lke/clusters
-- 
-- Creates a Kubernetes cluster. The Kubernetes cluster will be created
-- asynchronously. You can use the events system to determine when the
-- Kubernetes cluster is ready to use. Please note that it often takes 2-5 minutes before the
-- [Kubernetes API server endpoint](\/docs\/api\/linode-kubernetes-engine-lke\/\#kubernetes-api-endpoints-list) and
-- the [Kubeconfig file](\/docs\/api\/linode-kubernetes-engine-lke\/\#kubeconfig-view) for the new cluster
-- are ready.
createLKECluster :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe CreateLKEClusterRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateLKEClusterResponse)) -- ^ Monad containing the result of the operation
createLKECluster config
                 body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateLKEClusterResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateLKEClusterResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  LKECluster)
                                                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateLKEClusterResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    CreateLKEClusterResponseBodyDefault)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /lke/clusters
-- 
-- The same as 'createLKECluster' but returns the raw 'Data.ByteString.Char8.ByteString'
createLKEClusterRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                     Linode.Common.SecurityScheme s) =>
                       Linode.Common.Configuration s ->
                       GHC.Base.Maybe CreateLKEClusterRequestBody ->
                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createLKEClusterRaw config
                    body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /lke/clusters
-- 
-- Monadic version of 'createLKECluster' (use with 'Linode.Common.runWithConfiguration')
createLKEClusterM :: forall m s . (Linode.Common.MonadHTTP m,
                                   Linode.Common.SecurityScheme s) =>
                     GHC.Base.Maybe CreateLKEClusterRequestBody ->
                     Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                        m
                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                            (Network.HTTP.Client.Types.Response CreateLKEClusterResponse))
createLKEClusterM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateLKEClusterResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateLKEClusterResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   LKECluster)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateLKEClusterResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                     CreateLKEClusterResponseBodyDefault)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /lke/clusters
-- 
-- Monadic version of 'createLKEClusterRaw' (use with 'Linode.Common.runWithConfiguration')
createLKEClusterRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                      Linode.Common.SecurityScheme s) =>
                        GHC.Base.Maybe CreateLKEClusterRequestBody ->
                        Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                           m
                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createLKEClusterRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createLKEClusterRequestBody
-- 
-- 
data CreateLKEClusterRequestBody = CreateLKEClusterRequestBody {
  -- | control_plane: Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Availability for LKE is an **irreversible** change.
  createLKEClusterRequestBodyControl_plane :: (GHC.Base.Maybe CreateLKEClusterRequestBodyControl_plane)
  -- | k8s_version
  , createLKEClusterRequestBodyK8s_version :: LKECluster_properties_k8s_version
  -- | label
  , createLKEClusterRequestBodyLabel :: LKECluster_properties_label
  -- | node_pools
  , createLKEClusterRequestBodyNode_pools :: ([] LKENodePoolRequestBody)
  -- | region
  , createLKEClusterRequestBodyRegion :: LKECluster_properties_region
  -- | tags
  , createLKEClusterRequestBodyTags :: (GHC.Base.Maybe LKECluster_properties_tags)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateLKEClusterRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "control_plane" (createLKEClusterRequestBodyControl_plane obj) : (Data.Aeson..=) "k8s_version" (createLKEClusterRequestBodyK8s_version obj) : (Data.Aeson..=) "label" (createLKEClusterRequestBodyLabel obj) : (Data.Aeson..=) "node_pools" (createLKEClusterRequestBodyNode_pools obj) : (Data.Aeson..=) "region" (createLKEClusterRequestBodyRegion obj) : (Data.Aeson..=) "tags" (createLKEClusterRequestBodyTags obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "control_plane" (createLKEClusterRequestBodyControl_plane obj) GHC.Base.<> ((Data.Aeson..=) "k8s_version" (createLKEClusterRequestBodyK8s_version obj) GHC.Base.<> ((Data.Aeson..=) "label" (createLKEClusterRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "node_pools" (createLKEClusterRequestBodyNode_pools obj) GHC.Base.<> ((Data.Aeson..=) "region" (createLKEClusterRequestBodyRegion obj) GHC.Base.<> (Data.Aeson..=) "tags" (createLKEClusterRequestBodyTags obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateLKEClusterRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateLKEClusterRequestBody" (\obj -> (((((GHC.Base.pure CreateLKEClusterRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "control_plane")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "k8s_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "node_pools")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags"))
-- | Defines the data type for the schema createLKEClusterRequestBodyControl_plane
-- 
-- Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Availability for LKE is an **irreversible** change.
data CreateLKEClusterRequestBodyControl_plane = CreateLKEClusterRequestBodyControl_plane {
  -- | high_availability: Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to \`false\`.
  createLKEClusterRequestBodyControl_planeHigh_availability :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateLKEClusterRequestBodyControl_plane
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "high_availability" (createLKEClusterRequestBodyControl_planeHigh_availability obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "high_availability" (createLKEClusterRequestBodyControl_planeHigh_availability obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateLKEClusterRequestBodyControl_plane
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateLKEClusterRequestBodyControl_plane" (\obj -> GHC.Base.pure CreateLKEClusterRequestBodyControl_plane GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "high_availability"))
-- | Represents a response of the operation 'createLKECluster'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateLKEClusterResponseError' is used.
data CreateLKEClusterResponse =                                          
   CreateLKEClusterResponseError GHC.Base.String                         -- ^ Means either no matching case available or a parse error
  | CreateLKEClusterResponse200 LKECluster                               -- ^ Kubernetes cluster creation has started.
  | CreateLKEClusterResponseDefault CreateLKEClusterResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateLKEClusterResponseBodyDefault
-- 
-- 
data CreateLKEClusterResponseBodyDefault = CreateLKEClusterResponseBodyDefault {
  -- | errors
  createLKEClusterResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateLKEClusterResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createLKEClusterResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createLKEClusterResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateLKEClusterResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateLKEClusterResponseBodyDefault" (\obj -> GHC.Base.pure CreateLKEClusterResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
