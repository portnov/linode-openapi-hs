-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation updateLinodeIP
module Linode.Operations.UpdateLinodeIP where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > PUT /linode/instances/{linodeId}/ips/{address}
-- 
-- Updates a particular IP Address associated with this Linode. Only allows setting\/resetting reverse DNS.
updateLinodeIP :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe UpdateLinodeIPRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response UpdateLinodeIPResponse)) -- ^ Monad containing the result of the operation
updateLinodeIP config
               body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateLinodeIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateLinodeIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            IPAddress)
                                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateLinodeIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              UpdateLinodeIPResponseBodyDefault)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/linode/instances/{linodeId}/ips/{address}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /linode/instances/{linodeId}/ips/{address}
-- 
-- The same as 'updateLinodeIP' but returns the raw 'Data.ByteString.Char8.ByteString'
updateLinodeIPRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                   Linode.Common.SecurityScheme s) =>
                     Linode.Common.Configuration s ->
                     GHC.Base.Maybe UpdateLinodeIPRequestBody ->
                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
updateLinodeIPRaw config
                  body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/linode/instances/{linodeId}/ips/{address}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /linode/instances/{linodeId}/ips/{address}
-- 
-- Monadic version of 'updateLinodeIP' (use with 'Linode.Common.runWithConfiguration')
updateLinodeIPM :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   GHC.Base.Maybe UpdateLinodeIPRequestBody ->
                   Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response UpdateLinodeIPResponse))
updateLinodeIPM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either UpdateLinodeIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateLinodeIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             IPAddress)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateLinodeIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                               UpdateLinodeIPResponseBodyDefault)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/linode/instances/{linodeId}/ips/{address}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /linode/instances/{linodeId}/ips/{address}
-- 
-- Monadic version of 'updateLinodeIPRaw' (use with 'Linode.Common.runWithConfiguration')
updateLinodeIPRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      GHC.Base.Maybe UpdateLinodeIPRequestBody ->
                      Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
updateLinodeIPRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/linode/instances/{linodeId}/ips/{address}") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema updateLinodeIPRequestBody
-- 
-- 
data UpdateLinodeIPRequestBody = UpdateLinodeIPRequestBody {
  -- | address: The IP address.
  updateLinodeIPRequestBodyAddress :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | gateway: The default gateway for this address.
  , updateLinodeIPRequestBodyGateway :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | linode_id: The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [\/networking\/ipv4\/assign](\/docs\/api\/networking\/\#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
  , updateLinodeIPRequestBodyLinode_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | prefix: The number of bits set in the subnet mask.
  , updateLinodeIPRequestBodyPrefix :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | public: Whether this is a public or private IP address.
  , updateLinodeIPRequestBodyPublic :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | rdns: The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
  , updateLinodeIPRequestBodyRdns :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The Region this IP address resides in.
  , updateLinodeIPRequestBodyRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | subnet_mask: The mask that separates host bits from network bits for this address.
  , updateLinodeIPRequestBodySubnet_mask :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of address this is.
  , updateLinodeIPRequestBodyType :: (GHC.Base.Maybe UpdateLinodeIPRequestBodyType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateLinodeIPRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (updateLinodeIPRequestBodyAddress obj) : (Data.Aeson..=) "gateway" (updateLinodeIPRequestBodyGateway obj) : (Data.Aeson..=) "linode_id" (updateLinodeIPRequestBodyLinode_id obj) : (Data.Aeson..=) "prefix" (updateLinodeIPRequestBodyPrefix obj) : (Data.Aeson..=) "public" (updateLinodeIPRequestBodyPublic obj) : (Data.Aeson..=) "rdns" (updateLinodeIPRequestBodyRdns obj) : (Data.Aeson..=) "region" (updateLinodeIPRequestBodyRegion obj) : (Data.Aeson..=) "subnet_mask" (updateLinodeIPRequestBodySubnet_mask obj) : (Data.Aeson..=) "type" (updateLinodeIPRequestBodyType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (updateLinodeIPRequestBodyAddress obj) GHC.Base.<> ((Data.Aeson..=) "gateway" (updateLinodeIPRequestBodyGateway obj) GHC.Base.<> ((Data.Aeson..=) "linode_id" (updateLinodeIPRequestBodyLinode_id obj) GHC.Base.<> ((Data.Aeson..=) "prefix" (updateLinodeIPRequestBodyPrefix obj) GHC.Base.<> ((Data.Aeson..=) "public" (updateLinodeIPRequestBodyPublic obj) GHC.Base.<> ((Data.Aeson..=) "rdns" (updateLinodeIPRequestBodyRdns obj) GHC.Base.<> ((Data.Aeson..=) "region" (updateLinodeIPRequestBodyRegion obj) GHC.Base.<> ((Data.Aeson..=) "subnet_mask" (updateLinodeIPRequestBodySubnet_mask obj) GHC.Base.<> (Data.Aeson..=) "type" (updateLinodeIPRequestBodyType obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateLinodeIPRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateLinodeIPRequestBody" (\obj -> ((((((((GHC.Base.pure UpdateLinodeIPRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rdns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subnet_mask")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the enum schema updateLinodeIPRequestBodyType
-- 
-- The type of address this is.
data UpdateLinodeIPRequestBodyType
    = UpdateLinodeIPRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | UpdateLinodeIPRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | UpdateLinodeIPRequestBodyTypeEnumString_ipv4
    | UpdateLinodeIPRequestBodyTypeEnumString_ipv6
    | UpdateLinodeIPRequestBodyTypeEnumString_ipv6_pool
    | UpdateLinodeIPRequestBodyTypeEnumString_ipv6_range
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateLinodeIPRequestBodyType
    where toJSON (UpdateLinodeIPRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (UpdateLinodeIPRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (UpdateLinodeIPRequestBodyTypeEnumString_ipv4) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4"
          toJSON (UpdateLinodeIPRequestBodyTypeEnumString_ipv6) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6"
          toJSON (UpdateLinodeIPRequestBodyTypeEnumString_ipv6_pool) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6/pool"
          toJSON (UpdateLinodeIPRequestBodyTypeEnumString_ipv6_range) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6/range"
instance Data.Aeson.FromJSON UpdateLinodeIPRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4")
                                          then UpdateLinodeIPRequestBodyTypeEnumString_ipv4
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6")
                                                then UpdateLinodeIPRequestBodyTypeEnumString_ipv6
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6/pool")
                                                      then UpdateLinodeIPRequestBodyTypeEnumString_ipv6_pool
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6/range")
                                                            then UpdateLinodeIPRequestBodyTypeEnumString_ipv6_range
                                                            else UpdateLinodeIPRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'updateLinodeIP'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateLinodeIPResponseError' is used.
data UpdateLinodeIPResponse =                                        
   UpdateLinodeIPResponseError GHC.Base.String                       -- ^ Means either no matching case available or a parse error
  | UpdateLinodeIPResponse200 IPAddress                              -- ^ The updated IP address record.
  | UpdateLinodeIPResponseDefault UpdateLinodeIPResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema UpdateLinodeIPResponseBodyDefault
-- 
-- 
data UpdateLinodeIPResponseBodyDefault = UpdateLinodeIPResponseBodyDefault {
  -- | errors
  updateLinodeIPResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateLinodeIPResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (updateLinodeIPResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (updateLinodeIPResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateLinodeIPResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateLinodeIPResponseBodyDefault" (\obj -> GHC.Base.pure UpdateLinodeIPResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
