-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getObjectStorageBucketinCluster
module Linode.Operations.GetObjectStorageBucketinCluster where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /object-storage/buckets/{clusterId}
-- 
-- Returns a list of Buckets in this cluster belonging to this Account.
-- 
-- 
-- This endpoint is available for convenience. It is recommended that instead you
-- use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/bucketops\/\#get-bucket) directly.
getObjectStorageBucketinCluster :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetObjectStorageBucketinClusterResponse)) -- ^ Monad containing the result of the operation
getObjectStorageBucketinCluster config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetObjectStorageBucketinClusterResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageBucketinClusterResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetObjectStorageBucketinClusterResponseBody200)
                                                                                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageBucketinClusterResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetObjectStorageBucketinClusterResponseBodyDefault)
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/object-storage/buckets/{clusterId}") [])
-- | > GET /object-storage/buckets/{clusterId}
-- 
-- The same as 'getObjectStorageBucketinCluster' but returns the raw 'Data.ByteString.Char8.ByteString'
getObjectStorageBucketinClusterRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                                    Linode.Common.SecurityScheme s) =>
                                      Linode.Common.Configuration s ->
                                      m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getObjectStorageBucketinClusterRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/object-storage/buckets/{clusterId}") [])
-- | > GET /object-storage/buckets/{clusterId}
-- 
-- Monadic version of 'getObjectStorageBucketinCluster' (use with 'Linode.Common.runWithConfiguration')
getObjectStorageBucketinClusterM :: forall m s . (Linode.Common.MonadHTTP m,
                                                  Linode.Common.SecurityScheme s) =>
                                    Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                       m
                                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                           (Network.HTTP.Client.Types.Response GetObjectStorageBucketinClusterResponse))
getObjectStorageBucketinClusterM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetObjectStorageBucketinClusterResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageBucketinClusterResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetObjectStorageBucketinClusterResponseBody200)
                                                                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageBucketinClusterResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetObjectStorageBucketinClusterResponseBodyDefault)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/object-storage/buckets/{clusterId}") [])
-- | > GET /object-storage/buckets/{clusterId}
-- 
-- Monadic version of 'getObjectStorageBucketinClusterRaw' (use with 'Linode.Common.runWithConfiguration')
getObjectStorageBucketinClusterRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                                     Linode.Common.SecurityScheme s) =>
                                       Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                          m
                                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getObjectStorageBucketinClusterRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/object-storage/buckets/{clusterId}") [])
-- | Represents a response of the operation 'getObjectStorageBucketinCluster'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetObjectStorageBucketinClusterResponseError' is used.
data GetObjectStorageBucketinClusterResponse =                                                         
   GetObjectStorageBucketinClusterResponseError GHC.Base.String                                        -- ^ Means either no matching case available or a parse error
  | GetObjectStorageBucketinClusterResponse200 GetObjectStorageBucketinClusterResponseBody200          -- ^ A paginated list of buckets you own in this cluster.
  | GetObjectStorageBucketinClusterResponseDefault GetObjectStorageBucketinClusterResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetObjectStorageBucketinClusterResponseBody200
-- 
-- 
data GetObjectStorageBucketinClusterResponseBody200 = GetObjectStorageBucketinClusterResponseBody200 {
  -- | data
  getObjectStorageBucketinClusterResponseBody200Data :: (GHC.Base.Maybe ([] ObjectStorageBucket))
  -- | page
  , getObjectStorageBucketinClusterResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getObjectStorageBucketinClusterResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getObjectStorageBucketinClusterResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetObjectStorageBucketinClusterResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getObjectStorageBucketinClusterResponseBody200Data obj) : (Data.Aeson..=) "page" (getObjectStorageBucketinClusterResponseBody200Page obj) : (Data.Aeson..=) "pages" (getObjectStorageBucketinClusterResponseBody200Pages obj) : (Data.Aeson..=) "results" (getObjectStorageBucketinClusterResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getObjectStorageBucketinClusterResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getObjectStorageBucketinClusterResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getObjectStorageBucketinClusterResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getObjectStorageBucketinClusterResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageBucketinClusterResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageBucketinClusterResponseBody200" (\obj -> (((GHC.Base.pure GetObjectStorageBucketinClusterResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Defines the data type for the schema GetObjectStorageBucketinClusterResponseBodyDefault
-- 
-- 
data GetObjectStorageBucketinClusterResponseBodyDefault = GetObjectStorageBucketinClusterResponseBodyDefault {
  -- | errors
  getObjectStorageBucketinClusterResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetObjectStorageBucketinClusterResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getObjectStorageBucketinClusterResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getObjectStorageBucketinClusterResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageBucketinClusterResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageBucketinClusterResponseBodyDefault" (\obj -> GHC.Base.pure GetObjectStorageBucketinClusterResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
