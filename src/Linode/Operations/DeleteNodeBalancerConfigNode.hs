-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteNodeBalancerConfigNode
module Linode.Operations.DeleteNodeBalancerConfigNode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}
-- 
-- Deletes a Node from this Config. This backend will no longer receive traffic for the configured port of this NodeBalancer.
-- 
-- This does not change or remove the Linode whose address was used in the creation of this Node.
deleteNodeBalancerConfigNode :: forall m . Linode.Common.MonadHTTP m => DeleteNodeBalancerConfigNodeParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteNodeBalancerConfigNodeResponse) -- ^ Monadic computation which returns the result of the operation
deleteNodeBalancerConfigNode parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteNodeBalancerConfigNodeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigNodeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigNodeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               DeleteNodeBalancerConfigNodeResponseBodyDefault)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack (("/nodebalancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteNodeBalancerConfigNodeParametersPathNodeBalancerId parameters))) GHC.Base.++ "/configs/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteNodeBalancerConfigNodeParametersPathConfigId parameters))) GHC.Base.++ ("/nodes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteNodeBalancerConfigNodeParametersPathNodeId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/nodes\/{nodeId}.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteNodeBalancerConfigNodeParameters = DeleteNodeBalancerConfigNodeParameters {
  -- | pathConfigId: Represents the parameter named \'configId\'
  -- 
  -- The ID of the Config to access
  deleteNodeBalancerConfigNodeParametersPathConfigId :: GHC.Types.Int
  -- | pathNodeBalancerId: Represents the parameter named \'nodeBalancerId\'
  -- 
  -- The ID of the NodeBalancer to access.
  , deleteNodeBalancerConfigNodeParametersPathNodeBalancerId :: GHC.Types.Int
  -- | pathNodeId: Represents the parameter named \'nodeId\'
  -- 
  -- The ID of the Node to access
  , deleteNodeBalancerConfigNodeParametersPathNodeId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteNodeBalancerConfigNodeParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathConfigId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeParametersPathConfigId obj : "pathNodeBalancerId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeParametersPathNodeBalancerId obj : "pathNodeId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeParametersPathNodeId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathConfigId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeParametersPathConfigId obj) GHC.Base.<> (("pathNodeBalancerId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeParametersPathNodeBalancerId obj) GHC.Base.<> ("pathNodeId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeParametersPathNodeId obj)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteNodeBalancerConfigNodeParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteNodeBalancerConfigNodeParameters" (\obj -> ((GHC.Base.pure DeleteNodeBalancerConfigNodeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathConfigId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNodeBalancerId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNodeId"))
-- | Create a new 'DeleteNodeBalancerConfigNodeParameters' with all required fields.
mkDeleteNodeBalancerConfigNodeParameters :: GHC.Types.Int -- ^ 'deleteNodeBalancerConfigNodeParametersPathConfigId'
  -> GHC.Types.Int -- ^ 'deleteNodeBalancerConfigNodeParametersPathNodeBalancerId'
  -> GHC.Types.Int -- ^ 'deleteNodeBalancerConfigNodeParametersPathNodeId'
  -> DeleteNodeBalancerConfigNodeParameters
mkDeleteNodeBalancerConfigNodeParameters deleteNodeBalancerConfigNodeParametersPathConfigId deleteNodeBalancerConfigNodeParametersPathNodeBalancerId deleteNodeBalancerConfigNodeParametersPathNodeId = DeleteNodeBalancerConfigNodeParameters{deleteNodeBalancerConfigNodeParametersPathConfigId = deleteNodeBalancerConfigNodeParametersPathConfigId,
                                                                                                                                                                                                                                               deleteNodeBalancerConfigNodeParametersPathNodeBalancerId = deleteNodeBalancerConfigNodeParametersPathNodeBalancerId,
                                                                                                                                                                                                                                               deleteNodeBalancerConfigNodeParametersPathNodeId = deleteNodeBalancerConfigNodeParametersPathNodeId}
-- | Represents a response of the operation 'deleteNodeBalancerConfigNode'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteNodeBalancerConfigNodeResponseError' is used.
data DeleteNodeBalancerConfigNodeResponse =
   DeleteNodeBalancerConfigNodeResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteNodeBalancerConfigNodeResponse200 Data.Aeson.Types.Internal.Object -- ^ Node deleted successfully.
  | DeleteNodeBalancerConfigNodeResponseDefault DeleteNodeBalancerConfigNodeResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteNodeBalancerConfigNodeResponseBodyDefault = DeleteNodeBalancerConfigNodeResponseBodyDefault {
  -- | errors
  deleteNodeBalancerConfigNodeResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteNodeBalancerConfigNodeResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigNodeResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON DeleteNodeBalancerConfigNodeResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteNodeBalancerConfigNodeResponseBodyDefault" (\obj -> GHC.Base.pure DeleteNodeBalancerConfigNodeResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'DeleteNodeBalancerConfigNodeResponseBodyDefault' with all required fields.
mkDeleteNodeBalancerConfigNodeResponseBodyDefault :: DeleteNodeBalancerConfigNodeResponseBodyDefault
mkDeleteNodeBalancerConfigNodeResponseBodyDefault = DeleteNodeBalancerConfigNodeResponseBodyDefault{deleteNodeBalancerConfigNodeResponseBodyDefaultErrors = GHC.Maybe.Nothing}
