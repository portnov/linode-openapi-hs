-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation updateObjectStorageBucketACL
module Linode.Operations.UpdateObjectStorageBucketACL where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > PUT /object-storage/buckets/{clusterId}/{bucket}/object-acl
-- 
-- Update an Object\'s configured Access Control List (ACL) in this Object Storage bucket.
-- ACLs define who can access your buckets and objects and specify the level of access
-- granted to those users.
-- 
-- 
-- This endpoint is available for convenience. It is recommended that instead you
-- use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/objectops\/\#set-object-acl) directly.
updateObjectStorageBucketACL :: forall m . Linode.Common.MonadHTTP m => UpdateObjectStorageBucketACLParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe UpdateObjectStorageBucketACLRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response UpdateObjectStorageBucketACLResponse) -- ^ Monadic computation which returns the result of the operation
updateObjectStorageBucketACL parameters
                             body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateObjectStorageBucketACLResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateObjectStorageBucketACLResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       UpdateObjectStorageBucketACLResponseBody200)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateObjectStorageBucketACLResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                         UpdateObjectStorageBucketACLResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack (("/object-storage/buckets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (updateObjectStorageBucketACLParametersPathClusterId parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (updateObjectStorageBucketACLParametersPathBucket parameters))) GHC.Base.++ "/object-acl"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-acl.PUT.parameters@ in the specification.
-- 
-- 
data UpdateObjectStorageBucketACLParameters = UpdateObjectStorageBucketACLParameters {
  -- | pathBucket: Represents the parameter named \'bucket\'
  -- 
  -- The bucket name.
  updateObjectStorageBucketACLParametersPathBucket :: Data.Text.Internal.Text
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- The ID of the cluster this bucket exists in.
  , updateObjectStorageBucketACLParametersPathClusterId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateObjectStorageBucketACLParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathBucket" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLParametersPathBucket obj : "pathClusterId" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLParametersPathClusterId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathBucket" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLParametersPathBucket obj) GHC.Base.<> ("pathClusterId" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLParametersPathClusterId obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketACLParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketACLParameters" (\obj -> (GHC.Base.pure UpdateObjectStorageBucketACLParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathBucket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId"))
-- | Create a new 'UpdateObjectStorageBucketACLParameters' with all required fields.
mkUpdateObjectStorageBucketACLParameters :: Data.Text.Internal.Text -- ^ 'updateObjectStorageBucketACLParametersPathBucket'
  -> Data.Text.Internal.Text -- ^ 'updateObjectStorageBucketACLParametersPathClusterId'
  -> UpdateObjectStorageBucketACLParameters
mkUpdateObjectStorageBucketACLParameters updateObjectStorageBucketACLParametersPathBucket updateObjectStorageBucketACLParametersPathClusterId = UpdateObjectStorageBucketACLParameters{updateObjectStorageBucketACLParametersPathBucket = updateObjectStorageBucketACLParametersPathBucket,
                                                                                                                                                                                       updateObjectStorageBucketACLParametersPathClusterId = updateObjectStorageBucketACLParametersPathClusterId}
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-acl.PUT.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data UpdateObjectStorageBucketACLRequestBody = UpdateObjectStorageBucketACLRequestBody {
  -- | acl: The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
  updateObjectStorageBucketACLRequestBodyAcl :: UpdateObjectStorageBucketACLRequestBodyAcl'
  -- | name: The \`name\` of the object for which to update its Access Control List (ACL). Use the [Object Storage Bucket Contents List](\/docs\/api\/object-storage\/\#object-storage-bucket-contents-list) endpoint to access all object names in a bucket.
  , updateObjectStorageBucketACLRequestBodyName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateObjectStorageBucketACLRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("acl" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLRequestBodyAcl obj : "name" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLRequestBodyName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acl" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLRequestBodyAcl obj) GHC.Base.<> ("name" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLRequestBodyName obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketACLRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketACLRequestBody" (\obj -> (GHC.Base.pure UpdateObjectStorageBucketACLRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "acl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))
-- | Create a new 'UpdateObjectStorageBucketACLRequestBody' with all required fields.
mkUpdateObjectStorageBucketACLRequestBody :: UpdateObjectStorageBucketACLRequestBodyAcl' -- ^ 'updateObjectStorageBucketACLRequestBodyAcl'
  -> Data.Text.Internal.Text -- ^ 'updateObjectStorageBucketACLRequestBodyName'
  -> UpdateObjectStorageBucketACLRequestBody
mkUpdateObjectStorageBucketACLRequestBody updateObjectStorageBucketACLRequestBodyAcl updateObjectStorageBucketACLRequestBodyName = UpdateObjectStorageBucketACLRequestBody{updateObjectStorageBucketACLRequestBodyAcl = updateObjectStorageBucketACLRequestBodyAcl,
                                                                                                                                                                           updateObjectStorageBucketACLRequestBodyName = updateObjectStorageBucketACLRequestBodyName}
-- | Defines the enum schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-acl.PUT.requestBody.content.application\/json.schema.properties.acl@ in the specification.
-- 
-- The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
data UpdateObjectStorageBucketACLRequestBodyAcl' =
   UpdateObjectStorageBucketACLRequestBodyAcl'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | UpdateObjectStorageBucketACLRequestBodyAcl'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | UpdateObjectStorageBucketACLRequestBodyAcl'EnumPrivate -- ^ Represents the JSON value @"private"@
  | UpdateObjectStorageBucketACLRequestBodyAcl'EnumPublicRead -- ^ Represents the JSON value @"public-read"@
  | UpdateObjectStorageBucketACLRequestBodyAcl'EnumAuthenticatedRead -- ^ Represents the JSON value @"authenticated-read"@
  | UpdateObjectStorageBucketACLRequestBodyAcl'EnumPublicReadWrite -- ^ Represents the JSON value @"public-read-write"@
  | UpdateObjectStorageBucketACLRequestBodyAcl'EnumCustom -- ^ Represents the JSON value @"custom"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateObjectStorageBucketACLRequestBodyAcl'
    where toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'Other val) = val
          toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'EnumPrivate) = "private"
          toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'EnumPublicRead) = "public-read"
          toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'EnumAuthenticatedRead) = "authenticated-read"
          toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'EnumPublicReadWrite) = "public-read-write"
          toJSON (UpdateObjectStorageBucketACLRequestBodyAcl'EnumCustom) = "custom"
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketACLRequestBodyAcl'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "private" -> UpdateObjectStorageBucketACLRequestBodyAcl'EnumPrivate
                                            | val GHC.Classes.== "public-read" -> UpdateObjectStorageBucketACLRequestBodyAcl'EnumPublicRead
                                            | val GHC.Classes.== "authenticated-read" -> UpdateObjectStorageBucketACLRequestBodyAcl'EnumAuthenticatedRead
                                            | val GHC.Classes.== "public-read-write" -> UpdateObjectStorageBucketACLRequestBodyAcl'EnumPublicReadWrite
                                            | val GHC.Classes.== "custom" -> UpdateObjectStorageBucketACLRequestBodyAcl'EnumCustom
                                            | GHC.Base.otherwise -> UpdateObjectStorageBucketACLRequestBodyAcl'Other val)
-- | Represents a response of the operation 'updateObjectStorageBucketACL'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateObjectStorageBucketACLResponseError' is used.
data UpdateObjectStorageBucketACLResponse =
   UpdateObjectStorageBucketACLResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | UpdateObjectStorageBucketACLResponse200 UpdateObjectStorageBucketACLResponseBody200 -- ^ The Object\'s canned ACL and policy.
  | UpdateObjectStorageBucketACLResponseDefault UpdateObjectStorageBucketACLResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-acl.PUT.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data UpdateObjectStorageBucketACLResponseBody200 = UpdateObjectStorageBucketACLResponseBody200 {
  -- | acl: The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
  updateObjectStorageBucketACLResponseBody200Acl :: (GHC.Maybe.Maybe UpdateObjectStorageBucketACLResponseBody200Acl')
  -- | acl_xml: The full XML of the object\'s ACL policy.
  , updateObjectStorageBucketACLResponseBody200AclXml :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateObjectStorageBucketACLResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("acl" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLResponseBody200Acl obj : "acl_xml" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLResponseBody200AclXml obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acl" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLResponseBody200Acl obj) GHC.Base.<> ("acl_xml" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLResponseBody200AclXml obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketACLResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketACLResponseBody200" (\obj -> (GHC.Base.pure UpdateObjectStorageBucketACLResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acl_xml"))
-- | Create a new 'UpdateObjectStorageBucketACLResponseBody200' with all required fields.
mkUpdateObjectStorageBucketACLResponseBody200 :: UpdateObjectStorageBucketACLResponseBody200
mkUpdateObjectStorageBucketACLResponseBody200 = UpdateObjectStorageBucketACLResponseBody200{updateObjectStorageBucketACLResponseBody200Acl = GHC.Maybe.Nothing,
                                                                                            updateObjectStorageBucketACLResponseBody200AclXml = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/object-acl.PUT.responses.200.content.application\/json.schema.properties.acl@ in the specification.
-- 
-- The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
data UpdateObjectStorageBucketACLResponseBody200Acl' =
   UpdateObjectStorageBucketACLResponseBody200Acl'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | UpdateObjectStorageBucketACLResponseBody200Acl'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | UpdateObjectStorageBucketACLResponseBody200Acl'EnumPrivate -- ^ Represents the JSON value @"private"@
  | UpdateObjectStorageBucketACLResponseBody200Acl'EnumPublicRead -- ^ Represents the JSON value @"public-read"@
  | UpdateObjectStorageBucketACLResponseBody200Acl'EnumAuthenticatedRead -- ^ Represents the JSON value @"authenticated-read"@
  | UpdateObjectStorageBucketACLResponseBody200Acl'EnumPublicReadWrite -- ^ Represents the JSON value @"public-read-write"@
  | UpdateObjectStorageBucketACLResponseBody200Acl'EnumCustom -- ^ Represents the JSON value @"custom"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateObjectStorageBucketACLResponseBody200Acl'
    where toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'Other val) = val
          toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'EnumPrivate) = "private"
          toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'EnumPublicRead) = "public-read"
          toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'EnumAuthenticatedRead) = "authenticated-read"
          toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'EnumPublicReadWrite) = "public-read-write"
          toJSON (UpdateObjectStorageBucketACLResponseBody200Acl'EnumCustom) = "custom"
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketACLResponseBody200Acl'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "private" -> UpdateObjectStorageBucketACLResponseBody200Acl'EnumPrivate
                                            | val GHC.Classes.== "public-read" -> UpdateObjectStorageBucketACLResponseBody200Acl'EnumPublicRead
                                            | val GHC.Classes.== "authenticated-read" -> UpdateObjectStorageBucketACLResponseBody200Acl'EnumAuthenticatedRead
                                            | val GHC.Classes.== "public-read-write" -> UpdateObjectStorageBucketACLResponseBody200Acl'EnumPublicReadWrite
                                            | val GHC.Classes.== "custom" -> UpdateObjectStorageBucketACLResponseBody200Acl'EnumCustom
                                            | GHC.Base.otherwise -> UpdateObjectStorageBucketACLResponseBody200Acl'Other val)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data UpdateObjectStorageBucketACLResponseBodyDefault = UpdateObjectStorageBucketACLResponseBodyDefault {
  -- | errors
  updateObjectStorageBucketACLResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateObjectStorageBucketACLResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= updateObjectStorageBucketACLResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketACLResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketACLResponseBodyDefault" (\obj -> GHC.Base.pure UpdateObjectStorageBucketACLResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'UpdateObjectStorageBucketACLResponseBodyDefault' with all required fields.
mkUpdateObjectStorageBucketACLResponseBodyDefault :: UpdateObjectStorageBucketACLResponseBodyDefault
mkUpdateObjectStorageBucketACLResponseBodyDefault = UpdateObjectStorageBucketACLResponseBodyDefault{updateObjectStorageBucketACLResponseBodyDefaultErrors = GHC.Maybe.Nothing}
