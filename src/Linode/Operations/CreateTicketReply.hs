-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createTicketReply
module Linode.Operations.CreateTicketReply where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /support/tickets/{ticketId}/replies
-- 
-- Adds a reply to an existing Support Ticket.
createTicketReply :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ ticketId: The ID of the Support Ticket.
  -> CreateTicketReplyRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreateTicketReplyResponse) -- ^ Monadic computation which returns the result of the operation
createTicketReply ticketId
                  body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateTicketReplyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateTicketReplyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      SupportTicketReply)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateTicketReplyResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        CreateTicketReplyResponseBodyDefault)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/support/tickets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel ticketId)) GHC.Base.++ "/replies"))) GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/support\/tickets\/{ticketId}\/replies.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateTicketReplyRequestBody = CreateTicketReplyRequestBody {
  -- | description: The content of your reply.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 65535
  -- * Minimum length of 1
  createTicketReplyRequestBodyDescription :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateTicketReplyRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("description" Data.Aeson.Types.ToJSON..= createTicketReplyRequestBodyDescription obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("description" Data.Aeson.Types.ToJSON..= createTicketReplyRequestBodyDescription obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateTicketReplyRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateTicketReplyRequestBody" (\obj -> GHC.Base.pure CreateTicketReplyRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description"))
-- | Create a new 'CreateTicketReplyRequestBody' with all required fields.
mkCreateTicketReplyRequestBody :: Data.Text.Internal.Text -- ^ 'createTicketReplyRequestBodyDescription'
  -> CreateTicketReplyRequestBody
mkCreateTicketReplyRequestBody createTicketReplyRequestBodyDescription = CreateTicketReplyRequestBody{createTicketReplyRequestBodyDescription = createTicketReplyRequestBodyDescription}
-- | Represents a response of the operation 'createTicketReply'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateTicketReplyResponseError' is used.
data CreateTicketReplyResponse =
   CreateTicketReplyResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateTicketReplyResponse200 SupportTicketReply -- ^ Reply created.
  | CreateTicketReplyResponseDefault CreateTicketReplyResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateTicketReplyResponseBodyDefault = CreateTicketReplyResponseBodyDefault {
  -- | errors
  createTicketReplyResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateTicketReplyResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createTicketReplyResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createTicketReplyResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateTicketReplyResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateTicketReplyResponseBodyDefault" (\obj -> GHC.Base.pure CreateTicketReplyResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreateTicketReplyResponseBodyDefault' with all required fields.
mkCreateTicketReplyResponseBodyDefault :: CreateTicketReplyResponseBodyDefault
mkCreateTicketReplyResponseBodyDefault = CreateTicketReplyResponseBodyDefault{createTicketReplyResponseBodyDefaultErrors = GHC.Maybe.Nothing}
