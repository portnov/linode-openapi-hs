-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createVolume
module Linode.Operations.CreateVolume where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /volumes
-- 
-- Creates a Volume on your Account. In order for this to complete successfully, your User must have the \`add_volumes\` grant. Creating a new Volume will start accruing additional charges on your account.
createVolume :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> CreateVolumeRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateVolumeResponse)) -- ^ Monad containing the result of the operation
createVolume config
             body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateVolumeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateVolumeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      Volume)
                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateVolumeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        CreateVolumeResponseBodyDefault)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /volumes
-- 
-- The same as 'createVolume' but returns the raw 'Data.ByteString.Char8.ByteString'
createVolumeRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   Linode.Common.Configuration s ->
                   CreateVolumeRequestBody ->
                   m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createVolumeRaw config
                body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /volumes
-- 
-- Monadic version of 'createVolume' (use with 'Linode.Common.runWithConfiguration')
createVolumeM :: forall m s . (Linode.Common.MonadHTTP m,
                               Linode.Common.SecurityScheme s) =>
                 CreateVolumeRequestBody ->
                 Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                    m
                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                        (Network.HTTP.Client.Types.Response CreateVolumeResponse))
createVolumeM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateVolumeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateVolumeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       Volume)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateVolumeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                         CreateVolumeResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /volumes
-- 
-- Monadic version of 'createVolumeRaw' (use with 'Linode.Common.runWithConfiguration')
createVolumeRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                  Linode.Common.SecurityScheme s) =>
                    CreateVolumeRequestBody ->
                    Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                       m
                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createVolumeRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createVolumeRequestBody
-- 
-- 
data CreateVolumeRequestBody = CreateVolumeRequestBody {
  -- | config_id: When creating a Volume attached to a Linode, the ID of the Linode Config to include the new Volume in. This Config must belong to the Linode referenced by \`linode_id\`. Must _not_ be provided if \`linode_id\` is not sent. If a \`linode_id\` is sent without a \`config_id\`, the volume will be attached:
  -- 
  --   * to the Linode\'s only config if it only has one config.
  --   * to the Linode\'s last used config, if possible.
  -- 
  -- If no config can be selected for attachment, an error will be returned.
  createVolumeRequestBodyConfig_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The Volume\'s label, which is also used in the \`filesystem_path\` of the resulting volume.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 1
  -- * Must match pattern \'^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+\$\'
  , createVolumeRequestBodyLabel :: Data.Text.Internal.Text
  -- | linode_id: The Linode this volume should be attached to upon creation. If not given, the volume will be created without an attachment.
  , createVolumeRequestBodyLinode_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | region: The Region to deploy this Volume in. This is only required if a linode_id is not given.
  , createVolumeRequestBodyRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | size: The initial size of this volume, in GB.  Be aware that volumes may only be resized up after creation.
  , createVolumeRequestBodySize :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | tags: An array of Tags applied to this object.  Tags are for organizational purposes only.
  , createVolumeRequestBodyTags :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateVolumeRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "config_id" (createVolumeRequestBodyConfig_id obj) : (Data.Aeson..=) "label" (createVolumeRequestBodyLabel obj) : (Data.Aeson..=) "linode_id" (createVolumeRequestBodyLinode_id obj) : (Data.Aeson..=) "region" (createVolumeRequestBodyRegion obj) : (Data.Aeson..=) "size" (createVolumeRequestBodySize obj) : (Data.Aeson..=) "tags" (createVolumeRequestBodyTags obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "config_id" (createVolumeRequestBodyConfig_id obj) GHC.Base.<> ((Data.Aeson..=) "label" (createVolumeRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "linode_id" (createVolumeRequestBodyLinode_id obj) GHC.Base.<> ((Data.Aeson..=) "region" (createVolumeRequestBodyRegion obj) GHC.Base.<> ((Data.Aeson..=) "size" (createVolumeRequestBodySize obj) GHC.Base.<> (Data.Aeson..=) "tags" (createVolumeRequestBodyTags obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateVolumeRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateVolumeRequestBody" (\obj -> (((((GHC.Base.pure CreateVolumeRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "config_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags"))
-- | Represents a response of the operation 'createVolume'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateVolumeResponseError' is used.
data CreateVolumeResponse =                                      
   CreateVolumeResponseError GHC.Base.String                     -- ^ Means either no matching case available or a parse error
  | CreateVolumeResponse200 Volume                               -- ^ Creating Volume. 
  | CreateVolumeResponseDefault CreateVolumeResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateVolumeResponseBodyDefault
-- 
-- 
data CreateVolumeResponseBodyDefault = CreateVolumeResponseBodyDefault {
  -- | errors
  createVolumeResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateVolumeResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createVolumeResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createVolumeResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateVolumeResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateVolumeResponseBodyDefault" (\obj -> GHC.Base.pure CreateVolumeResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
