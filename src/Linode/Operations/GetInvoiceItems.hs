-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getInvoiceItems
module Linode.Operations.GetInvoiceItems where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /account/invoices/{invoiceId}/items
-- 
-- Returns a paginated list of Invoice items.
getInvoiceItems :: forall m . Linode.Common.MonadHTTP m => GetInvoiceItemsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetInvoiceItemsResponse) -- ^ Monadic computation which returns the result of the operation
getInvoiceItems parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetInvoiceItemsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetInvoiceItemsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetInvoiceItemsResponseBody200)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetInvoiceItemsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        GetInvoiceItemsResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/account/invoices/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getInvoiceItemsParametersPathInvoiceId parameters))) GHC.Base.++ "/items"))) [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoiceItemsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
inode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoiceItemsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/account\/invoices\/{invoiceId}\/items.GET.parameters@ in the specification.
-- 
-- 
data GetInvoiceItemsParameters = GetInvoiceItemsParameters {
  -- | pathInvoiceId: Represents the parameter named \'invoiceId\'
  -- 
  -- The ID of the Invoice.
  getInvoiceItemsParametersPathInvoiceId :: GHC.Types.Int
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  , getInvoiceItemsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getInvoiceItemsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoiceItemsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathInvoiceId" Data.Aeson.Types.ToJSON..= getInvoiceItemsParametersPathInvoiceId obj : "queryPage" Data.Aeson.Types.ToJSON..= getInvoiceItemsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getInvoiceItemsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathInvoiceId" Data.Aeson.Types.ToJSON..= getInvoiceItemsParametersPathInvoiceId obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= getInvoiceItemsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getInvoiceItemsParametersQueryPageSize obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoiceItemsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoiceItemsParameters" (\obj -> ((GHC.Base.pure GetInvoiceItemsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathInvoiceId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetInvoiceItemsParameters' with all required fields.
mkGetInvoiceItemsParameters :: GHC.Types.Int -- ^ 'getInvoiceItemsParametersPathInvoiceId'
  -> GetInvoiceItemsParameters
mkGetInvoiceItemsParameters getInvoiceItemsParametersPathInvoiceId = GetInvoiceItemsParameters{getInvoiceItemsParametersPathInvoiceId = getInvoiceItemsParametersPathInvoiceId,
                                                                                               getInvoiceItemsParametersQueryPage = GHC.Maybe.Nothing,
                                                                                               getInvoiceItemsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getInvoiceItems'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetInvoiceItemsResponseError' is used.
data GetInvoiceItemsResponse =
   GetInvoiceItemsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetInvoiceItemsResponse200 GetInvoiceItemsResponseBody200 -- ^ A paginated list of InvoiceItem objects
  | GetInvoiceItemsResponseDefault GetInvoiceItemsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/account\/invoices\/{invoiceId}\/items.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetInvoiceItemsResponseBody200 = GetInvoiceItemsResponseBody200 {
  -- | data
  getInvoiceItemsResponseBody200Data :: (GHC.Maybe.Maybe ([InvoiceItem]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getInvoiceItemsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getInvoiceItemsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getInvoiceItemsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoiceItemsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoiceItemsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoiceItemsResponseBody200" (\obj -> (((GHC.Base.pure GetInvoiceItemsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetInvoiceItemsResponseBody200' with all required fields.
mkGetInvoiceItemsResponseBody200 :: GetInvoiceItemsResponseBody200
mkGetInvoiceItemsResponseBody200 = GetInvoiceItemsResponseBody200{getInvoiceItemsResponseBody200Data = GHC.Maybe.Nothing,
                                                                  getInvoiceItemsResponseBody200Page = GHC.Maybe.Nothing,
                                                                  getInvoiceItemsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                  getInvoiceItemsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetInvoiceItemsResponseBodyDefault = GetInvoiceItemsResponseBodyDefault {
  -- | errors
  getInvoiceItemsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoiceItemsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getInvoiceItemsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoiceItemsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoiceItemsResponseBodyDefault" (\obj -> GHC.Base.pure GetInvoiceItemsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetInvoiceItemsResponseBodyDefault' with all required fields.
mkGetInvoiceItemsResponseBodyDefault :: GetInvoiceItemsResponseBodyDefault
mkGetInvoiceItemsResponseBodyDefault = GetInvoiceItemsResponseBodyDefault{getInvoiceItemsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
