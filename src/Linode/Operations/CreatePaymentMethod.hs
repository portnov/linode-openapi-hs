-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createPaymentMethod
module Linode.Operations.CreatePaymentMethod where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /account/payment-methods
-- 
-- Adds a Payment Method to your Account with the option to set it as the default method.
-- 
-- * Adding a default Payment Method removes the default status from any other Payment Method.
-- 
-- * An Account can have up to 6 active Payment Methods.
-- 
-- * Up to 60 Payment Methods can be added each day.
-- 
-- * Prior to adding a Payment Method, ensure that your billing address information is up-to-date
-- with a valid \`zip\` by using the Account Update ([PUT \/account](\/docs\/api\/account\/\#account-update)) endpoint.
-- 
-- * A \`payment_method_add\` event is generated when a payment is successfully submitted.
createPaymentMethod :: forall m . Linode.Common.MonadHTTP m => CreatePaymentMethodRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreatePaymentMethodResponse) -- ^ Monadic computation which returns the result of the operation
createPaymentMethod body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreatePaymentMethodResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreatePaymentMethodResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.Internal.Object)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreatePaymentMethodResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              CreatePaymentMethodResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/payment-methods") GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/account\/payment-methods.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- Payment Method Request Object.
data CreatePaymentMethodRequestBody = CreatePaymentMethodRequestBody {
  -- | data: An object representing the credit card information you have on file with
  -- Linode to make Payments against your Account.
  createPaymentMethodRequestBodyData :: CreditCard
  -- | is_default: Whether this Payment Method is the default method for automatically processing service charges.
  , createPaymentMethodRequestBodyIsDefault :: PaymentMethodPropertiesIsDefault
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreatePaymentMethodRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= createPaymentMethodRequestBodyData obj : "is_default" Data.Aeson.Types.ToJSON..= createPaymentMethodRequestBodyIsDefault obj : "type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "credit_card" : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= createPaymentMethodRequestBodyData obj) GHC.Base.<> (("is_default" Data.Aeson.Types.ToJSON..= createPaymentMethodRequestBodyIsDefault obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "credit_card")))
instance Data.Aeson.Types.FromJSON.FromJSON CreatePaymentMethodRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreatePaymentMethodRequestBody" (\obj -> (GHC.Base.pure CreatePaymentMethodRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_default"))
-- | Create a new 'CreatePaymentMethodRequestBody' with all required fields.
mkCreatePaymentMethodRequestBody :: CreditCard -- ^ 'createPaymentMethodRequestBodyData'
  -> PaymentMethodPropertiesIsDefault -- ^ 'createPaymentMethodRequestBodyIsDefault'
  -> CreatePaymentMethodRequestBody
mkCreatePaymentMethodRequestBody createPaymentMethodRequestBodyData createPaymentMethodRequestBodyIsDefault = CreatePaymentMethodRequestBody{createPaymentMethodRequestBodyData = createPaymentMethodRequestBodyData,
                                                                                                                                             createPaymentMethodRequestBodyIsDefault = createPaymentMethodRequestBodyIsDefault}
-- | Represents a response of the operation 'createPaymentMethod'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreatePaymentMethodResponseError' is used.
data CreatePaymentMethodResponse =
   CreatePaymentMethodResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreatePaymentMethodResponse200 Data.Aeson.Types.Internal.Object -- ^ Payment Method added.
  | CreatePaymentMethodResponseDefault CreatePaymentMethodResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreatePaymentMethodResponseBodyDefault = CreatePaymentMethodResponseBodyDefault {
  -- | errors
  createPaymentMethodResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreatePaymentMethodResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createPaymentMethodResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createPaymentMethodResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreatePaymentMethodResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreatePaymentMethodResponseBodyDefault" (\obj -> GHC.Base.pure CreatePaymentMethodResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreatePaymentMethodResponseBodyDefault' with all required fields.
mkCreatePaymentMethodResponseBodyDefault :: CreatePaymentMethodResponseBodyDefault
mkCreatePaymentMethodResponseBodyDefault = CreatePaymentMethodResponseBodyDefault{createPaymentMethodResponseBodyDefaultErrors = GHC.Maybe.Nothing}
