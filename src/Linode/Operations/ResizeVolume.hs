-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation resizeVolume
module Linode.Operations.ResizeVolume where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /volumes/{volumeId}/resize
-- 
-- Resize an existing Volume on your Account. In order for this request to complete successfully, your User must have the \`read_write\` permissions to the Volume.
-- * Volumes can only be resized up.
-- * Only Volumes with a \`status\` of \"active\" can be resized.
resizeVolume :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ volumeId: ID of the Volume to resize.
  -> ResizeVolumeRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response ResizeVolumeResponse) -- ^ Monadic computation which returns the result of the operation
resizeVolume volumeId
             body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ResizeVolumeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ResizeVolumeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       Data.Aeson.Types.Internal.Object)
                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ResizeVolumeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         ResizeVolumeResponseBodyDefault)
                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel volumeId)) GHC.Base.++ "/resize"))) GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/volumes\/{volumeId}\/resize.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data ResizeVolumeRequestBody = ResizeVolumeRequestBody {
  -- | size: The Volume\'s size, in GiB.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 10240.0
  resizeVolumeRequestBodySize :: VolumePropertiesSize
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ResizeVolumeRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("size" Data.Aeson.Types.ToJSON..= resizeVolumeRequestBodySize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("size" Data.Aeson.Types.ToJSON..= resizeVolumeRequestBodySize obj)
instance Data.Aeson.Types.FromJSON.FromJSON ResizeVolumeRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResizeVolumeRequestBody" (\obj -> GHC.Base.pure ResizeVolumeRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size"))
-- | Create a new 'ResizeVolumeRequestBody' with all required fields.
mkResizeVolumeRequestBody :: VolumePropertiesSize -- ^ 'resizeVolumeRequestBodySize'
  -> ResizeVolumeRequestBody
mkResizeVolumeRequestBody resizeVolumeRequestBodySize = ResizeVolumeRequestBody{resizeVolumeRequestBodySize = resizeVolumeRequestBodySize}
-- | Represents a response of the operation 'resizeVolume'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ResizeVolumeResponseError' is used.
data ResizeVolumeResponse =
   ResizeVolumeResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ResizeVolumeResponse200 Data.Aeson.Types.Internal.Object -- ^ Volume resize started.
  | ResizeVolumeResponseDefault ResizeVolumeResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data ResizeVolumeResponseBodyDefault = ResizeVolumeResponseBodyDefault {
  -- | errors
  resizeVolumeResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ResizeVolumeResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= resizeVolumeResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= resizeVolumeResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON ResizeVolumeResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResizeVolumeResponseBodyDefault" (\obj -> GHC.Base.pure ResizeVolumeResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'ResizeVolumeResponseBodyDefault' with all required fields.
mkResizeVolumeResponseBodyDefault :: ResizeVolumeResponseBodyDefault
mkResizeVolumeResponseBodyDefault = ResizeVolumeResponseBodyDefault{resizeVolumeResponseBodyDefaultErrors = GHC.Maybe.Nothing}
