-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeTransferByYearMonth
module Linode.Operations.GetLinodeTransferByYearMonth where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/transfer/{year}/{month}
-- 
-- Returns a Linode\'s network transfer statistics for a specific month. The year\/month values must be either a date in the past, or the current month.
getLinodeTransferByYearMonth :: forall m . Linode.Common.MonadHTTP m => GetLinodeTransferByYearMonthParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeTransferByYearMonthResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeTransferByYearMonth parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeTransferByYearMonthResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTransferByYearMonthResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetLinodeTransferByYearMonthResponseBody200)
                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTransferByYearMonthResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetLinodeTransferByYearMonthResponseBodyDefault)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeTransferByYearMonthParametersPathLinodeId parameters))) GHC.Base.++ (("/transfer/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeTransferByYearMonthParametersPathYear parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeTransferByYearMonthParametersPathMonth parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/transfer\/{year}\/{month}.GET.parameters@ in the specification.
-- 
-- 
data GetLinodeTransferByYearMonthParameters = GetLinodeTransferByYearMonthParameters {
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- ID of the Linode to look up.
  getLinodeTransferByYearMonthParametersPathLinodeId :: GHC.Types.Int
  -- | pathMonth: Represents the parameter named \'month\'
  -- 
  -- Numeric value representing the month to look up.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 12.0
  -- * Minimum  of 1.0
  , getLinodeTransferByYearMonthParametersPathMonth :: GHC.Types.Int
  -- | pathYear: Represents the parameter named \'year\'
  -- 
  -- Numeric value representing the year to look up.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 2037.0
  -- * Minimum  of 2000.0
  , getLinodeTransferByYearMonthParametersPathYear :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeTransferByYearMonthParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthParametersPathLinodeId obj : "pathMonth" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthParametersPathMonth obj : "pathYear" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthParametersPathYear obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthParametersPathLinodeId obj) GHC.Base.<> (("pathMonth" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthParametersPathMonth obj) GHC.Base.<> ("pathYear" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthParametersPathYear obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTransferByYearMonthParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTransferByYearMonthParameters" (\obj -> ((GHC.Base.pure GetLinodeTransferByYearMonthParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathMonth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathYear"))
-- | Create a new 'GetLinodeTransferByYearMonthParameters' with all required fields.
mkGetLinodeTransferByYearMonthParameters :: GHC.Types.Int -- ^ 'getLinodeTransferByYearMonthParametersPathLinodeId'
  -> GHC.Types.Int -- ^ 'getLinodeTransferByYearMonthParametersPathMonth'
  -> GHC.Types.Int -- ^ 'getLinodeTransferByYearMonthParametersPathYear'
  -> GetLinodeTransferByYearMonthParameters
mkGetLinodeTransferByYearMonthParameters getLinodeTransferByYearMonthParametersPathLinodeId getLinodeTransferByYearMonthParametersPathMonth getLinodeTransferByYearMonthParametersPathYear = GetLinodeTransferByYearMonthParameters{getLinodeTransferByYearMonthParametersPathLinodeId = getLinodeTransferByYearMonthParametersPathLinodeId,
                                                                                                                                                                                                                                    getLinodeTransferByYearMonthParametersPathMonth = getLinodeTransferByYearMonthParametersPathMonth,
                                                                                                                                                                                                                                    getLinodeTransferByYearMonthParametersPathYear = getLinodeTransferByYearMonthParametersPathYear}
-- | Represents a response of the operation 'getLinodeTransferByYearMonth'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeTransferByYearMonthResponseError' is used.
data GetLinodeTransferByYearMonthResponse =
   GetLinodeTransferByYearMonthResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeTransferByYearMonthResponse200 GetLinodeTransferByYearMonthResponseBody200 -- ^ A collection of the specified Linode\'s network transfer statistics for the requested month. 
  | GetLinodeTransferByYearMonthResponseDefault GetLinodeTransferByYearMonthResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/transfer\/{year}\/{month}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeTransferByYearMonthResponseBody200 = GetLinodeTransferByYearMonthResponseBody200 {
  -- | bytes_in: The amount of inbound public network traffic received by this Linode, in bytes, for a specific year\/month.
  getLinodeTransferByYearMonthResponseBody200BytesIn :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | bytes_out: The amount of outbound public network traffic sent by this Linode, in bytes, for a specific year\/month.
  , getLinodeTransferByYearMonthResponseBody200BytesOut :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | bytes_total: The total amount of public network traffic sent and received by this Linode, in bytes, for a specific year\/month.
  , getLinodeTransferByYearMonthResponseBody200BytesTotal :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeTransferByYearMonthResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("bytes_in" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBody200BytesIn obj : "bytes_out" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBody200BytesOut obj : "bytes_total" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBody200BytesTotal obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bytes_in" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBody200BytesIn obj) GHC.Base.<> (("bytes_out" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBody200BytesOut obj) GHC.Base.<> ("bytes_total" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBody200BytesTotal obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTransferByYearMonthResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTransferByYearMonthResponseBody200" (\obj -> ((GHC.Base.pure GetLinodeTransferByYearMonthResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bytes_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bytes_out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bytes_total"))
-- | Create a new 'GetLinodeTransferByYearMonthResponseBody200' with all required fields.
mkGetLinodeTransferByYearMonthResponseBody200 :: GetLinodeTransferByYearMonthResponseBody200
mkGetLinodeTransferByYearMonthResponseBody200 = GetLinodeTransferByYearMonthResponseBody200{getLinodeTransferByYearMonthResponseBody200BytesIn = GHC.Maybe.Nothing,
                                                                                            getLinodeTransferByYearMonthResponseBody200BytesOut = GHC.Maybe.Nothing,
                                                                                            getLinodeTransferByYearMonthResponseBody200BytesTotal = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeTransferByYearMonthResponseBodyDefault = GetLinodeTransferByYearMonthResponseBodyDefault {
  -- | errors
  getLinodeTransferByYearMonthResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeTransferByYearMonthResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLinodeTransferByYearMonthResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTransferByYearMonthResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTransferByYearMonthResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeTransferByYearMonthResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLinodeTransferByYearMonthResponseBodyDefault' with all required fields.
mkGetLinodeTransferByYearMonthResponseBodyDefault :: GetLinodeTransferByYearMonthResponseBodyDefault
mkGetLinodeTransferByYearMonthResponseBodyDefault = GetLinodeTransferByYearMonthResponseBodyDefault{getLinodeTransferByYearMonthResponseBodyDefaultErrors = GHC.Maybe.Nothing}
