-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNodeBalancers
module Linode.Operations.GetNodeBalancers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /nodebalancers
-- 
-- Returns a paginated list of NodeBalancers you have access to.
getNodeBalancers :: forall m . Linode.Common.MonadHTTP m => GetNodeBalancersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetNodeBalancersResponse) -- ^ Monadic computation which returns the result of the operation
getNodeBalancers parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNodeBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNodeBalancersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetNodeBalancersResponseBody200)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetNodeBalancersResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           GetNodeBalancersResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/nodebalancers") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNodeBalancersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                           Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNodeBalancersParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/nodebalancers.GET.parameters@ in the specification.
-- 
-- 
data GetNodeBalancersParameters = GetNodeBalancersParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getNodeBalancersParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getNodeBalancersParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNodeBalancersParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getNodeBalancersParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getNodeBalancersParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getNodeBalancersParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getNodeBalancersParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetNodeBalancersParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNodeBalancersParameters" (\obj -> (GHC.Base.pure GetNodeBalancersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetNodeBalancersParameters' with all required fields.
mkGetNodeBalancersParameters :: GetNodeBalancersParameters
mkGetNodeBalancersParameters = GetNodeBalancersParameters{getNodeBalancersParametersQueryPage = GHC.Maybe.Nothing,
                                                          getNodeBalancersParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getNodeBalancers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNodeBalancersResponseError' is used.
data GetNodeBalancersResponse =
   GetNodeBalancersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNodeBalancersResponse200 GetNodeBalancersResponseBody200 -- ^ A paginated list of NodeBalancers.
  | GetNodeBalancersResponseDefault GetNodeBalancersResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/nodebalancers.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNodeBalancersResponseBody200 = GetNodeBalancersResponseBody200 {
  -- | data
  getNodeBalancersResponseBody200Data :: (GHC.Maybe.Maybe ([NodeBalancer]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getNodeBalancersResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getNodeBalancersResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getNodeBalancersResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNodeBalancersResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetNodeBalancersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNodeBalancersResponseBody200" (\obj -> (((GHC.Base.pure GetNodeBalancersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetNodeBalancersResponseBody200' with all required fields.
mkGetNodeBalancersResponseBody200 :: GetNodeBalancersResponseBody200
mkGetNodeBalancersResponseBody200 = GetNodeBalancersResponseBody200{getNodeBalancersResponseBody200Data = GHC.Maybe.Nothing,
                                                                    getNodeBalancersResponseBody200Page = GHC.Maybe.Nothing,
                                                                    getNodeBalancersResponseBody200Pages = GHC.Maybe.Nothing,
                                                                    getNodeBalancersResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNodeBalancersResponseBodyDefault = GetNodeBalancersResponseBodyDefault {
  -- | errors
  getNodeBalancersResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNodeBalancersResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getNodeBalancersResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetNodeBalancersResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNodeBalancersResponseBodyDefault" (\obj -> GHC.Base.pure GetNodeBalancersResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetNodeBalancersResponseBodyDefault' with all required fields.
mkGetNodeBalancersResponseBodyDefault :: GetNodeBalancersResponseBodyDefault
mkGetNodeBalancersResponseBodyDefault = GetNodeBalancersResponseBodyDefault{getNodeBalancersResponseBodyDefaultErrors = GHC.Maybe.Nothing}
