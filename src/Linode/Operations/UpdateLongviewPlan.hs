-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation updateLongviewPlan
module Linode.Operations.UpdateLongviewPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > PUT /longview/plan
-- 
-- Update your Longview plan to that of the given subcription ID. This returns a \`LongviewSubscription\` object for the updated Longview Pro plan, or an empty set \`{}\` if the updated plan is Longview Free.
-- 
-- You must have \`\"longview_subscription\": true\` configured as a \`global\` [User Grant](\/docs\/api\/account\/\#users-grants-view) in order to access this endpoint.
-- 
-- You can send a request to the [List Longview Subscriptions](\/docs\/api\/longview\/\#longview-subscriptions-list) endpoint to receive the details, including \`id\`\'s, of each plan.
updateLongviewPlan :: forall m . Linode.Common.MonadHTTP m => LongviewPlan -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response UpdateLongviewPlanResponse) -- ^ Monadic computation which returns the result of the operation
updateLongviewPlan body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateLongviewPlanResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateLongviewPlanResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         LongviewSubscription)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateLongviewPlanResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           UpdateLongviewPlanResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/longview/plan") GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'updateLongviewPlan'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateLongviewPlanResponseError' is used.
data UpdateLongviewPlanResponse =
   UpdateLongviewPlanResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | UpdateLongviewPlanResponse200 LongviewSubscription -- ^ The updated Longview plan details for this account.
  | UpdateLongviewPlanResponseDefault UpdateLongviewPlanResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data UpdateLongviewPlanResponseBodyDefault = UpdateLongviewPlanResponseBodyDefault {
  -- | errors
  updateLongviewPlanResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateLongviewPlanResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= updateLongviewPlanResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= updateLongviewPlanResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON UpdateLongviewPlanResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateLongviewPlanResponseBodyDefault" (\obj -> GHC.Base.pure UpdateLongviewPlanResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'UpdateLongviewPlanResponseBodyDefault' with all required fields.
mkUpdateLongviewPlanResponseBodyDefault :: UpdateLongviewPlanResponseBodyDefault
mkUpdateLongviewPlanResponseBodyDefault = UpdateLongviewPlanResponseBodyDefault{updateLongviewPlanResponseBodyDefaultErrors = GHC.Maybe.Nothing}
