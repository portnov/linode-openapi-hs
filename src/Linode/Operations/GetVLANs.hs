-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getVLANs
module Linode.Operations.GetVLANs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /networking/vlans
-- 
-- Returns a list of all Virtual Local Area Networks (VLANs) on your Account. VLANs provide
-- a mechanism for secure communication between two or more Linodes that are assigned to the
-- same VLAN and are both within the same Layer 2 broadcast domain.
-- 
-- VLANs are created and attached to Linodes by using the \`interfaces\` property for the following endpoints:
-- 
-- - Linode Create ([POST \/linode\/instances](\/docs\/api\/linode-instances\/\#linode-create))
-- - Configuration Profile Create ([POST \/linode\/instances\/{linodeId}\/configs](\/docs\/api\/linode-instances\/\#configuration-profile-create))
-- - Configuration Profile Update ([PUT \/linode\/instances\/{linodeId}\/configs\/{configId}](\/docs\/api\/linode-instances\/\#configuration-profile-update))
-- 
-- There are several ways to detach a VLAN from a Linode:
-- 
-- - [Update](\/docs\/api\/linode-instances\/\#configuration-profile-update) the active Configuration Profile to remove the VLAN interface, then [reboot](\/docs\/api\/linode-instances\/\#linode-reboot) the Linode.
-- - [Create](\/docs\/api\/linode-instances\/\#configuration-profile-create) a new Configuration Profile without the VLAN interface, then [reboot](\/docs\/api\/linode-instances\/\#linode-reboot) the Linode into the new Configuration Profile.
-- - [Delete](\/docs\/api\/linode-instances\/\#linode-delete) the Linode.
-- 
-- **Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([\/regions](\/docs\/api\/regions\/)) endpoint to view the capabilities of data center regions.
-- If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
-- the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility,
-- you will be prompted to select a different data center or contact support.
-- 
-- **Note:** See our guide on [Getting Started with VLANs](\/docs\/guides\/getting-started-with-vlans\/) to view additional [limitations](\/docs\/guides\/getting-started-with-vlans\/\#limitations).
getVLANs :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe GHC.Integer.Type.Integer                                                                              -- ^ page: The page of a collection to return. | Constraints: Minimum  of 1.0
  -> GHC.Base.Maybe GHC.Integer.Type.Integer                                                                              -- ^ page_size: The number of items to return per page. | Constraints: Maxium  of 100.0, Minimum  of 25.0
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetVLANsResponse)) -- ^ Monad containing the result of the operation
getVLANs config
         page
         page_size = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetVLANsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVLANsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetVLANsResponseBody200)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetVLANsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                 GetVLANsResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/networking/vlans") ((Data.Text.pack "page",
                                                                                                                                                                                                                                                                                                                                                                                                                    Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | > GET /networking/vlans
-- 
-- The same as 'getVLANs' but returns the raw 'Data.ByteString.Char8.ByteString'
getVLANsRaw :: forall m s . (Linode.Common.MonadHTTP m,
                             Linode.Common.SecurityScheme s) =>
               Linode.Common.Configuration s ->
               GHC.Base.Maybe GHC.Integer.Type.Integer ->
               GHC.Base.Maybe GHC.Integer.Type.Integer ->
               m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getVLANsRaw config
            page
            page_size = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/networking/vlans") ((Data.Text.pack "page",
                                                                                                                                                                              Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                       Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | > GET /networking/vlans
-- 
-- Monadic version of 'getVLANs' (use with 'Linode.Common.runWithConfiguration')
getVLANsM :: forall m s . (Linode.Common.MonadHTTP m,
                           Linode.Common.SecurityScheme s) =>
             GHC.Base.Maybe GHC.Integer.Type.Integer ->
             GHC.Base.Maybe GHC.Integer.Type.Integer ->
             Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                m
                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                    (Network.HTTP.Client.Types.Response GetVLANsResponse))
getVLANsM page
          page_size = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetVLANsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVLANsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetVLANsResponseBody200)
                                                                                                                                                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetVLANsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                  GetVLANsResponseBodyDefault)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/networking/vlans") ((Data.Text.pack "page",
                                                                                                                                                                                                                                                                                                                                                                                                               Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | > GET /networking/vlans
-- 
-- Monadic version of 'getVLANsRaw' (use with 'Linode.Common.runWithConfiguration')
getVLANsRawM :: forall m s . (Linode.Common.MonadHTTP m,
                              Linode.Common.SecurityScheme s) =>
                GHC.Base.Maybe GHC.Integer.Type.Integer ->
                GHC.Base.Maybe GHC.Integer.Type.Integer ->
                Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                   m
                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getVLANsRawM page
             page_size = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/networking/vlans") ((Data.Text.pack "page",
                                                                                                                                                                         Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                  Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | Represents a response of the operation 'getVLANs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetVLANsResponseError' is used.
data GetVLANsResponse =                                  
   GetVLANsResponseError GHC.Base.String                 -- ^ Means either no matching case available or a parse error
  | GetVLANsResponse200 GetVLANsResponseBody200          -- ^ The VLANs available on this Account.
  | GetVLANsResponseDefault GetVLANsResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetVLANsResponseBody200
-- 
-- 
data GetVLANsResponseBody200 = GetVLANsResponseBody200 {
  -- | data
  getVLANsResponseBody200Data :: (GHC.Base.Maybe ([] Vlans))
  -- | page
  , getVLANsResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getVLANsResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getVLANsResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVLANsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getVLANsResponseBody200Data obj) : (Data.Aeson..=) "page" (getVLANsResponseBody200Page obj) : (Data.Aeson..=) "pages" (getVLANsResponseBody200Pages obj) : (Data.Aeson..=) "results" (getVLANsResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getVLANsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getVLANsResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getVLANsResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getVLANsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVLANsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVLANsResponseBody200" (\obj -> (((GHC.Base.pure GetVLANsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Defines the data type for the schema GetVLANsResponseBodyDefault
-- 
-- 
data GetVLANsResponseBodyDefault = GetVLANsResponseBodyDefault {
  -- | errors
  getVLANsResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVLANsResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getVLANsResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getVLANsResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetVLANsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVLANsResponseBodyDefault" (\obj -> GHC.Base.pure GetVLANsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
