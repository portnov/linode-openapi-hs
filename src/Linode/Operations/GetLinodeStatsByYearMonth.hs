-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeStatsByYearMonth
module Linode.Operations.GetLinodeStatsByYearMonth where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/stats/{year}/{month}
-- 
-- Returns statistics for a specific month. The year\/month values must be either a date in the past, or the current month. If the current month, statistics will be retrieved for the past 30 days.
getLinodeStatsByYearMonth :: forall m . Linode.Common.MonadHTTP m => GetLinodeStatsByYearMonthParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeStatsByYearMonthResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeStatsByYearMonth parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeStatsByYearMonthResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeStatsByYearMonthResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    LinodeStats)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeStatsByYearMonthResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                      GetLinodeStatsByYearMonthResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeStatsByYearMonthParametersPathLinodeId parameters))) GHC.Base.++ (("/stats/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeStatsByYearMonthParametersPathYear parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeStatsByYearMonthParametersPathMonth parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/stats\/{year}\/{month}.GET.parameters@ in the specification.
-- 
-- 
data GetLinodeStatsByYearMonthParameters = GetLinodeStatsByYearMonthParameters {
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- ID of the Linode to look up.
  getLinodeStatsByYearMonthParametersPathLinodeId :: GHC.Types.Int
  -- | pathMonth: Represents the parameter named \'month\'
  -- 
  -- Numeric value representing the month to look up.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 12.0
  -- * Minimum  of 1.0
  , getLinodeStatsByYearMonthParametersPathMonth :: GHC.Types.Int
  -- | pathYear: Represents the parameter named \'year\'
  -- 
  -- Numeric value representing the year to look up.
  , getLinodeStatsByYearMonthParametersPathYear :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeStatsByYearMonthParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthParametersPathLinodeId obj : "pathMonth" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthParametersPathMonth obj : "pathYear" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthParametersPathYear obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthParametersPathLinodeId obj) GHC.Base.<> (("pathMonth" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthParametersPathMonth obj) GHC.Base.<> ("pathYear" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthParametersPathYear obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeStatsByYearMonthParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeStatsByYearMonthParameters" (\obj -> ((GHC.Base.pure GetLinodeStatsByYearMonthParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathMonth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathYear"))
-- | Create a new 'GetLinodeStatsByYearMonthParameters' with all required fields.
mkGetLinodeStatsByYearMonthParameters :: GHC.Types.Int -- ^ 'getLinodeStatsByYearMonthParametersPathLinodeId'
  -> GHC.Types.Int -- ^ 'getLinodeStatsByYearMonthParametersPathMonth'
  -> GHC.Types.Int -- ^ 'getLinodeStatsByYearMonthParametersPathYear'
  -> GetLinodeStatsByYearMonthParameters
mkGetLinodeStatsByYearMonthParameters getLinodeStatsByYearMonthParametersPathLinodeId getLinodeStatsByYearMonthParametersPathMonth getLinodeStatsByYearMonthParametersPathYear = GetLinodeStatsByYearMonthParameters{getLinodeStatsByYearMonthParametersPathLinodeId = getLinodeStatsByYearMonthParametersPathLinodeId,
                                                                                                                                                                                                                     getLinodeStatsByYearMonthParametersPathMonth = getLinodeStatsByYearMonthParametersPathMonth,
                                                                                                                                                                                                                     getLinodeStatsByYearMonthParametersPathYear = getLinodeStatsByYearMonthParametersPathYear}
-- | Represents a response of the operation 'getLinodeStatsByYearMonth'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeStatsByYearMonthResponseError' is used.
data GetLinodeStatsByYearMonthResponse =
   GetLinodeStatsByYearMonthResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeStatsByYearMonthResponse200 LinodeStats -- ^ The Linode\'s statistics for the requested period.
  | GetLinodeStatsByYearMonthResponseDefault GetLinodeStatsByYearMonthResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeStatsByYearMonthResponseBodyDefault = GetLinodeStatsByYearMonthResponseBodyDefault {
  -- | errors
  getLinodeStatsByYearMonthResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeStatsByYearMonthResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLinodeStatsByYearMonthResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeStatsByYearMonthResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeStatsByYearMonthResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeStatsByYearMonthResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLinodeStatsByYearMonthResponseBodyDefault' with all required fields.
mkGetLinodeStatsByYearMonthResponseBodyDefault :: GetLinodeStatsByYearMonthResponseBodyDefault
mkGetLinodeStatsByYearMonthResponseBodyDefault = GetLinodeStatsByYearMonthResponseBodyDefault{getLinodeStatsByYearMonthResponseBodyDefaultErrors = GHC.Maybe.Nothing}
