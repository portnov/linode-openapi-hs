-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createObjectStorageBucket
module Linode.Operations.CreateObjectStorageBucket where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /object-storage/buckets
-- 
-- Creates an Object Storage Bucket in the cluster specified. If the
-- bucket already exists and is owned by you, this endpoint will return a
-- \`200\` response with that bucket as if it had just been created.
-- 
-- 
-- This endpoint is available for convenience. It is recommended that instead you
-- use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/bucketops\/\#put-bucket) directly.
createObjectStorageBucket :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe CreateObjectStorageBucketRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateObjectStorageBucketResponse)) -- ^ Monad containing the result of the operation
createObjectStorageBucket config
                          body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateObjectStorageBucketResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateObjectStorageBucketResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             ObjectStorageBucket)
                                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateObjectStorageBucketResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               CreateObjectStorageBucketResponseBodyDefault)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /object-storage/buckets
-- 
-- The same as 'createObjectStorageBucket' but returns the raw 'Data.ByteString.Char8.ByteString'
createObjectStorageBucketRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                              Linode.Common.SecurityScheme s) =>
                                Linode.Common.Configuration s ->
                                GHC.Base.Maybe CreateObjectStorageBucketRequestBody ->
                                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createObjectStorageBucketRaw config
                             body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /object-storage/buckets
-- 
-- Monadic version of 'createObjectStorageBucket' (use with 'Linode.Common.runWithConfiguration')
createObjectStorageBucketM :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              GHC.Base.Maybe CreateObjectStorageBucketRequestBody ->
                              Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response CreateObjectStorageBucketResponse))
createObjectStorageBucketM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateObjectStorageBucketResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateObjectStorageBucketResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              ObjectStorageBucket)
                                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateObjectStorageBucketResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                CreateObjectStorageBucketResponseBodyDefault)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /object-storage/buckets
-- 
-- Monadic version of 'createObjectStorageBucketRaw' (use with 'Linode.Common.runWithConfiguration')
createObjectStorageBucketRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                               Linode.Common.SecurityScheme s) =>
                                 GHC.Base.Maybe CreateObjectStorageBucketRequestBody ->
                                 Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                    m
                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createObjectStorageBucketRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/object-storage/buckets") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createObjectStorageBucketRequestBody
-- 
-- 
data CreateObjectStorageBucketRequestBody = CreateObjectStorageBucketRequestBody {
  -- | acl: The Access Control Level of the bucket using a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
  createObjectStorageBucketRequestBodyAcl :: (GHC.Base.Maybe CreateObjectStorageBucketRequestBodyAcl)
  -- | cluster: The ID of the Object Storage Cluster where this bucket should be created.
  , createObjectStorageBucketRequestBodyCluster :: Data.Text.Internal.Text
  -- | cors_enabled: If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
  , createObjectStorageBucketRequestBodyCors_enabled :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | label: The name for this bucket. Must be unique in the cluster you are creating the bucket in, or an error will be returned. Labels will be reserved only for the cluster that active buckets are created and stored in. If you want to reserve this bucket\'s label in another cluster, you must create a new bucket with the same label in the new cluster.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^[a-z0-09][a-z0-9-]*[a-z0-9]?\$\'
  , createObjectStorageBucketRequestBodyLabel :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateObjectStorageBucketRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "acl" (createObjectStorageBucketRequestBodyAcl obj) : (Data.Aeson..=) "cluster" (createObjectStorageBucketRequestBodyCluster obj) : (Data.Aeson..=) "cors_enabled" (createObjectStorageBucketRequestBodyCors_enabled obj) : (Data.Aeson..=) "label" (createObjectStorageBucketRequestBodyLabel obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "acl" (createObjectStorageBucketRequestBodyAcl obj) GHC.Base.<> ((Data.Aeson..=) "cluster" (createObjectStorageBucketRequestBodyCluster obj) GHC.Base.<> ((Data.Aeson..=) "cors_enabled" (createObjectStorageBucketRequestBodyCors_enabled obj) GHC.Base.<> (Data.Aeson..=) "label" (createObjectStorageBucketRequestBodyLabel obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateObjectStorageBucketRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateObjectStorageBucketRequestBody" (\obj -> (((GHC.Base.pure CreateObjectStorageBucketRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cluster")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cors_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label"))
-- | Defines the enum schema createObjectStorageBucketRequestBodyAcl
-- 
-- The Access Control Level of the bucket using a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
data CreateObjectStorageBucketRequestBodyAcl
    = CreateObjectStorageBucketRequestBodyAclEnumOther Data.Aeson.Types.Internal.Value
    | CreateObjectStorageBucketRequestBodyAclEnumTyped Data.Text.Internal.Text
    | CreateObjectStorageBucketRequestBodyAclEnumString_authenticated_read
    | CreateObjectStorageBucketRequestBodyAclEnumString_private
    | CreateObjectStorageBucketRequestBodyAclEnumString_public_read
    | CreateObjectStorageBucketRequestBodyAclEnumString_public_read_write
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateObjectStorageBucketRequestBodyAcl
    where toJSON (CreateObjectStorageBucketRequestBodyAclEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateObjectStorageBucketRequestBodyAclEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateObjectStorageBucketRequestBodyAclEnumString_authenticated_read) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authenticated-read"
          toJSON (CreateObjectStorageBucketRequestBodyAclEnumString_private) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private"
          toJSON (CreateObjectStorageBucketRequestBodyAclEnumString_public_read) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read"
          toJSON (CreateObjectStorageBucketRequestBodyAclEnumString_public_read_write) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read-write"
instance Data.Aeson.FromJSON CreateObjectStorageBucketRequestBodyAcl
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authenticated-read")
                                          then CreateObjectStorageBucketRequestBodyAclEnumString_authenticated_read
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private")
                                                then CreateObjectStorageBucketRequestBodyAclEnumString_private
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read")
                                                      then CreateObjectStorageBucketRequestBodyAclEnumString_public_read
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read-write")
                                                            then CreateObjectStorageBucketRequestBodyAclEnumString_public_read_write
                                                            else CreateObjectStorageBucketRequestBodyAclEnumOther val)
-- | Represents a response of the operation 'createObjectStorageBucket'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateObjectStorageBucketResponseError' is used.
data CreateObjectStorageBucketResponse =                                                   
   CreateObjectStorageBucketResponseError GHC.Base.String                                  -- ^ Means either no matching case available or a parse error
  | CreateObjectStorageBucketResponse200 ObjectStorageBucket                               -- ^ The bucket created successfully.
  | CreateObjectStorageBucketResponseDefault CreateObjectStorageBucketResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateObjectStorageBucketResponseBodyDefault
-- 
-- 
data CreateObjectStorageBucketResponseBodyDefault = CreateObjectStorageBucketResponseBodyDefault {
  -- | errors
  createObjectStorageBucketResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateObjectStorageBucketResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createObjectStorageBucketResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createObjectStorageBucketResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateObjectStorageBucketResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateObjectStorageBucketResponseBodyDefault" (\obj -> GHC.Base.pure CreateObjectStorageBucketResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
