-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPaymentMethods
module Linode.Operations.GetPaymentMethods where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /account/payment-methods
-- 
-- Returns a paginated list of Payment Methods for this Account.
getPaymentMethods :: forall m . Linode.Common.MonadHTTP m => GetPaymentMethodsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetPaymentMethodsResponse) -- ^ Monadic computation which returns the result of the operation
getPaymentMethods parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPaymentMethodsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPaymentMethodsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            GetPaymentMethodsResponseBody200)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetPaymentMethodsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              GetPaymentMethodsResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/payment-methods") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                       Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/account\/payment-methods.GET.parameters@ in the specification.
-- 
-- 
data GetPaymentMethodsParameters = GetPaymentMethodsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getPaymentMethodsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getPaymentMethodsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPaymentMethodsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getPaymentMethodsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getPaymentMethodsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getPaymentMethodsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getPaymentMethodsParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPaymentMethodsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPaymentMethodsParameters" (\obj -> (GHC.Base.pure GetPaymentMethodsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetPaymentMethodsParameters' with all required fields.
mkGetPaymentMethodsParameters :: GetPaymentMethodsParameters
mkGetPaymentMethodsParameters = GetPaymentMethodsParameters{getPaymentMethodsParametersQueryPage = GHC.Maybe.Nothing,
                                                            getPaymentMethodsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getPaymentMethods'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPaymentMethodsResponseError' is used.
data GetPaymentMethodsResponse =
   GetPaymentMethodsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPaymentMethodsResponse200 GetPaymentMethodsResponseBody200 -- ^ Returns a paginated list of Payment Method objects.
  | GetPaymentMethodsResponseDefault GetPaymentMethodsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/account\/payment-methods.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPaymentMethodsResponseBody200 = GetPaymentMethodsResponseBody200 {
  -- | data
  getPaymentMethodsResponseBody200Data :: (GHC.Maybe.Maybe ([PaymentMethod]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getPaymentMethodsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getPaymentMethodsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getPaymentMethodsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPaymentMethodsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPaymentMethodsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPaymentMethodsResponseBody200" (\obj -> (((GHC.Base.pure GetPaymentMethodsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetPaymentMethodsResponseBody200' with all required fields.
mkGetPaymentMethodsResponseBody200 :: GetPaymentMethodsResponseBody200
mkGetPaymentMethodsResponseBody200 = GetPaymentMethodsResponseBody200{getPaymentMethodsResponseBody200Data = GHC.Maybe.Nothing,
                                                                      getPaymentMethodsResponseBody200Page = GHC.Maybe.Nothing,
                                                                      getPaymentMethodsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                      getPaymentMethodsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPaymentMethodsResponseBodyDefault = GetPaymentMethodsResponseBodyDefault {
  -- | errors
  getPaymentMethodsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPaymentMethodsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getPaymentMethodsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetPaymentMethodsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPaymentMethodsResponseBodyDefault" (\obj -> GHC.Base.pure GetPaymentMethodsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetPaymentMethodsResponseBodyDefault' with all required fields.
mkGetPaymentMethodsResponseBodyDefault :: GetPaymentMethodsResponseBodyDefault
mkGetPaymentMethodsResponseBodyDefault = GetPaymentMethodsResponseBodyDefault{getPaymentMethodsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
