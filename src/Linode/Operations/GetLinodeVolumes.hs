-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeVolumes
module Linode.Operations.GetLinodeVolumes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/volumes
-- 
-- View Block Storage Volumes attached to this Linode.
getLinodeVolumes :: forall m . Linode.Common.MonadHTTP m => GetLinodeVolumesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeVolumesResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeVolumes parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeVolumesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeVolumesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetLinodeVolumesResponseBody200)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeVolumesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           GetLinodeVolumesResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeVolumesParametersPathLinodeId parameters))) GHC.Base.++ "/volumes"))) [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinodeVolumesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
inode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinodeVolumesParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/volumes.GET.parameters@ in the specification.
-- 
-- 
data GetLinodeVolumesParameters = GetLinodeVolumesParameters {
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- ID of the Linode to look up.
  getLinodeVolumesParametersPathLinodeId :: GHC.Types.Int
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  , getLinodeVolumesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getLinodeVolumesParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeVolumesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeVolumesParametersPathLinodeId obj : "queryPage" Data.Aeson.Types.ToJSON..= getLinodeVolumesParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getLinodeVolumesParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeVolumesParametersPathLinodeId obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= getLinodeVolumesParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getLinodeVolumesParametersQueryPageSize obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeVolumesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeVolumesParameters" (\obj -> ((GHC.Base.pure GetLinodeVolumesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetLinodeVolumesParameters' with all required fields.
mkGetLinodeVolumesParameters :: GHC.Types.Int -- ^ 'getLinodeVolumesParametersPathLinodeId'
  -> GetLinodeVolumesParameters
mkGetLinodeVolumesParameters getLinodeVolumesParametersPathLinodeId = GetLinodeVolumesParameters{getLinodeVolumesParametersPathLinodeId = getLinodeVolumesParametersPathLinodeId,
                                                                                                 getLinodeVolumesParametersQueryPage = GHC.Maybe.Nothing,
                                                                                                 getLinodeVolumesParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getLinodeVolumes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeVolumesResponseError' is used.
data GetLinodeVolumesResponse =
   GetLinodeVolumesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeVolumesResponse200 GetLinodeVolumesResponseBody200 -- ^ Returns an array of Block Storage Volumes attached to this Linode. 
  | GetLinodeVolumesResponseDefault GetLinodeVolumesResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/volumes.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeVolumesResponseBody200 = GetLinodeVolumesResponseBody200 {
  -- | data
  getLinodeVolumesResponseBody200Data :: (GHC.Maybe.Maybe ([Volume]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLinodeVolumesResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLinodeVolumesResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLinodeVolumesResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeVolumesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeVolumesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeVolumesResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeVolumesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLinodeVolumesResponseBody200' with all required fields.
mkGetLinodeVolumesResponseBody200 :: GetLinodeVolumesResponseBody200
mkGetLinodeVolumesResponseBody200 = GetLinodeVolumesResponseBody200{getLinodeVolumesResponseBody200Data = GHC.Maybe.Nothing,
                                                                    getLinodeVolumesResponseBody200Page = GHC.Maybe.Nothing,
                                                                    getLinodeVolumesResponseBody200Pages = GHC.Maybe.Nothing,
                                                                    getLinodeVolumesResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeVolumesResponseBodyDefault = GetLinodeVolumesResponseBodyDefault {
  -- | errors
  getLinodeVolumesResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeVolumesResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLinodeVolumesResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeVolumesResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeVolumesResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeVolumesResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLinodeVolumesResponseBodyDefault' with all required fields.
mkGetLinodeVolumesResponseBodyDefault :: GetLinodeVolumesResponseBodyDefault
mkGetLinodeVolumesResponseBodyDefault = GetLinodeVolumesResponseBodyDefault{getLinodeVolumesResponseBodyDefaultErrors = GHC.Maybe.Nothing}
