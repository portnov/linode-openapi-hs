-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLKEVersions
module Linode.Operations.GetLKEVersions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /lke/versions
-- 
-- List the Kubernetes versions available for deployment to a Kubernetes cluster.
getLKEVersions :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLKEVersionsResponse) -- ^ Monadic computation which returns the result of the operation
getLKEVersions = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLKEVersionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLKEVersionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                        GetLKEVersionsResponseBody200)
                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLKEVersionsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                          GetLKEVersionsResponseBodyDefault)
                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/versions") GHC.Base.mempty)
-- | Represents a response of the operation 'getLKEVersions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLKEVersionsResponseError' is used.
data GetLKEVersionsResponse =
   GetLKEVersionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLKEVersionsResponse200 GetLKEVersionsResponseBody200 -- ^ Returns a list of Kubernetes versions available for deployment to a Kubernetes cluster. 
  | GetLKEVersionsResponseDefault GetLKEVersionsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/lke\/versions.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLKEVersionsResponseBody200 = GetLKEVersionsResponseBody200 {
  -- | data
  getLKEVersionsResponseBody200Data :: (GHC.Maybe.Maybe ([LKEVersion]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLKEVersionsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLKEVersionsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLKEVersionsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLKEVersionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEVersionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEVersionsResponseBody200" (\obj -> (((GHC.Base.pure GetLKEVersionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLKEVersionsResponseBody200' with all required fields.
mkGetLKEVersionsResponseBody200 :: GetLKEVersionsResponseBody200
mkGetLKEVersionsResponseBody200 = GetLKEVersionsResponseBody200{getLKEVersionsResponseBody200Data = GHC.Maybe.Nothing,
                                                                getLKEVersionsResponseBody200Page = GHC.Maybe.Nothing,
                                                                getLKEVersionsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                getLKEVersionsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLKEVersionsResponseBodyDefault = GetLKEVersionsResponseBodyDefault {
  -- | errors
  getLKEVersionsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLKEVersionsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLKEVersionsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEVersionsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEVersionsResponseBodyDefault" (\obj -> GHC.Base.pure GetLKEVersionsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLKEVersionsResponseBodyDefault' with all required fields.
mkGetLKEVersionsResponseBodyDefault :: GetLKEVersionsResponseBodyDefault
mkGetLKEVersionsResponseBodyDefault = GetLKEVersionsResponseBodyDefault{getLKEVersionsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
