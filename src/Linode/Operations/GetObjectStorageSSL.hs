-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getObjectStorageSSL
module Linode.Operations.GetObjectStorageSSL where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /object-storage/buckets/{clusterId}/{bucket}/ssl
-- 
-- Returns a boolean value indicating if this bucket has a corresponding TLS\/SSL certificate that was
-- uploaded by an Account user.
getObjectStorageSSL :: forall m . Linode.Common.MonadHTTP m => GetObjectStorageSSLParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetObjectStorageSSLResponse) -- ^ Monadic computation which returns the result of the operation
getObjectStorageSSL parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetObjectStorageSSLResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageSSLResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  ObjectStorageSSLResponse)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageSSLResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    GetObjectStorageSSLResponseBodyDefault)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack (("/object-storage/buckets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getObjectStorageSSLParametersPathClusterId parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getObjectStorageSSLParametersPathBucket parameters))) GHC.Base.++ "/ssl"))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/ssl.GET.parameters@ in the specification.
-- 
-- 
data GetObjectStorageSSLParameters = GetObjectStorageSSLParameters {
  -- | pathBucket: Represents the parameter named \'bucket\'
  -- 
  -- The bucket name.
  getObjectStorageSSLParametersPathBucket :: Data.Text.Internal.Text
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- The ID of the cluster this bucket exists in.
  , getObjectStorageSSLParametersPathClusterId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetObjectStorageSSLParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathBucket" Data.Aeson.Types.ToJSON..= getObjectStorageSSLParametersPathBucket obj : "pathClusterId" Data.Aeson.Types.ToJSON..= getObjectStorageSSLParametersPathClusterId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathBucket" Data.Aeson.Types.ToJSON..= getObjectStorageSSLParametersPathBucket obj) GHC.Base.<> ("pathClusterId" Data.Aeson.Types.ToJSON..= getObjectStorageSSLParametersPathClusterId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageSSLParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageSSLParameters" (\obj -> (GHC.Base.pure GetObjectStorageSSLParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathBucket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId"))
-- | Create a new 'GetObjectStorageSSLParameters' with all required fields.
mkGetObjectStorageSSLParameters :: Data.Text.Internal.Text -- ^ 'getObjectStorageSSLParametersPathBucket'
  -> Data.Text.Internal.Text -- ^ 'getObjectStorageSSLParametersPathClusterId'
  -> GetObjectStorageSSLParameters
mkGetObjectStorageSSLParameters getObjectStorageSSLParametersPathBucket getObjectStorageSSLParametersPathClusterId = GetObjectStorageSSLParameters{getObjectStorageSSLParametersPathBucket = getObjectStorageSSLParametersPathBucket,
                                                                                                                                                   getObjectStorageSSLParametersPathClusterId = getObjectStorageSSLParametersPathClusterId}
-- | Represents a response of the operation 'getObjectStorageSSL'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetObjectStorageSSLResponseError' is used.
data GetObjectStorageSSLResponse =
   GetObjectStorageSSLResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetObjectStorageSSLResponse200 ObjectStorageSSLResponse -- ^ Returns a boolean value indicating if this bucket has a corresponding TLS\/SSL certificate that was uploaded by an Account user. 
  | GetObjectStorageSSLResponseDefault GetObjectStorageSSLResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetObjectStorageSSLResponseBodyDefault = GetObjectStorageSSLResponseBodyDefault {
  -- | errors
  getObjectStorageSSLResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetObjectStorageSSLResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getObjectStorageSSLResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getObjectStorageSSLResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageSSLResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageSSLResponseBodyDefault" (\obj -> GHC.Base.pure GetObjectStorageSSLResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetObjectStorageSSLResponseBodyDefault' with all required fields.
mkGetObjectStorageSSLResponseBodyDefault :: GetObjectStorageSSLResponseBodyDefault
mkGetObjectStorageSSLResponseBodyDefault = GetObjectStorageSSLResponseBodyDefault{getObjectStorageSSLResponseBodyDefaultErrors = GHC.Maybe.Nothing}
