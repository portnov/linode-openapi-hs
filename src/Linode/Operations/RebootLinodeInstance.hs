-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation rebootLinodeInstance
module Linode.Operations.RebootLinodeInstance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/reboot
-- 
-- Reboots a Linode you have permission to modify. If any actions are currently running or queued, those actions must be completed first before you can initiate a reboot.
rebootLinodeInstance :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ linodeId: ID of the linode to reboot.
  -> GHC.Maybe.Maybe RebootLinodeInstanceRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response RebootLinodeInstanceResponse) -- ^ Monadic computation which returns the result of the operation
rebootLinodeInstance linodeId
                     body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RebootLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RebootLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Internal.Object)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RebootLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 RebootLinodeInstanceResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel linodeId)) GHC.Base.++ "/reboot"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/reboot.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data RebootLinodeInstanceRequestBody = RebootLinodeInstanceRequestBody {
  -- | config_id: The Linode Config ID to reboot into.  If null or omitted, the last booted config will be used.  If there was no last booted config and this Linode only has one config, it will be used.  If a config cannot be determined, an error will be returned.
  rebootLinodeInstanceRequestBodyConfigId :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebootLinodeInstanceRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("config_id" Data.Aeson.Types.ToJSON..= rebootLinodeInstanceRequestBodyConfigId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("config_id" Data.Aeson.Types.ToJSON..= rebootLinodeInstanceRequestBodyConfigId obj)
instance Data.Aeson.Types.FromJSON.FromJSON RebootLinodeInstanceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebootLinodeInstanceRequestBody" (\obj -> GHC.Base.pure RebootLinodeInstanceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "config_id"))
-- | Create a new 'RebootLinodeInstanceRequestBody' with all required fields.
mkRebootLinodeInstanceRequestBody :: RebootLinodeInstanceRequestBody
mkRebootLinodeInstanceRequestBody = RebootLinodeInstanceRequestBody{rebootLinodeInstanceRequestBodyConfigId = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'rebootLinodeInstance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RebootLinodeInstanceResponseError' is used.
data RebootLinodeInstanceResponse =
   RebootLinodeInstanceResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | RebootLinodeInstanceResponse200 Data.Aeson.Types.Internal.Object -- ^ Reboot started.
  | RebootLinodeInstanceResponseDefault RebootLinodeInstanceResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data RebootLinodeInstanceResponseBodyDefault = RebootLinodeInstanceResponseBodyDefault {
  -- | errors
  rebootLinodeInstanceResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebootLinodeInstanceResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= rebootLinodeInstanceResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= rebootLinodeInstanceResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON RebootLinodeInstanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebootLinodeInstanceResponseBodyDefault" (\obj -> GHC.Base.pure RebootLinodeInstanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'RebootLinodeInstanceResponseBodyDefault' with all required fields.
mkRebootLinodeInstanceResponseBodyDefault :: RebootLinodeInstanceResponseBodyDefault
mkRebootLinodeInstanceResponseBodyDefault = RebootLinodeInstanceResponseBodyDefault{rebootLinodeInstanceResponseBodyDefaultErrors = GHC.Maybe.Nothing}
