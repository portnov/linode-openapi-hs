-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation updateDomainRecord
module Linode.Operations.UpdateDomainRecord where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > PUT /domains/{domainId}/records/{recordId}
-- 
-- Updates a single Record on this Domain.
updateDomainRecord :: forall m . Linode.Common.MonadHTTP m => UpdateDomainRecordParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> DomainRecord -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response UpdateDomainRecordResponse) -- ^ Monadic computation which returns the result of the operation
updateDomainRecord parameters
                   body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateDomainRecordResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateDomainRecordResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         DomainRecord)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateDomainRecordResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           UpdateDomainRecordResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/domains/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (updateDomainRecordParametersPathDomainId parameters))) GHC.Base.++ ("/records/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (updateDomainRecordParametersPathRecordId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/domains\/{domainId}\/records\/{recordId}.PUT.parameters@ in the specification.
-- 
-- 
data UpdateDomainRecordParameters = UpdateDomainRecordParameters {
  -- | pathDomainId: Represents the parameter named \'domainId\'
  -- 
  -- The ID of the Domain whose Record you are accessing.
  updateDomainRecordParametersPathDomainId :: GHC.Types.Int
  -- | pathRecordId: Represents the parameter named \'recordId\'
  -- 
  -- The ID of the Record you are accessing.
  , updateDomainRecordParametersPathRecordId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateDomainRecordParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathDomainId" Data.Aeson.Types.ToJSON..= updateDomainRecordParametersPathDomainId obj : "pathRecordId" Data.Aeson.Types.ToJSON..= updateDomainRecordParametersPathRecordId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathDomainId" Data.Aeson.Types.ToJSON..= updateDomainRecordParametersPathDomainId obj) GHC.Base.<> ("pathRecordId" Data.Aeson.Types.ToJSON..= updateDomainRecordParametersPathRecordId obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateDomainRecordParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateDomainRecordParameters" (\obj -> (GHC.Base.pure UpdateDomainRecordParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDomainId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRecordId"))
-- | Create a new 'UpdateDomainRecordParameters' with all required fields.
mkUpdateDomainRecordParameters :: GHC.Types.Int -- ^ 'updateDomainRecordParametersPathDomainId'
  -> GHC.Types.Int -- ^ 'updateDomainRecordParametersPathRecordId'
  -> UpdateDomainRecordParameters
mkUpdateDomainRecordParameters updateDomainRecordParametersPathDomainId updateDomainRecordParametersPathRecordId = UpdateDomainRecordParameters{updateDomainRecordParametersPathDomainId = updateDomainRecordParametersPathDomainId,
                                                                                                                                                updateDomainRecordParametersPathRecordId = updateDomainRecordParametersPathRecordId}
-- | Represents a response of the operation 'updateDomainRecord'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateDomainRecordResponseError' is used.
data UpdateDomainRecordResponse =
   UpdateDomainRecordResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | UpdateDomainRecordResponse200 DomainRecord -- ^ Domain Record updated.
  | UpdateDomainRecordResponseDefault UpdateDomainRecordResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data UpdateDomainRecordResponseBodyDefault = UpdateDomainRecordResponseBodyDefault {
  -- | errors
  updateDomainRecordResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON UpdateDomainRecordResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= updateDomainRecordResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= updateDomainRecordResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON UpdateDomainRecordResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateDomainRecordResponseBodyDefault" (\obj -> GHC.Base.pure UpdateDomainRecordResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'UpdateDomainRecordResponseBodyDefault' with all required fields.
mkUpdateDomainRecordResponseBodyDefault :: UpdateDomainRecordResponseBodyDefault
mkUpdateDomainRecordResponseBodyDefault = UpdateDomainRecordResponseBodyDefault{updateDomainRecordResponseBodyDefaultErrors = GHC.Maybe.Nothing}
