-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getSSHKeys
module Linode.Operations.GetSSHKeys where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /profile/sshkeys
-- 
-- Returns a collection of SSH Keys you\'ve added to your Profile.
getSSHKeys :: forall m . Linode.Common.MonadHTTP m => GetSSHKeysParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetSSHKeysResponse) -- ^ Monadic computation which returns the result of the operation
getSSHKeys parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetSSHKeysResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSSHKeysResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       GetSSHKeysResponseBody200)
                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetSSHKeysResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         GetSSHKeysResponseBodyDefault)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/profile/sshkeys") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSSHKeysParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                 Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSSHKeysParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/profile\/sshkeys.GET.parameters@ in the specification.
-- 
-- 
data GetSSHKeysParameters = GetSSHKeysParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getSSHKeysParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getSSHKeysParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSSHKeysParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getSSHKeysParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getSSHKeysParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getSSHKeysParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getSSHKeysParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetSSHKeysParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSSHKeysParameters" (\obj -> (GHC.Base.pure GetSSHKeysParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetSSHKeysParameters' with all required fields.
mkGetSSHKeysParameters :: GetSSHKeysParameters
mkGetSSHKeysParameters = GetSSHKeysParameters{getSSHKeysParametersQueryPage = GHC.Maybe.Nothing,
                                              getSSHKeysParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getSSHKeys'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSSHKeysResponseError' is used.
data GetSSHKeysResponse =
   GetSSHKeysResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetSSHKeysResponse200 GetSSHKeysResponseBody200 -- ^ Returns a paginated list of SSH Key objects.
  | GetSSHKeysResponseDefault GetSSHKeysResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/profile\/sshkeys.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSSHKeysResponseBody200 = GetSSHKeysResponseBody200 {
  -- | data
  getSSHKeysResponseBody200Data :: (GHC.Maybe.Maybe ([SSHKey]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getSSHKeysResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getSSHKeysResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getSSHKeysResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSSHKeysResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetSSHKeysResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSSHKeysResponseBody200" (\obj -> (((GHC.Base.pure GetSSHKeysResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetSSHKeysResponseBody200' with all required fields.
mkGetSSHKeysResponseBody200 :: GetSSHKeysResponseBody200
mkGetSSHKeysResponseBody200 = GetSSHKeysResponseBody200{getSSHKeysResponseBody200Data = GHC.Maybe.Nothing,
                                                        getSSHKeysResponseBody200Page = GHC.Maybe.Nothing,
                                                        getSSHKeysResponseBody200Pages = GHC.Maybe.Nothing,
                                                        getSSHKeysResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSSHKeysResponseBodyDefault = GetSSHKeysResponseBodyDefault {
  -- | errors
  getSSHKeysResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSSHKeysResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getSSHKeysResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetSSHKeysResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSSHKeysResponseBodyDefault" (\obj -> GHC.Base.pure GetSSHKeysResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetSSHKeysResponseBodyDefault' with all required fields.
mkGetSSHKeysResponseBodyDefault :: GetSSHKeysResponseBodyDefault
mkGetSSHKeysResponseBodyDefault = GetSSHKeysResponseBodyDefault{getSSHKeysResponseBodyDefaultErrors = GHC.Maybe.Nothing}
