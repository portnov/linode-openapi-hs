-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTickets
module Linode.Operations.GetTickets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /support/tickets
-- 
-- Returns a collection of Support Tickets on your Account. Support Tickets can be both tickets you open with Linode for support, as well as tickets generated by Linode regarding your Account.
-- This collection includes all Support Tickets generated on your Account, with open tickets returned first.
getTickets :: forall m . Linode.Common.MonadHTTP m => GetTicketsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetTicketsResponse) -- ^ Monadic computation which returns the result of the operation
getTickets parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTicketsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTicketsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       GetTicketsResponseBody200)
                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetTicketsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         GetTicketsResponseBodyDefault)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/support/tickets") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTicketsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                 Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTicketsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/support\/tickets.GET.parameters@ in the specification.
-- 
-- 
data GetTicketsParameters = GetTicketsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getTicketsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getTicketsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTicketsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getTicketsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getTicketsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getTicketsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getTicketsParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetTicketsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTicketsParameters" (\obj -> (GHC.Base.pure GetTicketsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetTicketsParameters' with all required fields.
mkGetTicketsParameters :: GetTicketsParameters
mkGetTicketsParameters = GetTicketsParameters{getTicketsParametersQueryPage = GHC.Maybe.Nothing,
                                              getTicketsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getTickets'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTicketsResponseError' is used.
data GetTicketsResponse =
   GetTicketsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTicketsResponse200 GetTicketsResponseBody200 -- ^ Returns a paginated list of SupportTicket objects.
  | GetTicketsResponseDefault GetTicketsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/support\/tickets.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTicketsResponseBody200 = GetTicketsResponseBody200 {
  -- | data
  getTicketsResponseBody200Data :: (GHC.Maybe.Maybe ([SupportTicket]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getTicketsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getTicketsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getTicketsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTicketsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getTicketsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetTicketsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTicketsResponseBody200" (\obj -> (((GHC.Base.pure GetTicketsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetTicketsResponseBody200' with all required fields.
mkGetTicketsResponseBody200 :: GetTicketsResponseBody200
mkGetTicketsResponseBody200 = GetTicketsResponseBody200{getTicketsResponseBody200Data = GHC.Maybe.Nothing,
                                                        getTicketsResponseBody200Page = GHC.Maybe.Nothing,
                                                        getTicketsResponseBody200Pages = GHC.Maybe.Nothing,
                                                        getTicketsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTicketsResponseBodyDefault = GetTicketsResponseBodyDefault {
  -- | errors
  getTicketsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTicketsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getTicketsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getTicketsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetTicketsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTicketsResponseBodyDefault" (\obj -> GHC.Base.pure GetTicketsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetTicketsResponseBodyDefault' with all required fields.
mkGetTicketsResponseBodyDefault :: GetTicketsResponseBodyDefault
mkGetTicketsResponseBodyDefault = GetTicketsResponseBodyDefault{getTicketsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
