-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLKEClusterNode
module Linode.Operations.GetLKEClusterNode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /lke/clusters/{clusterId}/nodes/{nodeId}
-- 
-- Returns the values for a specified node object.
getLKEClusterNode :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLKEClusterNodeResponse)) -- ^ Monad containing the result of the operation
getLKEClusterNode config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLKEClusterNodeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterNodeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetLKEClusterNodeResponseBody200)
                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterNodeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetLKEClusterNodeResponseBodyDefault)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/nodes/{nodeId}") [])
-- | > GET /lke/clusters/{clusterId}/nodes/{nodeId}
-- 
-- The same as 'getLKEClusterNode' but returns the raw 'Data.ByteString.Char8.ByteString'
getLKEClusterNodeRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                      Linode.Common.SecurityScheme s) =>
                        Linode.Common.Configuration s ->
                        m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLKEClusterNodeRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/nodes/{nodeId}") [])
-- | > GET /lke/clusters/{clusterId}/nodes/{nodeId}
-- 
-- Monadic version of 'getLKEClusterNode' (use with 'Linode.Common.runWithConfiguration')
getLKEClusterNodeM :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response GetLKEClusterNodeResponse))
getLKEClusterNodeM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLKEClusterNodeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterNodeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetLKEClusterNodeResponseBody200)
                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterNodeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                   GetLKEClusterNodeResponseBodyDefault)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/nodes/{nodeId}") [])
-- | > GET /lke/clusters/{clusterId}/nodes/{nodeId}
-- 
-- Monadic version of 'getLKEClusterNodeRaw' (use with 'Linode.Common.runWithConfiguration')
getLKEClusterNodeRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                       Linode.Common.SecurityScheme s) =>
                         Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLKEClusterNodeRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/nodes/{nodeId}") [])
-- | Represents a response of the operation 'getLKEClusterNode'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLKEClusterNodeResponseError' is used.
data GetLKEClusterNodeResponse =                                           
   GetLKEClusterNodeResponseError GHC.Base.String                          -- ^ Means either no matching case available or a parse error
  | GetLKEClusterNodeResponse200 GetLKEClusterNodeResponseBody200          -- ^ Returns the values of a node object in the form that it appears currently in the node pool array.
  | GetLKEClusterNodeResponseDefault GetLKEClusterNodeResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLKEClusterNodeResponseBody200
-- 
-- 
data GetLKEClusterNodeResponseBody200 = GetLKEClusterNodeResponseBody200 {
  -- | data: The selected node in the cluster.
  getLKEClusterNodeResponseBody200Data :: (GHC.Base.Maybe GetLKEClusterNodeResponseBody200Data)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterNodeResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getLKEClusterNodeResponseBody200Data obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getLKEClusterNodeResponseBody200Data obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterNodeResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterNodeResponseBody200" (\obj -> GHC.Base.pure GetLKEClusterNodeResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data"))
-- | Defines the data type for the schema GetLKEClusterNodeResponseBody200Data
-- 
-- The selected node in the cluster.
data GetLKEClusterNodeResponseBody200Data = GetLKEClusterNodeResponseBody200Data {
  -- | id: The Node\'s ID.
  getLKEClusterNodeResponseBody200DataId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | instance_id: The Linode\'s ID. If no Linode is currently provisioned for this Node, this is \`null\`.
  , getLKEClusterNodeResponseBody200DataInstance_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | status: The creation status of this Node. This status is distinct from this Node\'s readiness as a Kubernetes Node Object as determined by the command \`kubectl get nodes\`.
  -- 
  -- \`not_ready\` indicates that the Linode is still being created.
  -- 
  -- \`ready\` indicates that the Linode has successfully been created and is running Kubernetes software.
  , getLKEClusterNodeResponseBody200DataStatus :: (GHC.Base.Maybe GetLKEClusterNodeResponseBody200DataStatus)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterNodeResponseBody200Data
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getLKEClusterNodeResponseBody200DataId obj) : (Data.Aeson..=) "instance_id" (getLKEClusterNodeResponseBody200DataInstance_id obj) : (Data.Aeson..=) "status" (getLKEClusterNodeResponseBody200DataStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getLKEClusterNodeResponseBody200DataId obj) GHC.Base.<> ((Data.Aeson..=) "instance_id" (getLKEClusterNodeResponseBody200DataInstance_id obj) GHC.Base.<> (Data.Aeson..=) "status" (getLKEClusterNodeResponseBody200DataStatus obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterNodeResponseBody200Data
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterNodeResponseBody200Data" (\obj -> ((GHC.Base.pure GetLKEClusterNodeResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "instance_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the enum schema GetLKEClusterNodeResponseBody200DataStatus
-- 
-- The creation status of this Node. This status is distinct from this Node\'s readiness as a Kubernetes Node Object as determined by the command \`kubectl get nodes\`.
-- 
-- \`not_ready\` indicates that the Linode is still being created.
-- 
-- \`ready\` indicates that the Linode has successfully been created and is running Kubernetes software.
data GetLKEClusterNodeResponseBody200DataStatus
    = GetLKEClusterNodeResponseBody200DataStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetLKEClusterNodeResponseBody200DataStatusEnumTyped Data.Text.Internal.Text
    | GetLKEClusterNodeResponseBody200DataStatusEnumString_not_ready
    | GetLKEClusterNodeResponseBody200DataStatusEnumString_ready
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterNodeResponseBody200DataStatus
    where toJSON (GetLKEClusterNodeResponseBody200DataStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLKEClusterNodeResponseBody200DataStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLKEClusterNodeResponseBody200DataStatusEnumString_not_ready) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "not_ready"
          toJSON (GetLKEClusterNodeResponseBody200DataStatusEnumString_ready) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ready"
instance Data.Aeson.FromJSON GetLKEClusterNodeResponseBody200DataStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "not_ready")
                                          then GetLKEClusterNodeResponseBody200DataStatusEnumString_not_ready
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ready")
                                                then GetLKEClusterNodeResponseBody200DataStatusEnumString_ready
                                                else GetLKEClusterNodeResponseBody200DataStatusEnumOther val)
-- | Defines the data type for the schema GetLKEClusterNodeResponseBodyDefault
-- 
-- 
data GetLKEClusterNodeResponseBodyDefault = GetLKEClusterNodeResponseBodyDefault {
  -- | errors
  getLKEClusterNodeResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterNodeResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getLKEClusterNodeResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getLKEClusterNodeResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterNodeResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterNodeResponseBodyDefault" (\obj -> GHC.Base.pure GetLKEClusterNodeResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
