-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createManagedCredential
module Linode.Operations.CreateManagedCredential where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /managed/credentials
-- 
-- Creates a Managed Credential. A Managed Credential is stored securely to allow Linode special forces to access your Managed Services and resolve issues.
createManagedCredential :: forall m . Linode.Common.MonadHTTP m => GHC.Maybe.Maybe CreateManagedCredentialRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreateManagedCredentialResponse) -- ^ Monadic computation which returns the result of the operation
createManagedCredential body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateManagedCredentialResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateManagedCredentialResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        ManagedCredential)
                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateManagedCredentialResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                          CreateManagedCredentialResponseBodyDefault)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/managed/credentials") GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/managed\/credentials.POST.requestBody.content.application\/json.schema.allOf@ in the specification.
-- 
-- 
data CreateManagedCredentialRequestBody = CreateManagedCredentialRequestBody {
  -- | id: This Credential\'s unique ID.
  createManagedCredentialRequestBodyId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The unique label for this Credential. This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 75
  -- * Minimum length of 2
  -- * Must match pattern \'[a-zA-Z0-9-_ \\.]{2,75}\'
  , createManagedCredentialRequestBodyLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | last_decrypted: The date this Credential was last decrypted by a member of Linode special forces.
  , createManagedCredentialRequestBodyLastDecrypted :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | password: The password to use when accessing the Managed Service.
  , createManagedCredentialRequestBodyPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | username: The username to use when accessing the Managed Service.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  -- * Minimum length of 0
  , createManagedCredentialRequestBodyUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateManagedCredentialRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyId obj : "label" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyLabel obj : "last_decrypted" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyLastDecrypted obj : "password" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyPassword obj : "username" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyUsername obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyLabel obj) GHC.Base.<> (("last_decrypted" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyLastDecrypted obj) GHC.Base.<> (("password" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyPassword obj) GHC.Base.<> ("username" Data.Aeson.Types.ToJSON..= createManagedCredentialRequestBodyUsername obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateManagedCredentialRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateManagedCredentialRequestBody" (\obj -> ((((GHC.Base.pure CreateManagedCredentialRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_decrypted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))
-- | Create a new 'CreateManagedCredentialRequestBody' with all required fields.
mkCreateManagedCredentialRequestBody :: CreateManagedCredentialRequestBody
mkCreateManagedCredentialRequestBody = CreateManagedCredentialRequestBody{createManagedCredentialRequestBodyId = GHC.Maybe.Nothing,
                                                                          createManagedCredentialRequestBodyLabel = GHC.Maybe.Nothing,
                                                                          createManagedCredentialRequestBodyLastDecrypted = GHC.Maybe.Nothing,
                                                                          createManagedCredentialRequestBodyPassword = GHC.Maybe.Nothing,
                                                                          createManagedCredentialRequestBodyUsername = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'createManagedCredential'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateManagedCredentialResponseError' is used.
data CreateManagedCredentialResponse =
   CreateManagedCredentialResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateManagedCredentialResponse200 ManagedCredential -- ^ Credential created.
  | CreateManagedCredentialResponseDefault CreateManagedCredentialResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateManagedCredentialResponseBodyDefault = CreateManagedCredentialResponseBodyDefault {
  -- | errors
  createManagedCredentialResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateManagedCredentialResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createManagedCredentialResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createManagedCredentialResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateManagedCredentialResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateManagedCredentialResponseBodyDefault" (\obj -> GHC.Base.pure CreateManagedCredentialResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreateManagedCredentialResponseBodyDefault' with all required fields.
mkCreateManagedCredentialResponseBodyDefault :: CreateManagedCredentialResponseBodyDefault
mkCreateManagedCredentialResponseBodyDefault = CreateManagedCredentialResponseBodyDefault{createManagedCredentialResponseBodyDefaultErrors = GHC.Maybe.Nothing}
