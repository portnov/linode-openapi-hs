-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation rebuildNodeBalancerConfig
module Linode.Operations.RebuildNodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild
-- 
-- Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.
rebuildNodeBalancerConfig :: forall m . Linode.Common.MonadHTTP m => RebuildNodeBalancerConfigParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> RebuildNodeBalancerConfigRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response RebuildNodeBalancerConfigResponse) -- ^ Monadic computation which returns the result of the operation
rebuildNodeBalancerConfig parameters
                          body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RebuildNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RebuildNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              NodeBalancer)
                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RebuildNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                RebuildNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack (("/nodebalancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (rebuildNodeBalancerConfigParametersPathNodeBalancerId parameters))) GHC.Base.++ "/configs/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (rebuildNodeBalancerConfigParametersPathConfigId parameters))) GHC.Base.++ "/rebuild"))) GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.parameters@ in the specification.
-- 
-- 
data RebuildNodeBalancerConfigParameters = RebuildNodeBalancerConfigParameters {
  -- | pathConfigId: Represents the parameter named \'configId\'
  -- 
  -- The ID of the Config to access.
  rebuildNodeBalancerConfigParametersPathConfigId :: GHC.Types.Int
  -- | pathNodeBalancerId: Represents the parameter named \'nodeBalancerId\'
  -- 
  -- The ID of the NodeBalancer to access.
  , rebuildNodeBalancerConfigParametersPathNodeBalancerId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathConfigId" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigParametersPathConfigId obj : "pathNodeBalancerId" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigParametersPathNodeBalancerId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathConfigId" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigParametersPathConfigId obj) GHC.Base.<> ("pathNodeBalancerId" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigParametersPathNodeBalancerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigParameters" (\obj -> (GHC.Base.pure RebuildNodeBalancerConfigParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathConfigId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNodeBalancerId"))
-- | Create a new 'RebuildNodeBalancerConfigParameters' with all required fields.
mkRebuildNodeBalancerConfigParameters :: GHC.Types.Int -- ^ 'rebuildNodeBalancerConfigParametersPathConfigId'
  -> GHC.Types.Int -- ^ 'rebuildNodeBalancerConfigParametersPathNodeBalancerId'
  -> RebuildNodeBalancerConfigParameters
mkRebuildNodeBalancerConfigParameters rebuildNodeBalancerConfigParametersPathConfigId rebuildNodeBalancerConfigParametersPathNodeBalancerId = RebuildNodeBalancerConfigParameters{rebuildNodeBalancerConfigParametersPathConfigId = rebuildNodeBalancerConfigParametersPathConfigId,
                                                                                                                                                                                  rebuildNodeBalancerConfigParametersPathNodeBalancerId = rebuildNodeBalancerConfigParametersPathNodeBalancerId}
-- | Defines the object schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf@ in the specification.
-- 
-- 
data RebuildNodeBalancerConfigRequestBody = RebuildNodeBalancerConfigRequestBody {
  -- | algorithm: What algorithm this NodeBalancer should use for routing traffic to backends.
  rebuildNodeBalancerConfigRequestBodyAlgorithm :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyAlgorithm')
  -- | check: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
  -- * If \`none\` no check is performed.
  -- * \`connection\` requires only a connection to the backend to succeed.
  -- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
  --   the response returned matches what is expected.
  , rebuildNodeBalancerConfigRequestBodyCheck :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyCheck')
  -- | check_attempts: How many times to attempt a check before considering a backend to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , rebuildNodeBalancerConfigRequestBodyCheckAttempts :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | check_body: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
  , rebuildNodeBalancerConfigRequestBodyCheckBody :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | check_interval: How often, in seconds, to check that backends are up and serving requests.
  , rebuildNodeBalancerConfigRequestBodyCheckInterval :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | check_passive: If true, any response from this backend with a \`5xx\` status code will be enough for it to be considered unhealthy and taken out of rotation.
  , rebuildNodeBalancerConfigRequestBodyCheckPassive :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | check_path: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^[a-zA-Z0-9\\\/\\-%?&=.]*\$\'
  , rebuildNodeBalancerConfigRequestBodyCheckPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | check_timeout: How long, in seconds, to wait for a check attempt before considering it failed.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , rebuildNodeBalancerConfigRequestBodyCheckTimeout :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | cipher_suite: What ciphers to use for SSL connections served by this NodeBalancer.
  -- 
  -- * \`legacy\` is considered insecure and should only be used if necessary.
  , rebuildNodeBalancerConfigRequestBodyCipherSuite :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyCipherSuite')
  -- | id: This config\'s unique ID
  , rebuildNodeBalancerConfigRequestBodyId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | nodebalancer_id: The ID for the NodeBalancer this config belongs to.
  , rebuildNodeBalancerConfigRequestBodyNodebalancerId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | nodes: The NodeBalancer Node(s) that serve this port.
  -- At least one Node is required per configured port.
  -- 
  -- Some considerations for Nodes when rebuilding a config:
  --   * Current Nodes excluded from the request body will be deleted.
  --   * Current Nodes (identified by their ID) will be updated.
  --   * New Nodes (included without an ID) will be created.
  , rebuildNodeBalancerConfigRequestBodyNodes :: (GHC.Maybe.Maybe ([NodeBalancerNode]))
  -- | nodes_status: A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
  , rebuildNodeBalancerConfigRequestBodyNodesStatus :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyNodesStatus')
  -- | port: The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can\'t have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 1.0
  , rebuildNodeBalancerConfigRequestBodyPort :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | protocol: The protocol this port is configured to serve.
  -- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
  -- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
  , rebuildNodeBalancerConfigRequestBodyProtocol :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyProtocol')
  -- | proxy_protocol: ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
  -- 
  -- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
  -- * If set to \`v1\`, the human-readable header format (Version 1) is used.
  -- * If set to \`v2\`, the binary header format (Version 2) is used.
  , rebuildNodeBalancerConfigRequestBodyProxyProtocol :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyProxyProtocol')
  -- | ssl_cert: The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
  -- certificate and Certificate Authority chain) that should be served on this
  -- NodeBalancerConfig\'s port.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySslCert :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_commonname: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySslCommonname :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_fingerprint: The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySslFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_key: The PEM-formatted private key for the SSL certificate set in the \`ssl_cert\` field.
  -- 
  -- Line breaks must be represented as \"\\n\" in the string.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySslKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | stickiness: Controls how session stickiness is handled on this port.
  -- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
  -- * If set to \`table\` sessions from the same remote address will be routed to the same
  --   backend.
  -- 
  -- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
  --   routed to the same backend based on a cookie set by the NodeBalancer.
  , rebuildNodeBalancerConfigRequestBodyStickiness :: (GHC.Maybe.Maybe RebuildNodeBalancerConfigRequestBodyStickiness')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("algorithm" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyAlgorithm obj : "check" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheck obj : "check_attempts" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckAttempts obj : "check_body" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckBody obj : "check_interval" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckInterval obj : "check_passive" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckPassive obj : "check_path" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckPath obj : "check_timeout" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckTimeout obj : "cipher_suite" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCipherSuite obj : "id" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyId obj : "nodebalancer_id" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodebalancerId obj : "nodes" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodes obj : "nodes_status" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodesStatus obj : "port" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyPort obj : "protocol" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyProtocol obj : "proxy_protocol" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyProxyProtocol obj : "ssl_cert" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslCert obj : "ssl_commonname" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslCommonname obj : "ssl_fingerprint" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslFingerprint obj : "ssl_key" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslKey obj : "stickiness" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyStickiness obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("algorithm" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyAlgorithm obj) GHC.Base.<> (("check" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheck obj) GHC.Base.<> (("check_attempts" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckAttempts obj) GHC.Base.<> (("check_body" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckBody obj) GHC.Base.<> (("check_interval" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckInterval obj) GHC.Base.<> (("check_passive" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckPassive obj) GHC.Base.<> (("check_path" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckPath obj) GHC.Base.<> (("check_timeout" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCheckTimeout obj) GHC.Base.<> (("cipher_suite" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyCipherSuite obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyId obj) GHC.Base.<> (("nodebalancer_id" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodebalancerId obj) GHC.Base.<> (("nodes" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodes obj) GHC.Base.<> (("nodes_status" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodesStatus obj) GHC.Base.<> (("port" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyPort obj) GHC.Base.<> (("protocol" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyProtocol obj) GHC.Base.<> (("proxy_protocol" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyProxyProtocol obj) GHC.Base.<> (("ssl_cert" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslCert obj) GHC.Base.<> (("ssl_commonname" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslCommonname obj) GHC.Base.<> (("ssl_fingerprint" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslFingerprint obj) GHC.Base.<> (("ssl_key" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodySslKey obj) GHC.Base.<> ("stickiness" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyStickiness obj)))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigRequestBody" (\obj -> ((((((((((((((((((((GHC.Base.pure RebuildNodeBalancerConfigRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_attempts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_passive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cipher_suite")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proxy_protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_cert")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_commonname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stickiness"))
-- | Create a new 'RebuildNodeBalancerConfigRequestBody' with all required fields.
mkRebuildNodeBalancerConfigRequestBody :: RebuildNodeBalancerConfigRequestBody
mkRebuildNodeBalancerConfigRequestBody = RebuildNodeBalancerConfigRequestBody{rebuildNodeBalancerConfigRequestBodyAlgorithm = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheck = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheckAttempts = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheckBody = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheckInterval = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheckPassive = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheckPath = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCheckTimeout = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyCipherSuite = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyId = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyNodebalancerId = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyNodes = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyNodesStatus = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyPort = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyProtocol = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyProxyProtocol = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodySslCert = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodySslCommonname = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodySslFingerprint = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodySslKey = GHC.Maybe.Nothing,
                                                                              rebuildNodeBalancerConfigRequestBodyStickiness = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.algorithm@ in the specification.
-- 
-- What algorithm this NodeBalancer should use for routing traffic to backends.
data RebuildNodeBalancerConfigRequestBodyAlgorithm' =
   RebuildNodeBalancerConfigRequestBodyAlgorithm'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RebuildNodeBalancerConfigRequestBodyAlgorithm'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumRoundrobin -- ^ Represents the JSON value @"roundrobin"@
  | RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumLeastconn -- ^ Represents the JSON value @"leastconn"@
  | RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumSource -- ^ Represents the JSON value @"source"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyAlgorithm'
    where toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithm'Other val) = val
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithm'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumRoundrobin) = "roundrobin"
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumLeastconn) = "leastconn"
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumSource) = "source"
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyAlgorithm'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "roundrobin" -> RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumRoundrobin
                                            | val GHC.Classes.== "leastconn" -> RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumLeastconn
                                            | val GHC.Classes.== "source" -> RebuildNodeBalancerConfigRequestBodyAlgorithm'EnumSource
                                            | GHC.Base.otherwise -> RebuildNodeBalancerConfigRequestBodyAlgorithm'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.check@ in the specification.
-- 
-- The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
-- * If \`none\` no check is performed.
-- * \`connection\` requires only a connection to the backend to succeed.
-- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
--   the response returned matches what is expected.
data RebuildNodeBalancerConfigRequestBodyCheck' =
   RebuildNodeBalancerConfigRequestBodyCheck'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RebuildNodeBalancerConfigRequestBodyCheck'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RebuildNodeBalancerConfigRequestBodyCheck'EnumNone -- ^ Represents the JSON value @"none"@
  | RebuildNodeBalancerConfigRequestBodyCheck'EnumConnection -- ^ Represents the JSON value @"connection"@
  | RebuildNodeBalancerConfigRequestBodyCheck'EnumHttp -- ^ Represents the JSON value @"http"@
  | RebuildNodeBalancerConfigRequestBodyCheck'EnumHttpBody -- ^ Represents the JSON value @"http_body"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyCheck'
    where toJSON (RebuildNodeBalancerConfigRequestBodyCheck'Other val) = val
          toJSON (RebuildNodeBalancerConfigRequestBodyCheck'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RebuildNodeBalancerConfigRequestBodyCheck'EnumNone) = "none"
          toJSON (RebuildNodeBalancerConfigRequestBodyCheck'EnumConnection) = "connection"
          toJSON (RebuildNodeBalancerConfigRequestBodyCheck'EnumHttp) = "http"
          toJSON (RebuildNodeBalancerConfigRequestBodyCheck'EnumHttpBody) = "http_body"
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyCheck'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> RebuildNodeBalancerConfigRequestBodyCheck'EnumNone
                                            | val GHC.Classes.== "connection" -> RebuildNodeBalancerConfigRequestBodyCheck'EnumConnection
                                            | val GHC.Classes.== "http" -> RebuildNodeBalancerConfigRequestBodyCheck'EnumHttp
                                            | val GHC.Classes.== "http_body" -> RebuildNodeBalancerConfigRequestBodyCheck'EnumHttpBody
                                            | GHC.Base.otherwise -> RebuildNodeBalancerConfigRequestBodyCheck'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.cipher_suite@ in the specification.
-- 
-- What ciphers to use for SSL connections served by this NodeBalancer.
-- 
-- * \`legacy\` is considered insecure and should only be used if necessary.
data RebuildNodeBalancerConfigRequestBodyCipherSuite' =
   RebuildNodeBalancerConfigRequestBodyCipherSuite'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RebuildNodeBalancerConfigRequestBodyCipherSuite'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RebuildNodeBalancerConfigRequestBodyCipherSuite'EnumRecommended -- ^ Represents the JSON value @"recommended"@
  | RebuildNodeBalancerConfigRequestBodyCipherSuite'EnumLegacy -- ^ Represents the JSON value @"legacy"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyCipherSuite'
    where toJSON (RebuildNodeBalancerConfigRequestBodyCipherSuite'Other val) = val
          toJSON (RebuildNodeBalancerConfigRequestBodyCipherSuite'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RebuildNodeBalancerConfigRequestBodyCipherSuite'EnumRecommended) = "recommended"
          toJSON (RebuildNodeBalancerConfigRequestBodyCipherSuite'EnumLegacy) = "legacy"
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyCipherSuite'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "recommended" -> RebuildNodeBalancerConfigRequestBodyCipherSuite'EnumRecommended
                                            | val GHC.Classes.== "legacy" -> RebuildNodeBalancerConfigRequestBodyCipherSuite'EnumLegacy
                                            | GHC.Base.otherwise -> RebuildNodeBalancerConfigRequestBodyCipherSuite'Other val)
-- | Defines the object schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.nodes_status@ in the specification.
-- 
-- A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
data RebuildNodeBalancerConfigRequestBodyNodesStatus' = RebuildNodeBalancerConfigRequestBodyNodesStatus' {
  -- | down: The number of backends considered to be \"DOWN\" and unhealthy.  These are not in rotation, and not serving requests.
  rebuildNodeBalancerConfigRequestBodyNodesStatus'Down :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | up: The number of backends considered to be \"UP\" and healthy, and that are serving requests.
  , rebuildNodeBalancerConfigRequestBodyNodesStatus'Up :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyNodesStatus'
    where toJSON obj = Data.Aeson.Types.Internal.object ("down" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodesStatus'Down obj : "up" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodesStatus'Up obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("down" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodesStatus'Down obj) GHC.Base.<> ("up" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigRequestBodyNodesStatus'Up obj))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyNodesStatus'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigRequestBodyNodesStatus'" (\obj -> (GHC.Base.pure RebuildNodeBalancerConfigRequestBodyNodesStatus' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "down")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "up"))
-- | Create a new 'RebuildNodeBalancerConfigRequestBodyNodesStatus'' with all required fields.
mkRebuildNodeBalancerConfigRequestBodyNodesStatus' :: RebuildNodeBalancerConfigRequestBodyNodesStatus'
mkRebuildNodeBalancerConfigRequestBodyNodesStatus' = RebuildNodeBalancerConfigRequestBodyNodesStatus'{rebuildNodeBalancerConfigRequestBodyNodesStatus'Down = GHC.Maybe.Nothing,
                                                                                                      rebuildNodeBalancerConfigRequestBodyNodesStatus'Up = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.protocol@ in the specification.
-- 
-- The protocol this port is configured to serve.
-- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
-- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
data RebuildNodeBalancerConfigRequestBodyProtocol' =
   RebuildNodeBalancerConfigRequestBodyProtocol'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RebuildNodeBalancerConfigRequestBodyProtocol'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RebuildNodeBalancerConfigRequestBodyProtocol'EnumHttp -- ^ Represents the JSON value @"http"@
  | RebuildNodeBalancerConfigRequestBodyProtocol'EnumHttps -- ^ Represents the JSON value @"https"@
  | RebuildNodeBalancerConfigRequestBodyProtocol'EnumTcp -- ^ Represents the JSON value @"tcp"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyProtocol'
    where toJSON (RebuildNodeBalancerConfigRequestBodyProtocol'Other val) = val
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocol'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocol'EnumHttp) = "http"
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocol'EnumHttps) = "https"
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocol'EnumTcp) = "tcp"
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyProtocol'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "http" -> RebuildNodeBalancerConfigRequestBodyProtocol'EnumHttp
                                            | val GHC.Classes.== "https" -> RebuildNodeBalancerConfigRequestBodyProtocol'EnumHttps
                                            | val GHC.Classes.== "tcp" -> RebuildNodeBalancerConfigRequestBodyProtocol'EnumTcp
                                            | GHC.Base.otherwise -> RebuildNodeBalancerConfigRequestBodyProtocol'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.proxy_protocol@ in the specification.
-- 
-- ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
-- 
-- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
-- * If set to \`v1\`, the human-readable header format (Version 1) is used.
-- * If set to \`v2\`, the binary header format (Version 2) is used.
data RebuildNodeBalancerConfigRequestBodyProxyProtocol' =
   RebuildNodeBalancerConfigRequestBodyProxyProtocol'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RebuildNodeBalancerConfigRequestBodyProxyProtocol'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumNone -- ^ Represents the JSON value @"none"@
  | RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumV1 -- ^ Represents the JSON value @"v1"@
  | RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyProxyProtocol'
    where toJSON (RebuildNodeBalancerConfigRequestBodyProxyProtocol'Other val) = val
          toJSON (RebuildNodeBalancerConfigRequestBodyProxyProtocol'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumNone) = "none"
          toJSON (RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumV1) = "v1"
          toJSON (RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyProxyProtocol'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumNone
                                            | val GHC.Classes.== "v1" -> RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumV1
                                            | val GHC.Classes.== "v2" -> RebuildNodeBalancerConfigRequestBodyProxyProtocol'EnumV2
                                            | GHC.Base.otherwise -> RebuildNodeBalancerConfigRequestBodyProxyProtocol'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}\/rebuild.POST.requestBody.content.application\/json.schema.allOf.properties.stickiness@ in the specification.
-- 
-- Controls how session stickiness is handled on this port.
-- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
-- * If set to \`table\` sessions from the same remote address will be routed to the same
--   backend.
-- 
-- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
--   routed to the same backend based on a cookie set by the NodeBalancer.
data RebuildNodeBalancerConfigRequestBodyStickiness' =
   RebuildNodeBalancerConfigRequestBodyStickiness'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RebuildNodeBalancerConfigRequestBodyStickiness'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RebuildNodeBalancerConfigRequestBodyStickiness'EnumNone -- ^ Represents the JSON value @"none"@
  | RebuildNodeBalancerConfigRequestBodyStickiness'EnumTable -- ^ Represents the JSON value @"table"@
  | RebuildNodeBalancerConfigRequestBodyStickiness'EnumHttpCookie -- ^ Represents the JSON value @"http_cookie"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigRequestBodyStickiness'
    where toJSON (RebuildNodeBalancerConfigRequestBodyStickiness'Other val) = val
          toJSON (RebuildNodeBalancerConfigRequestBodyStickiness'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RebuildNodeBalancerConfigRequestBodyStickiness'EnumNone) = "none"
          toJSON (RebuildNodeBalancerConfigRequestBodyStickiness'EnumTable) = "table"
          toJSON (RebuildNodeBalancerConfigRequestBodyStickiness'EnumHttpCookie) = "http_cookie"
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyStickiness'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> RebuildNodeBalancerConfigRequestBodyStickiness'EnumNone
                                            | val GHC.Classes.== "table" -> RebuildNodeBalancerConfigRequestBodyStickiness'EnumTable
                                            | val GHC.Classes.== "http_cookie" -> RebuildNodeBalancerConfigRequestBodyStickiness'EnumHttpCookie
                                            | GHC.Base.otherwise -> RebuildNodeBalancerConfigRequestBodyStickiness'Other val)
-- | Represents a response of the operation 'rebuildNodeBalancerConfig'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RebuildNodeBalancerConfigResponseError' is used.
data RebuildNodeBalancerConfigResponse =
   RebuildNodeBalancerConfigResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | RebuildNodeBalancerConfigResponse200 NodeBalancer -- ^ NodeBalancer created successfully.
  | RebuildNodeBalancerConfigResponseDefault RebuildNodeBalancerConfigResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data RebuildNodeBalancerConfigResponseBodyDefault = RebuildNodeBalancerConfigResponseBodyDefault {
  -- | errors
  rebuildNodeBalancerConfigResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RebuildNodeBalancerConfigResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= rebuildNodeBalancerConfigResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigResponseBodyDefault" (\obj -> GHC.Base.pure RebuildNodeBalancerConfigResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'RebuildNodeBalancerConfigResponseBodyDefault' with all required fields.
mkRebuildNodeBalancerConfigResponseBodyDefault :: RebuildNodeBalancerConfigResponseBodyDefault
mkRebuildNodeBalancerConfigResponseBodyDefault = RebuildNodeBalancerConfigResponseBodyDefault{rebuildNodeBalancerConfigResponseBodyDefaultErrors = GHC.Maybe.Nothing}
