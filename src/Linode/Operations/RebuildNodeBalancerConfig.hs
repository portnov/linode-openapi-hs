-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation rebuildNodeBalancerConfig
module Linode.Operations.RebuildNodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild
-- 
-- Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.
rebuildNodeBalancerConfig :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> RebuildNodeBalancerConfigRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response RebuildNodeBalancerConfigResponse)) -- ^ Monad containing the result of the operation
rebuildNodeBalancerConfig config
                          body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RebuildNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RebuildNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             NodeBalancer)
                                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RebuildNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               RebuildNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild
-- 
-- The same as 'rebuildNodeBalancerConfig' but returns the raw 'Data.ByteString.Char8.ByteString'
rebuildNodeBalancerConfigRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                              Linode.Common.SecurityScheme s) =>
                                Linode.Common.Configuration s ->
                                RebuildNodeBalancerConfigRequestBody ->
                                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
rebuildNodeBalancerConfigRaw config
                             body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild
-- 
-- Monadic version of 'rebuildNodeBalancerConfig' (use with 'Linode.Common.runWithConfiguration')
rebuildNodeBalancerConfigM :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              RebuildNodeBalancerConfigRequestBody ->
                              Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response RebuildNodeBalancerConfigResponse))
rebuildNodeBalancerConfigM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either RebuildNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RebuildNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              NodeBalancer)
                                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RebuildNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                RebuildNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild
-- 
-- Monadic version of 'rebuildNodeBalancerConfigRaw' (use with 'Linode.Common.runWithConfiguration')
rebuildNodeBalancerConfigRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                               Linode.Common.SecurityScheme s) =>
                                 RebuildNodeBalancerConfigRequestBody ->
                                 Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                    m
                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
rebuildNodeBalancerConfigRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema rebuildNodeBalancerConfigRequestBody
-- 
-- 
data RebuildNodeBalancerConfigRequestBody = RebuildNodeBalancerConfigRequestBody {
  -- | algorithm: What algorithm this NodeBalancer should use for routing traffic to backends.
  rebuildNodeBalancerConfigRequestBodyAlgorithm :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyAlgorithm)
  -- | check: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
  -- * If \`none\` no check is performed.
  -- * \`connection\` requires only a connection to the backend to succeed.
  -- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
  --   the response returned matches what is expected.
  , rebuildNodeBalancerConfigRequestBodyCheck :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyCheck)
  -- | check_attempts: How many times to attempt a check before considering a backend to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , rebuildNodeBalancerConfigRequestBodyCheck_attempts :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | check_body: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
  , rebuildNodeBalancerConfigRequestBodyCheck_body :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | check_interval: How often, in seconds, to check that backends are up and serving requests.
  , rebuildNodeBalancerConfigRequestBodyCheck_interval :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | check_passive: If true, any response from this backend with a \`5xx\` status code will be enough for it to be considered unhealthy and taken out of rotation.
  , rebuildNodeBalancerConfigRequestBodyCheck_passive :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | check_path: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^[a-zA-Z0-9\\\/\\-%?&=.]*\$\'
  , rebuildNodeBalancerConfigRequestBodyCheck_path :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | check_timeout: How long, in seconds, to wait for a check attempt before considering it failed.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , rebuildNodeBalancerConfigRequestBodyCheck_timeout :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | cipher_suite: What ciphers to use for SSL connections served by this NodeBalancer.
  -- 
  -- * \`legacy\` is considered insecure and should only be used if necessary.
  , rebuildNodeBalancerConfigRequestBodyCipher_suite :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyCipher_suite)
  -- | id: This config\'s unique ID
  , rebuildNodeBalancerConfigRequestBodyId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | nodebalancer_id: The ID for the NodeBalancer this config belongs to.
  , rebuildNodeBalancerConfigRequestBodyNodebalancer_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | nodes: The NodeBalancer Node(s) that serve this port.
  -- At least one Node is required per configured port.
  -- 
  -- Some considerations for Nodes when rebuilding a config:
  --   * Current Nodes excluded from the request body will be deleted.
  --   * Current Nodes (identified by their ID) will be updated.
  --   * New Nodes (included without an ID) will be created.
  , rebuildNodeBalancerConfigRequestBodyNodes :: (GHC.Base.Maybe ([] NodeBalancerNode))
  -- | nodes_status: A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
  , rebuildNodeBalancerConfigRequestBodyNodes_status :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyNodes_status)
  -- | port: The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can\'t have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 1.0
  , rebuildNodeBalancerConfigRequestBodyPort :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | protocol: The protocol this port is configured to serve.
  -- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
  -- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
  , rebuildNodeBalancerConfigRequestBodyProtocol :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyProtocol)
  -- | proxy_protocol: ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
  -- 
  -- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
  -- * If set to \`v1\`, the human-readable header format (Version 1) is used.
  -- * If set to \`v2\`, the binary header format (Version 2) is used.
  , rebuildNodeBalancerConfigRequestBodyProxy_protocol :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyProxy_protocol)
  -- | ssl_cert: The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
  -- certificate and Certificate Authority chain) that should be served on this
  -- NodeBalancerConfig\'s port.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySsl_cert :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ssl_commonname: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySsl_commonname :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ssl_fingerprint: The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySsl_fingerprint :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ssl_key: The PEM-formatted private key for the SSL certificate set in the \`ssl_cert\` field.
  -- 
  -- Line breaks must be represented as \"\\n\" in the string.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , rebuildNodeBalancerConfigRequestBodySsl_key :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | stickiness: Controls how session stickiness is handled on this port.
  -- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
  -- * If set to \`table\` sessions from the same remote address will be routed to the same
  --   backend.
  -- 
  -- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
  --   routed to the same backend based on a cookie set by the NodeBalancer.
  , rebuildNodeBalancerConfigRequestBodyStickiness :: (GHC.Base.Maybe RebuildNodeBalancerConfigRequestBodyStickiness)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (rebuildNodeBalancerConfigRequestBodyAlgorithm obj) : (Data.Aeson..=) "check" (rebuildNodeBalancerConfigRequestBodyCheck obj) : (Data.Aeson..=) "check_attempts" (rebuildNodeBalancerConfigRequestBodyCheck_attempts obj) : (Data.Aeson..=) "check_body" (rebuildNodeBalancerConfigRequestBodyCheck_body obj) : (Data.Aeson..=) "check_interval" (rebuildNodeBalancerConfigRequestBodyCheck_interval obj) : (Data.Aeson..=) "check_passive" (rebuildNodeBalancerConfigRequestBodyCheck_passive obj) : (Data.Aeson..=) "check_path" (rebuildNodeBalancerConfigRequestBodyCheck_path obj) : (Data.Aeson..=) "check_timeout" (rebuildNodeBalancerConfigRequestBodyCheck_timeout obj) : (Data.Aeson..=) "cipher_suite" (rebuildNodeBalancerConfigRequestBodyCipher_suite obj) : (Data.Aeson..=) "id" (rebuildNodeBalancerConfigRequestBodyId obj) : (Data.Aeson..=) "nodebalancer_id" (rebuildNodeBalancerConfigRequestBodyNodebalancer_id obj) : (Data.Aeson..=) "nodes" (rebuildNodeBalancerConfigRequestBodyNodes obj) : (Data.Aeson..=) "nodes_status" (rebuildNodeBalancerConfigRequestBodyNodes_status obj) : (Data.Aeson..=) "port" (rebuildNodeBalancerConfigRequestBodyPort obj) : (Data.Aeson..=) "protocol" (rebuildNodeBalancerConfigRequestBodyProtocol obj) : (Data.Aeson..=) "proxy_protocol" (rebuildNodeBalancerConfigRequestBodyProxy_protocol obj) : (Data.Aeson..=) "ssl_cert" (rebuildNodeBalancerConfigRequestBodySsl_cert obj) : (Data.Aeson..=) "ssl_commonname" (rebuildNodeBalancerConfigRequestBodySsl_commonname obj) : (Data.Aeson..=) "ssl_fingerprint" (rebuildNodeBalancerConfigRequestBodySsl_fingerprint obj) : (Data.Aeson..=) "ssl_key" (rebuildNodeBalancerConfigRequestBodySsl_key obj) : (Data.Aeson..=) "stickiness" (rebuildNodeBalancerConfigRequestBodyStickiness obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (rebuildNodeBalancerConfigRequestBodyAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "check" (rebuildNodeBalancerConfigRequestBodyCheck obj) GHC.Base.<> ((Data.Aeson..=) "check_attempts" (rebuildNodeBalancerConfigRequestBodyCheck_attempts obj) GHC.Base.<> ((Data.Aeson..=) "check_body" (rebuildNodeBalancerConfigRequestBodyCheck_body obj) GHC.Base.<> ((Data.Aeson..=) "check_interval" (rebuildNodeBalancerConfigRequestBodyCheck_interval obj) GHC.Base.<> ((Data.Aeson..=) "check_passive" (rebuildNodeBalancerConfigRequestBodyCheck_passive obj) GHC.Base.<> ((Data.Aeson..=) "check_path" (rebuildNodeBalancerConfigRequestBodyCheck_path obj) GHC.Base.<> ((Data.Aeson..=) "check_timeout" (rebuildNodeBalancerConfigRequestBodyCheck_timeout obj) GHC.Base.<> ((Data.Aeson..=) "cipher_suite" (rebuildNodeBalancerConfigRequestBodyCipher_suite obj) GHC.Base.<> ((Data.Aeson..=) "id" (rebuildNodeBalancerConfigRequestBodyId obj) GHC.Base.<> ((Data.Aeson..=) "nodebalancer_id" (rebuildNodeBalancerConfigRequestBodyNodebalancer_id obj) GHC.Base.<> ((Data.Aeson..=) "nodes" (rebuildNodeBalancerConfigRequestBodyNodes obj) GHC.Base.<> ((Data.Aeson..=) "nodes_status" (rebuildNodeBalancerConfigRequestBodyNodes_status obj) GHC.Base.<> ((Data.Aeson..=) "port" (rebuildNodeBalancerConfigRequestBodyPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (rebuildNodeBalancerConfigRequestBodyProtocol obj) GHC.Base.<> ((Data.Aeson..=) "proxy_protocol" (rebuildNodeBalancerConfigRequestBodyProxy_protocol obj) GHC.Base.<> ((Data.Aeson..=) "ssl_cert" (rebuildNodeBalancerConfigRequestBodySsl_cert obj) GHC.Base.<> ((Data.Aeson..=) "ssl_commonname" (rebuildNodeBalancerConfigRequestBodySsl_commonname obj) GHC.Base.<> ((Data.Aeson..=) "ssl_fingerprint" (rebuildNodeBalancerConfigRequestBodySsl_fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "ssl_key" (rebuildNodeBalancerConfigRequestBodySsl_key obj) GHC.Base.<> (Data.Aeson..=) "stickiness" (rebuildNodeBalancerConfigRequestBodyStickiness obj)))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigRequestBody" (\obj -> ((((((((((((((((((((GHC.Base.pure RebuildNodeBalancerConfigRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_attempts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_passive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cipher_suite")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proxy_protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_cert")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_commonname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stickiness"))
-- | Defines the enum schema rebuildNodeBalancerConfigRequestBodyAlgorithm
-- 
-- What algorithm this NodeBalancer should use for routing traffic to backends.
data RebuildNodeBalancerConfigRequestBodyAlgorithm
    = RebuildNodeBalancerConfigRequestBodyAlgorithmEnumOther Data.Aeson.Types.Internal.Value
    | RebuildNodeBalancerConfigRequestBodyAlgorithmEnumTyped Data.Text.Internal.Text
    | RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_leastconn
    | RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_roundrobin
    | RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_source
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyAlgorithm
    where toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithmEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithmEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_leastconn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "leastconn"
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_roundrobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roundrobin"
          toJSON (RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_source) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source"
instance Data.Aeson.FromJSON RebuildNodeBalancerConfigRequestBodyAlgorithm
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "leastconn")
                                          then RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_leastconn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roundrobin")
                                                then RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_roundrobin
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source")
                                                      then RebuildNodeBalancerConfigRequestBodyAlgorithmEnumString_source
                                                      else RebuildNodeBalancerConfigRequestBodyAlgorithmEnumOther val)
-- | Defines the enum schema rebuildNodeBalancerConfigRequestBodyCheck
-- 
-- The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
-- * If \`none\` no check is performed.
-- * \`connection\` requires only a connection to the backend to succeed.
-- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
--   the response returned matches what is expected.
data RebuildNodeBalancerConfigRequestBodyCheck
    = RebuildNodeBalancerConfigRequestBodyCheckEnumOther Data.Aeson.Types.Internal.Value
    | RebuildNodeBalancerConfigRequestBodyCheckEnumTyped Data.Text.Internal.Text
    | RebuildNodeBalancerConfigRequestBodyCheckEnumString_connection
    | RebuildNodeBalancerConfigRequestBodyCheckEnumString_http
    | RebuildNodeBalancerConfigRequestBodyCheckEnumString_http_body
    | RebuildNodeBalancerConfigRequestBodyCheckEnumString_none
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyCheck
    where toJSON (RebuildNodeBalancerConfigRequestBodyCheckEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyCheckEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyCheckEnumString_connection) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connection"
          toJSON (RebuildNodeBalancerConfigRequestBodyCheckEnumString_http) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (RebuildNodeBalancerConfigRequestBodyCheckEnumString_http_body) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_body"
          toJSON (RebuildNodeBalancerConfigRequestBodyCheckEnumString_none) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
instance Data.Aeson.FromJSON RebuildNodeBalancerConfigRequestBodyCheck
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connection")
                                          then RebuildNodeBalancerConfigRequestBodyCheckEnumString_connection
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                                then RebuildNodeBalancerConfigRequestBodyCheckEnumString_http
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_body")
                                                      then RebuildNodeBalancerConfigRequestBodyCheckEnumString_http_body
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                            then RebuildNodeBalancerConfigRequestBodyCheckEnumString_none
                                                            else RebuildNodeBalancerConfigRequestBodyCheckEnumOther val)
-- | Defines the enum schema rebuildNodeBalancerConfigRequestBodyCipher_suite
-- 
-- What ciphers to use for SSL connections served by this NodeBalancer.
-- 
-- * \`legacy\` is considered insecure and should only be used if necessary.
data RebuildNodeBalancerConfigRequestBodyCipher_suite
    = RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumOther Data.Aeson.Types.Internal.Value
    | RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumTyped Data.Text.Internal.Text
    | RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumString_legacy
    | RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumString_recommended
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyCipher_suite
    where toJSON (RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumString_legacy) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legacy"
          toJSON (RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumString_recommended) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recommended"
instance Data.Aeson.FromJSON RebuildNodeBalancerConfigRequestBodyCipher_suite
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legacy")
                                          then RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumString_legacy
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recommended")
                                                then RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumString_recommended
                                                else RebuildNodeBalancerConfigRequestBodyCipher_suiteEnumOther val)
-- | Defines the data type for the schema rebuildNodeBalancerConfigRequestBodyNodes_status
-- 
-- A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
data RebuildNodeBalancerConfigRequestBodyNodes_status = RebuildNodeBalancerConfigRequestBodyNodes_status {
  -- | down: The number of backends considered to be \"DOWN\" and unhealthy.  These are not in rotation, and not serving requests.
  rebuildNodeBalancerConfigRequestBodyNodes_statusDown :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | up: The number of backends considered to be \"UP\" and healthy, and that are serving requests.
  , rebuildNodeBalancerConfigRequestBodyNodes_statusUp :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyNodes_status
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "down" (rebuildNodeBalancerConfigRequestBodyNodes_statusDown obj) : (Data.Aeson..=) "up" (rebuildNodeBalancerConfigRequestBodyNodes_statusUp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "down" (rebuildNodeBalancerConfigRequestBodyNodes_statusDown obj) GHC.Base.<> (Data.Aeson..=) "up" (rebuildNodeBalancerConfigRequestBodyNodes_statusUp obj))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigRequestBodyNodes_status
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigRequestBodyNodes_status" (\obj -> (GHC.Base.pure RebuildNodeBalancerConfigRequestBodyNodes_status GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "down")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "up"))
-- | Defines the enum schema rebuildNodeBalancerConfigRequestBodyProtocol
-- 
-- The protocol this port is configured to serve.
-- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
-- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
data RebuildNodeBalancerConfigRequestBodyProtocol
    = RebuildNodeBalancerConfigRequestBodyProtocolEnumOther Data.Aeson.Types.Internal.Value
    | RebuildNodeBalancerConfigRequestBodyProtocolEnumTyped Data.Text.Internal.Text
    | RebuildNodeBalancerConfigRequestBodyProtocolEnumString_http
    | RebuildNodeBalancerConfigRequestBodyProtocolEnumString_https
    | RebuildNodeBalancerConfigRequestBodyProtocolEnumString_tcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyProtocol
    where toJSON (RebuildNodeBalancerConfigRequestBodyProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocolEnumString_http) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocolEnumString_https) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (RebuildNodeBalancerConfigRequestBodyProtocolEnumString_tcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON RebuildNodeBalancerConfigRequestBodyProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then RebuildNodeBalancerConfigRequestBodyProtocolEnumString_http
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then RebuildNodeBalancerConfigRequestBodyProtocolEnumString_https
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then RebuildNodeBalancerConfigRequestBodyProtocolEnumString_tcp
                                                      else RebuildNodeBalancerConfigRequestBodyProtocolEnumOther val)
-- | Defines the enum schema rebuildNodeBalancerConfigRequestBodyProxy_protocol
-- 
-- ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
-- 
-- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
-- * If set to \`v1\`, the human-readable header format (Version 1) is used.
-- * If set to \`v2\`, the binary header format (Version 2) is used.
data RebuildNodeBalancerConfigRequestBodyProxy_protocol
    = RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumOther Data.Aeson.Types.Internal.Value
    | RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumTyped Data.Text.Internal.Text
    | RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_none
    | RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_v1
    | RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_v2
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyProxy_protocol
    where toJSON (RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_none) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_v1) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v1"
          toJSON (RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_v2) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v2"
instance Data.Aeson.FromJSON RebuildNodeBalancerConfigRequestBodyProxy_protocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                          then RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_none
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v1")
                                                then RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_v1
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v2")
                                                      then RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumString_v2
                                                      else RebuildNodeBalancerConfigRequestBodyProxy_protocolEnumOther val)
-- | Defines the enum schema rebuildNodeBalancerConfigRequestBodyStickiness
-- 
-- Controls how session stickiness is handled on this port.
-- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
-- * If set to \`table\` sessions from the same remote address will be routed to the same
--   backend.
-- 
-- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
--   routed to the same backend based on a cookie set by the NodeBalancer.
data RebuildNodeBalancerConfigRequestBodyStickiness
    = RebuildNodeBalancerConfigRequestBodyStickinessEnumOther Data.Aeson.Types.Internal.Value
    | RebuildNodeBalancerConfigRequestBodyStickinessEnumTyped Data.Text.Internal.Text
    | RebuildNodeBalancerConfigRequestBodyStickinessEnumString_http_cookie
    | RebuildNodeBalancerConfigRequestBodyStickinessEnumString_none
    | RebuildNodeBalancerConfigRequestBodyStickinessEnumString_table
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigRequestBodyStickiness
    where toJSON (RebuildNodeBalancerConfigRequestBodyStickinessEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyStickinessEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RebuildNodeBalancerConfigRequestBodyStickinessEnumString_http_cookie) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_cookie"
          toJSON (RebuildNodeBalancerConfigRequestBodyStickinessEnumString_none) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (RebuildNodeBalancerConfigRequestBodyStickinessEnumString_table) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "table"
instance Data.Aeson.FromJSON RebuildNodeBalancerConfigRequestBodyStickiness
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_cookie")
                                          then RebuildNodeBalancerConfigRequestBodyStickinessEnumString_http_cookie
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                then RebuildNodeBalancerConfigRequestBodyStickinessEnumString_none
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "table")
                                                      then RebuildNodeBalancerConfigRequestBodyStickinessEnumString_table
                                                      else RebuildNodeBalancerConfigRequestBodyStickinessEnumOther val)
-- | Represents a response of the operation 'rebuildNodeBalancerConfig'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RebuildNodeBalancerConfigResponseError' is used.
data RebuildNodeBalancerConfigResponse =                                                   
   RebuildNodeBalancerConfigResponseError GHC.Base.String                                  -- ^ Means either no matching case available or a parse error
  | RebuildNodeBalancerConfigResponse200 NodeBalancer                                      -- ^ NodeBalancer created successfully.
  | RebuildNodeBalancerConfigResponseDefault RebuildNodeBalancerConfigResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema RebuildNodeBalancerConfigResponseBodyDefault
-- 
-- 
data RebuildNodeBalancerConfigResponseBodyDefault = RebuildNodeBalancerConfigResponseBodyDefault {
  -- | errors
  rebuildNodeBalancerConfigResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildNodeBalancerConfigResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (rebuildNodeBalancerConfigResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (rebuildNodeBalancerConfigResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildNodeBalancerConfigResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildNodeBalancerConfigResponseBodyDefault" (\obj -> GHC.Base.pure RebuildNodeBalancerConfigResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
