-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteLKEClusterNode
module Linode.Operations.DeleteLKEClusterNode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /lke/clusters/{clusterId}/nodes/{nodeId}
-- 
-- Deletes a specific Node from a Node Pool.
-- 
-- **Deleting a Node is a destructive action and cannot be undone.**
-- 
-- Deleting a Node will reduce the size of the Node Pool it belongs to.
deleteLKEClusterNode :: forall m . Linode.Common.MonadHTTP m => DeleteLKEClusterNodeParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteLKEClusterNodeResponse) -- ^ Monadic computation which returns the result of the operation
deleteLKEClusterNode parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteLKEClusterNodeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteLKEClusterNodeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteLKEClusterNodeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                       DeleteLKEClusterNodeResponseBodyDefault)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/lke/clusters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteLKEClusterNodeParametersPathClusterId parameters))) GHC.Base.++ ("/nodes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteLKEClusterNodeParametersPathNodeId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/lke\/clusters\/{clusterId}\/nodes\/{nodeId}.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteLKEClusterNodeParameters = DeleteLKEClusterNodeParameters {
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- ID of the Kubernetes cluster containing the Node.
  deleteLKEClusterNodeParametersPathClusterId :: GHC.Types.Int
  -- | pathNodeId: Represents the parameter named \'nodeId\'
  -- 
  -- ID of the Node to look up.
  , deleteLKEClusterNodeParametersPathNodeId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteLKEClusterNodeParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathClusterId" Data.Aeson.Types.ToJSON..= deleteLKEClusterNodeParametersPathClusterId obj : "pathNodeId" Data.Aeson.Types.ToJSON..= deleteLKEClusterNodeParametersPathNodeId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathClusterId" Data.Aeson.Types.ToJSON..= deleteLKEClusterNodeParametersPathClusterId obj) GHC.Base.<> ("pathNodeId" Data.Aeson.Types.ToJSON..= deleteLKEClusterNodeParametersPathNodeId obj))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteLKEClusterNodeParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteLKEClusterNodeParameters" (\obj -> (GHC.Base.pure DeleteLKEClusterNodeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNodeId"))
-- | Create a new 'DeleteLKEClusterNodeParameters' with all required fields.
mkDeleteLKEClusterNodeParameters :: GHC.Types.Int -- ^ 'deleteLKEClusterNodeParametersPathClusterId'
  -> Data.Text.Internal.Text -- ^ 'deleteLKEClusterNodeParametersPathNodeId'
  -> DeleteLKEClusterNodeParameters
mkDeleteLKEClusterNodeParameters deleteLKEClusterNodeParametersPathClusterId deleteLKEClusterNodeParametersPathNodeId = DeleteLKEClusterNodeParameters{deleteLKEClusterNodeParametersPathClusterId = deleteLKEClusterNodeParametersPathClusterId,
                                                                                                                                                       deleteLKEClusterNodeParametersPathNodeId = deleteLKEClusterNodeParametersPathNodeId}
-- | Represents a response of the operation 'deleteLKEClusterNode'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteLKEClusterNodeResponseError' is used.
data DeleteLKEClusterNodeResponse =
   DeleteLKEClusterNodeResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteLKEClusterNodeResponse200 Data.Aeson.Types.Internal.Object -- ^ Delete successful
  | DeleteLKEClusterNodeResponseDefault DeleteLKEClusterNodeResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteLKEClusterNodeResponseBodyDefault = DeleteLKEClusterNodeResponseBodyDefault {
  -- | errors
  deleteLKEClusterNodeResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteLKEClusterNodeResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= deleteLKEClusterNodeResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= deleteLKEClusterNodeResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON DeleteLKEClusterNodeResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteLKEClusterNodeResponseBodyDefault" (\obj -> GHC.Base.pure DeleteLKEClusterNodeResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'DeleteLKEClusterNodeResponseBodyDefault' with all required fields.
mkDeleteLKEClusterNodeResponseBodyDefault :: DeleteLKEClusterNodeResponseBodyDefault
mkDeleteLKEClusterNodeResponseBodyDefault = DeleteLKEClusterNodeResponseBodyDefault{deleteLKEClusterNodeResponseBodyDefaultErrors = GHC.Maybe.Nothing}
