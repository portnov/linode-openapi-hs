-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getManagedIssues
module Linode.Operations.GetManagedIssues where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /managed/issues
-- 
-- Returns a paginated list of recent and ongoing issues detected on your Managed Services.
getManagedIssues :: forall m . Linode.Common.MonadHTTP m => GetManagedIssuesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetManagedIssuesResponse) -- ^ Monadic computation which returns the result of the operation
getManagedIssues parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetManagedIssuesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetManagedIssuesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetManagedIssuesResponseBody200)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetManagedIssuesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           GetManagedIssuesResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/managed/issues") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getManagedIssuesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                            Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getManagedIssuesParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/managed\/issues.GET.parameters@ in the specification.
-- 
-- 
data GetManagedIssuesParameters = GetManagedIssuesParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getManagedIssuesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getManagedIssuesParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetManagedIssuesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getManagedIssuesParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getManagedIssuesParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getManagedIssuesParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getManagedIssuesParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetManagedIssuesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetManagedIssuesParameters" (\obj -> (GHC.Base.pure GetManagedIssuesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetManagedIssuesParameters' with all required fields.
mkGetManagedIssuesParameters :: GetManagedIssuesParameters
mkGetManagedIssuesParameters = GetManagedIssuesParameters{getManagedIssuesParametersQueryPage = GHC.Maybe.Nothing,
                                                          getManagedIssuesParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getManagedIssues'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetManagedIssuesResponseError' is used.
data GetManagedIssuesResponse =
   GetManagedIssuesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetManagedIssuesResponse200 GetManagedIssuesResponseBody200 -- ^ A paginated list of open or ongoing Managed Issues. 
  | GetManagedIssuesResponseDefault GetManagedIssuesResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/managed\/issues.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetManagedIssuesResponseBody200 = GetManagedIssuesResponseBody200 {
  -- | data
  getManagedIssuesResponseBody200Data :: (GHC.Maybe.Maybe ([ManagedIssue]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getManagedIssuesResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getManagedIssuesResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getManagedIssuesResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetManagedIssuesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetManagedIssuesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetManagedIssuesResponseBody200" (\obj -> (((GHC.Base.pure GetManagedIssuesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetManagedIssuesResponseBody200' with all required fields.
mkGetManagedIssuesResponseBody200 :: GetManagedIssuesResponseBody200
mkGetManagedIssuesResponseBody200 = GetManagedIssuesResponseBody200{getManagedIssuesResponseBody200Data = GHC.Maybe.Nothing,
                                                                    getManagedIssuesResponseBody200Page = GHC.Maybe.Nothing,
                                                                    getManagedIssuesResponseBody200Pages = GHC.Maybe.Nothing,
                                                                    getManagedIssuesResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetManagedIssuesResponseBodyDefault = GetManagedIssuesResponseBodyDefault {
  -- | errors
  getManagedIssuesResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetManagedIssuesResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getManagedIssuesResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetManagedIssuesResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetManagedIssuesResponseBodyDefault" (\obj -> GHC.Base.pure GetManagedIssuesResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetManagedIssuesResponseBodyDefault' with all required fields.
mkGetManagedIssuesResponseBodyDefault :: GetManagedIssuesResponseBodyDefault
mkGetManagedIssuesResponseBodyDefault = GetManagedIssuesResponseBodyDefault{getManagedIssuesResponseBodyDefaultErrors = GHC.Maybe.Nothing}
