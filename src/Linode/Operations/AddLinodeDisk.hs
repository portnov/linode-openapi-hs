-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation addLinodeDisk
module Linode.Operations.AddLinodeDisk where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > POST /linode/instances/{linodeId}/disks
-- 
-- Adds a new Disk to a Linode.
-- 
-- * You can optionally create a Disk from an Image or an Empty Disk if no Image is provided with a request.
-- 
-- * When creating an Empty Disk, providing a \`label\` is required.
-- 
-- * If no \`label\` is provided, an \`image\` is required instead.
-- 
-- * When creating a Disk from an Image, \`root_pass\` is required.
-- 
-- * The default filesystem for new Disks is \`ext4\`. If creating a Disk from an Image, the filesystem
-- of the Image is used unless otherwise specified.
-- 
-- * When deploying a StackScript on a Disk:
--   * See StackScripts List ([GET \/linode\/stackscripts](\/docs\/api\/stackscripts\/\#stackscripts-list)) for
--     a list of available StackScripts.
--   * Requires a compatible Image to be supplied.
--     * See StackScript View ([GET \/linode\/stackscript\/{stackscriptId}](\/docs\/api\/stackscripts\/\#stackscript-view)) for compatible Images.
--   * It is recommended to supply SSH keys for the root User using the \`authorized_keys\` field.
--   * You may also supply a list of usernames via the \`authorized_users\` field.
--     * These users must have an SSH Key associated with their Profiles first. See SSH Key Add ([POST \/profile\/sshkeys](\/docs\/api\/profile\/\#ssh-key-add)) for more information.
addLinodeDisk :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> AddLinodeDiskRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response AddLinodeDiskResponse)) -- ^ Monad containing the result of the operation
addLinodeDisk config
              body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either AddLinodeDiskResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeDiskResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         Disk)
                                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeDiskResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           AddLinodeDiskResponseBodyDefault)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/disks
-- 
-- The same as 'addLinodeDisk' but returns the raw 'Data.ByteString.Char8.ByteString'
addLinodeDiskRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                  Linode.Common.SecurityScheme s) =>
                    Linode.Common.Configuration s ->
                    AddLinodeDiskRequestBody ->
                    m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
addLinodeDiskRaw config
                 body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/disks
-- 
-- Monadic version of 'addLinodeDisk' (use with 'Linode.Common.runWithConfiguration')
addLinodeDiskM :: forall m s . (Linode.Common.MonadHTTP m,
                                Linode.Common.SecurityScheme s) =>
                  AddLinodeDiskRequestBody ->
                  Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response AddLinodeDiskResponse))
addLinodeDiskM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either AddLinodeDiskResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeDiskResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                          Disk)
                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AddLinodeDiskResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                            AddLinodeDiskResponseBodyDefault)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/disks
-- 
-- Monadic version of 'addLinodeDiskRaw' (use with 'Linode.Common.runWithConfiguration')
addLinodeDiskRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                   Linode.Common.SecurityScheme s) =>
                     AddLinodeDiskRequestBody ->
                     Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                        m
                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
addLinodeDiskRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/disks") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema addLinodeDiskRequestBody
-- 
-- 
data AddLinodeDiskRequestBody = AddLinodeDiskRequestBody {
  -- | authorized_keys: A list of public SSH keys that will be automatically appended
  -- to the root user\'s \`~\/.ssh\/authorized_keys\` file when deploying from an Image.
  addLinodeDiskRequestBodyAuthorized_keys :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | authorized_users: A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users \`~\/.ssh\/authorized_keys\` file automatically when deploying from an Image.
  , addLinodeDiskRequestBodyAuthorized_users :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | filesystem
  , addLinodeDiskRequestBodyFilesystem :: (GHC.Base.Maybe Disk_properties_filesystem)
  -- | image: An Image ID to deploy the Linode Disk from.
  -- 
  -- Access the Images List ([GET \/images](\/docs\/api\/images\/\#images-list)) endpoint with authentication to view
  -- all available Images. Official Linode Images start with \`linode\/\`, while your Account\'s Images start with \`private\/\`. Creating
  -- a disk from a Private Image requires \`read_only\` or \`read_write\` permissions for that Image. Access the User\'s
  -- Grant Update ([PUT \/account\/users\/{username}\/grants](\/docs\/api\/account\/\#users-grants-update)) endpoint to
  -- adjust permissions for an Account Image.
  , addLinodeDiskRequestBodyImage :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label
  , addLinodeDiskRequestBodyLabel :: (GHC.Base.Maybe Disk_properties_label)
  -- | root_pass: This sets the root user\'s password on a newly-created Linode Disk when deploying from an Image.
  -- 
  -- * **Required** when creating a Linode Disk from an Image, including when using a StackScript.
  -- 
  -- * Must meet a password strength score requirement that is calculated internally by the API.
  -- If the strength requirement is not met, you will receive a \`Password does not meet strength requirement\` error.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 128
  -- * Minimum length of 7
  , addLinodeDiskRequestBodyRoot_pass :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | size: The size of the Disk in MB.
  -- 
  -- Images require a minimum size. Access the Image View ([GET \/images\/{imageID}](\/docs\/api\/images\/\#image-view)) endpoint to view its size.
  , addLinodeDiskRequestBodySize :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | stackscript_data: This field is required only if the StackScript being deployed requires input
  -- data from the User for successful completion. See
  -- [User Defined Fields (UDFs)](\/docs\/guides\/writing-scripts-for-use-with-linode-stackscripts-a-tutorial\/\#user-defined-fields-udfs)
  -- for more details. This field is required to be valid JSON.
  , addLinodeDiskRequestBodyStackscript_data :: (GHC.Base.Maybe AddLinodeDiskRequestBodyStackscript_data)
  -- | stackscript_id: A StackScript ID that will cause the referenced StackScript to be run during
  -- deployment of this Linode. A compatible \`image\` is required to use a
  -- StackScript. To get a list of available StackScript and their permitted Images
  -- see [\/stackscripts](\/docs\/api\/stackscripts\/\#stackscripts-list).
  -- This field cannot be used when deploying from a Backup or a Private Image.
  , addLinodeDiskRequestBodyStackscript_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AddLinodeDiskRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authorized_keys" (addLinodeDiskRequestBodyAuthorized_keys obj) : (Data.Aeson..=) "authorized_users" (addLinodeDiskRequestBodyAuthorized_users obj) : (Data.Aeson..=) "filesystem" (addLinodeDiskRequestBodyFilesystem obj) : (Data.Aeson..=) "image" (addLinodeDiskRequestBodyImage obj) : (Data.Aeson..=) "label" (addLinodeDiskRequestBodyLabel obj) : (Data.Aeson..=) "root_pass" (addLinodeDiskRequestBodyRoot_pass obj) : (Data.Aeson..=) "size" (addLinodeDiskRequestBodySize obj) : (Data.Aeson..=) "stackscript_data" (addLinodeDiskRequestBodyStackscript_data obj) : (Data.Aeson..=) "stackscript_id" (addLinodeDiskRequestBodyStackscript_id obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authorized_keys" (addLinodeDiskRequestBodyAuthorized_keys obj) GHC.Base.<> ((Data.Aeson..=) "authorized_users" (addLinodeDiskRequestBodyAuthorized_users obj) GHC.Base.<> ((Data.Aeson..=) "filesystem" (addLinodeDiskRequestBodyFilesystem obj) GHC.Base.<> ((Data.Aeson..=) "image" (addLinodeDiskRequestBodyImage obj) GHC.Base.<> ((Data.Aeson..=) "label" (addLinodeDiskRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "root_pass" (addLinodeDiskRequestBodyRoot_pass obj) GHC.Base.<> ((Data.Aeson..=) "size" (addLinodeDiskRequestBodySize obj) GHC.Base.<> ((Data.Aeson..=) "stackscript_data" (addLinodeDiskRequestBodyStackscript_data obj) GHC.Base.<> (Data.Aeson..=) "stackscript_id" (addLinodeDiskRequestBodyStackscript_id obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON AddLinodeDiskRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddLinodeDiskRequestBody" (\obj -> ((((((((GHC.Base.pure AddLinodeDiskRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filesystem")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_pass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_id"))
-- | Defines the data type for the schema addLinodeDiskRequestBodyStackscript_data
-- 
-- This field is required only if the StackScript being deployed requires input
-- data from the User for successful completion. See
-- [User Defined Fields (UDFs)](\/docs\/guides\/writing-scripts-for-use-with-linode-stackscripts-a-tutorial\/\#user-defined-fields-udfs)
-- for more details. This field is required to be valid JSON.
data AddLinodeDiskRequestBodyStackscript_data = AddLinodeDiskRequestBodyStackscript_data {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AddLinodeDiskRequestBodyStackscript_data
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AddLinodeDiskRequestBodyStackscript_data
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddLinodeDiskRequestBodyStackscript_data" (\obj -> GHC.Base.pure AddLinodeDiskRequestBodyStackscript_data)
-- | Represents a response of the operation 'addLinodeDisk'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'AddLinodeDiskResponseError' is used.
data AddLinodeDiskResponse =                                       
   AddLinodeDiskResponseError GHC.Base.String                      -- ^ Means either no matching case available or a parse error
  | AddLinodeDiskResponse200 Disk                                  -- ^ Disk created.
  | AddLinodeDiskResponseDefault AddLinodeDiskResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema AddLinodeDiskResponseBodyDefault
-- 
-- 
data AddLinodeDiskResponseBodyDefault = AddLinodeDiskResponseBodyDefault {
  -- | errors
  addLinodeDiskResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AddLinodeDiskResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (addLinodeDiskResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (addLinodeDiskResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON AddLinodeDiskResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddLinodeDiskResponseBodyDefault" (\obj -> GHC.Base.pure AddLinodeDiskResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
