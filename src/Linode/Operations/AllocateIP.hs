-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation allocateIP
module Linode.Operations.AllocateIP where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /networking/ips
-- 
-- Allocates a new IPv4 Address on your Account. The Linode must be configured to support additional addresses - please [open a support ticket](\/docs\/api\/support\/\#support-ticket-open) requesting additional addresses before attempting allocation.
allocateIP :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> AllocateIPRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response AllocateIPResponse)) -- ^ Monad containing the result of the operation
allocateIP config
           body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either AllocateIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AllocateIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                IPAddress)
                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AllocateIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                  AllocateIPResponseBodyDefault)
                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /networking/ips
-- 
-- The same as 'allocateIP' but returns the raw 'Data.ByteString.Char8.ByteString'
allocateIPRaw :: forall m s . (Linode.Common.MonadHTTP m,
                               Linode.Common.SecurityScheme s) =>
                 Linode.Common.Configuration s ->
                 AllocateIPRequestBody ->
                 m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
allocateIPRaw config
              body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /networking/ips
-- 
-- Monadic version of 'allocateIP' (use with 'Linode.Common.runWithConfiguration')
allocateIPM :: forall m s . (Linode.Common.MonadHTTP m,
                             Linode.Common.SecurityScheme s) =>
               AllocateIPRequestBody ->
               Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                  m
                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                      (Network.HTTP.Client.Types.Response AllocateIPResponse))
allocateIPM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either AllocateIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AllocateIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 IPAddress)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AllocateIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                   AllocateIPResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /networking/ips
-- 
-- Monadic version of 'allocateIPRaw' (use with 'Linode.Common.runWithConfiguration')
allocateIPRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                Linode.Common.SecurityScheme s) =>
                  AllocateIPRequestBody ->
                  Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
allocateIPRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/ips") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema allocateIPRequestBody
-- 
-- 
data AllocateIPRequestBody = AllocateIPRequestBody {
  -- | linode_id: The ID of a Linode you you have access to that this address will be allocated to.
  allocateIPRequestBodyLinode_id :: GHC.Integer.Type.Integer
  -- | public: Whether to create a public or private IPv4 address.
  , allocateIPRequestBodyPublic :: GHC.Types.Bool
  -- | type: The type of address you are requesting. Only IPv4 addresses may be allocated through this endpoint.
  , allocateIPRequestBodyType :: AllocateIPRequestBodyType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AllocateIPRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "linode_id" (allocateIPRequestBodyLinode_id obj) : (Data.Aeson..=) "public" (allocateIPRequestBodyPublic obj) : (Data.Aeson..=) "type" (allocateIPRequestBodyType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "linode_id" (allocateIPRequestBodyLinode_id obj) GHC.Base.<> ((Data.Aeson..=) "public" (allocateIPRequestBodyPublic obj) GHC.Base.<> (Data.Aeson..=) "type" (allocateIPRequestBodyType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON AllocateIPRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AllocateIPRequestBody" (\obj -> ((GHC.Base.pure AllocateIPRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema allocateIPRequestBodyType
-- 
-- The type of address you are requesting. Only IPv4 addresses may be allocated through this endpoint.
data AllocateIPRequestBodyType
    = AllocateIPRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | AllocateIPRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | AllocateIPRequestBodyTypeEnumString_ipv4
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AllocateIPRequestBodyType
    where toJSON (AllocateIPRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AllocateIPRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AllocateIPRequestBodyTypeEnumString_ipv4) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4"
instance Data.Aeson.FromJSON AllocateIPRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4")
                                          then AllocateIPRequestBodyTypeEnumString_ipv4
                                          else AllocateIPRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'allocateIP'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'AllocateIPResponseError' is used.
data AllocateIPResponse =                                    
   AllocateIPResponseError GHC.Base.String                   -- ^ Means either no matching case available or a parse error
  | AllocateIPResponse200 IPAddress                          -- ^ IP Address allocated successfully.
  | AllocateIPResponseDefault AllocateIPResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema AllocateIPResponseBodyDefault
-- 
-- 
data AllocateIPResponseBodyDefault = AllocateIPResponseBodyDefault {
  -- | errors
  allocateIPResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AllocateIPResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (allocateIPResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (allocateIPResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON AllocateIPResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AllocateIPResponseBodyDefault" (\obj -> GHC.Base.pure AllocateIPResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
