-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getObjectStorageBuckets
module Linode.Operations.GetObjectStorageBuckets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /object-storage/buckets
-- 
-- Returns a paginated list of all Object Storage Buckets that you own.
-- 
-- 
-- This endpoint is available for convenience. It is recommended that instead you
-- use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/serviceops\/\#list-buckets) directly.
getObjectStorageBuckets :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetObjectStorageBucketsResponse) -- ^ Monadic computation which returns the result of the operation
getObjectStorageBuckets = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetObjectStorageBucketsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageBucketsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetObjectStorageBucketsResponseBody200)
                                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageBucketsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                     GetObjectStorageBucketsResponseBodyDefault)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/object-storage/buckets") GHC.Base.mempty)
-- | Represents a response of the operation 'getObjectStorageBuckets'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetObjectStorageBucketsResponseError' is used.
data GetObjectStorageBucketsResponse =
   GetObjectStorageBucketsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetObjectStorageBucketsResponse200 GetObjectStorageBucketsResponseBody200 -- ^ A paginated list of buckets you own.
  | GetObjectStorageBucketsResponseDefault GetObjectStorageBucketsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/object-storage\/buckets.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetObjectStorageBucketsResponseBody200 = GetObjectStorageBucketsResponseBody200 {
  -- | data
  getObjectStorageBucketsResponseBody200Data :: (GHC.Maybe.Maybe ([ObjectStorageBucket]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getObjectStorageBucketsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getObjectStorageBucketsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getObjectStorageBucketsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetObjectStorageBucketsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageBucketsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageBucketsResponseBody200" (\obj -> (((GHC.Base.pure GetObjectStorageBucketsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetObjectStorageBucketsResponseBody200' with all required fields.
mkGetObjectStorageBucketsResponseBody200 :: GetObjectStorageBucketsResponseBody200
mkGetObjectStorageBucketsResponseBody200 = GetObjectStorageBucketsResponseBody200{getObjectStorageBucketsResponseBody200Data = GHC.Maybe.Nothing,
                                                                                  getObjectStorageBucketsResponseBody200Page = GHC.Maybe.Nothing,
                                                                                  getObjectStorageBucketsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                                  getObjectStorageBucketsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetObjectStorageBucketsResponseBodyDefault = GetObjectStorageBucketsResponseBodyDefault {
  -- | errors
  getObjectStorageBucketsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetObjectStorageBucketsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getObjectStorageBucketsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageBucketsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageBucketsResponseBodyDefault" (\obj -> GHC.Base.pure GetObjectStorageBucketsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetObjectStorageBucketsResponseBodyDefault' with all required fields.
mkGetObjectStorageBucketsResponseBodyDefault :: GetObjectStorageBucketsResponseBodyDefault
mkGetObjectStorageBucketsResponseBodyDefault = GetObjectStorageBucketsResponseBodyDefault{getObjectStorageBucketsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
