-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createNodeBalancerConfig
module Linode.Operations.CreateNodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /nodebalancers/{nodeBalancerId}/configs
-- 
-- Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.
createNodeBalancerConfig :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ nodeBalancerId: The ID of the NodeBalancer to access.
  -> GHC.Maybe.Maybe NodeBalancerConfig -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreateNodeBalancerConfigResponse) -- ^ Monadic computation which returns the result of the operation
createNodeBalancerConfig nodeBalancerId
                         body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           NodeBalancerConfig)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                             CreateNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/nodebalancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel nodeBalancerId)) GHC.Base.++ "/configs"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'createNodeBalancerConfig'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateNodeBalancerConfigResponseError' is used.
data CreateNodeBalancerConfigResponse =
   CreateNodeBalancerConfigResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateNodeBalancerConfigResponse200 NodeBalancerConfig -- ^ Config created successfully.
  | CreateNodeBalancerConfigResponseDefault CreateNodeBalancerConfigResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateNodeBalancerConfigResponseBodyDefault = CreateNodeBalancerConfigResponseBodyDefault {
  -- | errors
  createNodeBalancerConfigResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerConfigResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createNodeBalancerConfigResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createNodeBalancerConfigResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerConfigResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerConfigResponseBodyDefault" (\obj -> GHC.Base.pure CreateNodeBalancerConfigResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreateNodeBalancerConfigResponseBodyDefault' with all required fields.
mkCreateNodeBalancerConfigResponseBodyDefault :: CreateNodeBalancerConfigResponseBodyDefault
mkCreateNodeBalancerConfigResponseBodyDefault = CreateNodeBalancerConfigResponseBodyDefault{createNodeBalancerConfigResponseBodyDefaultErrors = GHC.Maybe.Nothing}
