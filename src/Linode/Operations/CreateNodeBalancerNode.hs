-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createNodeBalancerNode
module Linode.Operations.CreateNodeBalancerNode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes
-- 
-- Creates a NodeBalancer Node, a backend that can accept traffic for this NodeBalancer Config. Nodes are routed requests on the configured port based on their status.
createNodeBalancerNode :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> CreateNodeBalancerNodeRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateNodeBalancerNodeResponse)) -- ^ Monad containing the result of the operation
createNodeBalancerNode config
                       body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateNodeBalancerNodeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerNodeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    NodeBalancerNode)
                                                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerNodeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                      CreateNodeBalancerNodeResponseBodyDefault)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes
-- 
-- The same as 'createNodeBalancerNode' but returns the raw 'Data.ByteString.Char8.ByteString'
createNodeBalancerNodeRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                           Linode.Common.SecurityScheme s) =>
                             Linode.Common.Configuration s ->
                             CreateNodeBalancerNodeRequestBody ->
                             m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createNodeBalancerNodeRaw config
                          body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes
-- 
-- Monadic version of 'createNodeBalancerNode' (use with 'Linode.Common.runWithConfiguration')
createNodeBalancerNodeM :: forall m s . (Linode.Common.MonadHTTP m,
                                         Linode.Common.SecurityScheme s) =>
                           CreateNodeBalancerNodeRequestBody ->
                           Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                              m
                                                              (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                  (Network.HTTP.Client.Types.Response CreateNodeBalancerNodeResponse))
createNodeBalancerNodeM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateNodeBalancerNodeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerNodeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     NodeBalancerNode)
                                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerNodeResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       CreateNodeBalancerNodeResponseBodyDefault)
                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes
-- 
-- Monadic version of 'createNodeBalancerNodeRaw' (use with 'Linode.Common.runWithConfiguration')
createNodeBalancerNodeRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              CreateNodeBalancerNodeRequestBody ->
                              Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createNodeBalancerNodeRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createNodeBalancerNodeRequestBody
-- 
-- 
data CreateNodeBalancerNodeRequestBody = CreateNodeBalancerNodeRequestBody {
  -- | address: The private IP Address where this backend can be reached. This _must_ be a private IP address.
  createNodeBalancerNodeRequestBodyAddress :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | config_id: The NodeBalancer Config ID that this Node belongs to.
  , createNodeBalancerNodeRequestBodyConfig_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | id: This node\'s unique ID.
  , createNodeBalancerNodeRequestBodyId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The label for this node.  This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_.]{3,32}\'
  , createNodeBalancerNodeRequestBodyLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | mode: The mode this NodeBalancer should use when sending traffic to this backend.
  -- * If set to \`accept\` this backend is accepting traffic.
  -- * If set to \`reject\` this backend will not receive traffic.
  -- * If set to \`drain\` this backend will not receive _new_ traffic, but connections already
  --   pinned to it will continue to be routed to it.
  -- 
  -- * If set to \`backup\`, this backend will only receive traffic if all \`accept\` nodes
  --   are down.
  , createNodeBalancerNodeRequestBodyMode :: (GHC.Base.Maybe CreateNodeBalancerNodeRequestBodyMode)
  -- | nodebalancer_id: The NodeBalancer ID that this Node belongs to.
  , createNodeBalancerNodeRequestBodyNodebalancer_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | status: The current status of this node, based on the configured checks of its NodeBalancer Config.
  , createNodeBalancerNodeRequestBodyStatus :: (GHC.Base.Maybe CreateNodeBalancerNodeRequestBodyStatus)
  -- | weight: Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  , createNodeBalancerNodeRequestBodyWeight :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateNodeBalancerNodeRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (createNodeBalancerNodeRequestBodyAddress obj) : (Data.Aeson..=) "config_id" (createNodeBalancerNodeRequestBodyConfig_id obj) : (Data.Aeson..=) "id" (createNodeBalancerNodeRequestBodyId obj) : (Data.Aeson..=) "label" (createNodeBalancerNodeRequestBodyLabel obj) : (Data.Aeson..=) "mode" (createNodeBalancerNodeRequestBodyMode obj) : (Data.Aeson..=) "nodebalancer_id" (createNodeBalancerNodeRequestBodyNodebalancer_id obj) : (Data.Aeson..=) "status" (createNodeBalancerNodeRequestBodyStatus obj) : (Data.Aeson..=) "weight" (createNodeBalancerNodeRequestBodyWeight obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (createNodeBalancerNodeRequestBodyAddress obj) GHC.Base.<> ((Data.Aeson..=) "config_id" (createNodeBalancerNodeRequestBodyConfig_id obj) GHC.Base.<> ((Data.Aeson..=) "id" (createNodeBalancerNodeRequestBodyId obj) GHC.Base.<> ((Data.Aeson..=) "label" (createNodeBalancerNodeRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "mode" (createNodeBalancerNodeRequestBodyMode obj) GHC.Base.<> ((Data.Aeson..=) "nodebalancer_id" (createNodeBalancerNodeRequestBodyNodebalancer_id obj) GHC.Base.<> ((Data.Aeson..=) "status" (createNodeBalancerNodeRequestBodyStatus obj) GHC.Base.<> (Data.Aeson..=) "weight" (createNodeBalancerNodeRequestBodyWeight obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerNodeRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerNodeRequestBody" (\obj -> (((((((GHC.Base.pure CreateNodeBalancerNodeRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "config_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weight"))
-- | Defines the enum schema createNodeBalancerNodeRequestBodyMode
-- 
-- The mode this NodeBalancer should use when sending traffic to this backend.
-- * If set to \`accept\` this backend is accepting traffic.
-- * If set to \`reject\` this backend will not receive traffic.
-- * If set to \`drain\` this backend will not receive _new_ traffic, but connections already
--   pinned to it will continue to be routed to it.
-- 
-- * If set to \`backup\`, this backend will only receive traffic if all \`accept\` nodes
--   are down.
data CreateNodeBalancerNodeRequestBodyMode
    = CreateNodeBalancerNodeRequestBodyModeEnumOther Data.Aeson.Types.Internal.Value
    | CreateNodeBalancerNodeRequestBodyModeEnumTyped Data.Text.Internal.Text
    | CreateNodeBalancerNodeRequestBodyModeEnumString_accept
    | CreateNodeBalancerNodeRequestBodyModeEnumString_backup
    | CreateNodeBalancerNodeRequestBodyModeEnumString_drain
    | CreateNodeBalancerNodeRequestBodyModeEnumString_reject
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateNodeBalancerNodeRequestBodyMode
    where toJSON (CreateNodeBalancerNodeRequestBodyModeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateNodeBalancerNodeRequestBodyModeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateNodeBalancerNodeRequestBodyModeEnumString_accept) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accept"
          toJSON (CreateNodeBalancerNodeRequestBodyModeEnumString_backup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup"
          toJSON (CreateNodeBalancerNodeRequestBodyModeEnumString_drain) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drain"
          toJSON (CreateNodeBalancerNodeRequestBodyModeEnumString_reject) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reject"
instance Data.Aeson.FromJSON CreateNodeBalancerNodeRequestBodyMode
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accept")
                                          then CreateNodeBalancerNodeRequestBodyModeEnumString_accept
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup")
                                                then CreateNodeBalancerNodeRequestBodyModeEnumString_backup
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drain")
                                                      then CreateNodeBalancerNodeRequestBodyModeEnumString_drain
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reject")
                                                            then CreateNodeBalancerNodeRequestBodyModeEnumString_reject
                                                            else CreateNodeBalancerNodeRequestBodyModeEnumOther val)
-- | Defines the enum schema createNodeBalancerNodeRequestBodyStatus
-- 
-- The current status of this node, based on the configured checks of its NodeBalancer Config.
data CreateNodeBalancerNodeRequestBodyStatus
    = CreateNodeBalancerNodeRequestBodyStatusEnumOther Data.Aeson.Types.Internal.Value
    | CreateNodeBalancerNodeRequestBodyStatusEnumTyped Data.Text.Internal.Text
    | CreateNodeBalancerNodeRequestBodyStatusEnumString_DOWN
    | CreateNodeBalancerNodeRequestBodyStatusEnumString_UP
    | CreateNodeBalancerNodeRequestBodyStatusEnumString_unknown
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateNodeBalancerNodeRequestBodyStatus
    where toJSON (CreateNodeBalancerNodeRequestBodyStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateNodeBalancerNodeRequestBodyStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateNodeBalancerNodeRequestBodyStatusEnumString_DOWN) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DOWN"
          toJSON (CreateNodeBalancerNodeRequestBodyStatusEnumString_UP) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "UP"
          toJSON (CreateNodeBalancerNodeRequestBodyStatusEnumString_unknown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown"
instance Data.Aeson.FromJSON CreateNodeBalancerNodeRequestBodyStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DOWN")
                                          then CreateNodeBalancerNodeRequestBodyStatusEnumString_DOWN
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "UP")
                                                then CreateNodeBalancerNodeRequestBodyStatusEnumString_UP
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown")
                                                      then CreateNodeBalancerNodeRequestBodyStatusEnumString_unknown
                                                      else CreateNodeBalancerNodeRequestBodyStatusEnumOther val)
-- | Represents a response of the operation 'createNodeBalancerNode'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateNodeBalancerNodeResponseError' is used.
data CreateNodeBalancerNodeResponse =                                                
   CreateNodeBalancerNodeResponseError GHC.Base.String                               -- ^ Means either no matching case available or a parse error
  | CreateNodeBalancerNodeResponse200 NodeBalancerNode                               -- ^ Node created successfully.
  | CreateNodeBalancerNodeResponseDefault CreateNodeBalancerNodeResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateNodeBalancerNodeResponseBodyDefault
-- 
-- 
data CreateNodeBalancerNodeResponseBodyDefault = CreateNodeBalancerNodeResponseBodyDefault {
  -- | errors
  createNodeBalancerNodeResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateNodeBalancerNodeResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createNodeBalancerNodeResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createNodeBalancerNodeResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerNodeResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerNodeResponseBodyDefault" (\obj -> GHC.Base.pure CreateNodeBalancerNodeResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
