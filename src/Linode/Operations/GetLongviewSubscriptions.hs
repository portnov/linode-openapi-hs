-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLongviewSubscriptions
module Linode.Operations.GetLongviewSubscriptions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /longview/subscriptions
-- 
-- Returns a paginated list of available Longview Subscriptions. This is a public endpoint and requires no authentication.
getLongviewSubscriptions :: forall m . Linode.Common.MonadHTTP m => GetLongviewSubscriptionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLongviewSubscriptionsResponse) -- ^ Monadic computation which returns the result of the operation
getLongviewSubscriptions parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLongviewSubscriptionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLongviewSubscriptionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetLongviewSubscriptionsResponseBody200)
                                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLongviewSubscriptionsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                   GetLongviewSubscriptionsResponseBodyDefault)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/longview/subscriptions") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLongviewSubscriptionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLongviewSubscriptionsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/longview\/subscriptions.GET.parameters@ in the specification.
-- 
-- 
data GetLongviewSubscriptionsParameters = GetLongviewSubscriptionsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getLongviewSubscriptionsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getLongviewSubscriptionsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLongviewSubscriptionsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLongviewSubscriptionsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLongviewSubscriptionsParameters" (\obj -> (GHC.Base.pure GetLongviewSubscriptionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetLongviewSubscriptionsParameters' with all required fields.
mkGetLongviewSubscriptionsParameters :: GetLongviewSubscriptionsParameters
mkGetLongviewSubscriptionsParameters = GetLongviewSubscriptionsParameters{getLongviewSubscriptionsParametersQueryPage = GHC.Maybe.Nothing,
                                                                          getLongviewSubscriptionsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getLongviewSubscriptions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLongviewSubscriptionsResponseError' is used.
data GetLongviewSubscriptionsResponse =
   GetLongviewSubscriptionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLongviewSubscriptionsResponse200 GetLongviewSubscriptionsResponseBody200 -- ^ A paginated list of Longview Subscriptions.
  | GetLongviewSubscriptionsResponseDefault GetLongviewSubscriptionsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/longview\/subscriptions.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLongviewSubscriptionsResponseBody200 = GetLongviewSubscriptionsResponseBody200 {
  -- | data
  getLongviewSubscriptionsResponseBody200Data :: (GHC.Maybe.Maybe ([LongviewSubscription]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLongviewSubscriptionsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLongviewSubscriptionsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLongviewSubscriptionsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLongviewSubscriptionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLongviewSubscriptionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLongviewSubscriptionsResponseBody200" (\obj -> (((GHC.Base.pure GetLongviewSubscriptionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLongviewSubscriptionsResponseBody200' with all required fields.
mkGetLongviewSubscriptionsResponseBody200 :: GetLongviewSubscriptionsResponseBody200
mkGetLongviewSubscriptionsResponseBody200 = GetLongviewSubscriptionsResponseBody200{getLongviewSubscriptionsResponseBody200Data = GHC.Maybe.Nothing,
                                                                                    getLongviewSubscriptionsResponseBody200Page = GHC.Maybe.Nothing,
                                                                                    getLongviewSubscriptionsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                                    getLongviewSubscriptionsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLongviewSubscriptionsResponseBodyDefault = GetLongviewSubscriptionsResponseBodyDefault {
  -- | errors
  getLongviewSubscriptionsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLongviewSubscriptionsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLongviewSubscriptionsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLongviewSubscriptionsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLongviewSubscriptionsResponseBodyDefault" (\obj -> GHC.Base.pure GetLongviewSubscriptionsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLongviewSubscriptionsResponseBodyDefault' with all required fields.
mkGetLongviewSubscriptionsResponseBodyDefault :: GetLongviewSubscriptionsResponseBodyDefault
mkGetLongviewSubscriptionsResponseBodyDefault = GetLongviewSubscriptionsResponseBodyDefault{getLongviewSubscriptionsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
