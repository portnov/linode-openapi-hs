-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLinodeTransfer
module Linode.Operations.GetLinodeTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/transfer
-- 
-- Returns a Linode\'s network transfer pool statistics for the current month.
getLinodeTransfer :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLinodeTransferResponse)) -- ^ Monad containing the result of the operation
getLinodeTransfer config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeTransferResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTransferResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetLinodeTransferResponseBody200)
                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTransferResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetLinodeTransferResponseBodyDefault)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/transfer") [])
-- | > GET /linode/instances/{linodeId}/transfer
-- 
-- The same as 'getLinodeTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'
getLinodeTransferRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                      Linode.Common.SecurityScheme s) =>
                        Linode.Common.Configuration s ->
                        m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLinodeTransferRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/transfer") [])
-- | > GET /linode/instances/{linodeId}/transfer
-- 
-- Monadic version of 'getLinodeTransfer' (use with 'Linode.Common.runWithConfiguration')
getLinodeTransferM :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response GetLinodeTransferResponse))
getLinodeTransferM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLinodeTransferResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTransferResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetLinodeTransferResponseBody200)
                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeTransferResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                   GetLinodeTransferResponseBodyDefault)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/transfer") [])
-- | > GET /linode/instances/{linodeId}/transfer
-- 
-- Monadic version of 'getLinodeTransferRaw' (use with 'Linode.Common.runWithConfiguration')
getLinodeTransferRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                       Linode.Common.SecurityScheme s) =>
                         Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLinodeTransferRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/transfer") [])
-- | Represents a response of the operation 'getLinodeTransfer'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeTransferResponseError' is used.
data GetLinodeTransferResponse =                                           
   GetLinodeTransferResponseError GHC.Base.String                          -- ^ Means either no matching case available or a parse error
  | GetLinodeTransferResponse200 GetLinodeTransferResponseBody200          -- ^ A collection of the specified Linode\'s network transfer statistics.
  | GetLinodeTransferResponseDefault GetLinodeTransferResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLinodeTransferResponseBody200
-- 
-- 
data GetLinodeTransferResponseBody200 = GetLinodeTransferResponseBody200 {
  -- | billable: The amount of network transfer this Linode has used, in GB, past your monthly quota.
  getLinodeTransferResponseBody200Billable :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | quota: The amount of network transfer this Linode adds to your transfer pool, in GB, for the current month\'s billing cycle.
  , getLinodeTransferResponseBody200Quota :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | used: The amount of network transfer used by this Linode, in bytes, for the current month\'s billing cycle.
  , getLinodeTransferResponseBody200Used :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLinodeTransferResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billable" (getLinodeTransferResponseBody200Billable obj) : (Data.Aeson..=) "quota" (getLinodeTransferResponseBody200Quota obj) : (Data.Aeson..=) "used" (getLinodeTransferResponseBody200Used obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billable" (getLinodeTransferResponseBody200Billable obj) GHC.Base.<> ((Data.Aeson..=) "quota" (getLinodeTransferResponseBody200Quota obj) GHC.Base.<> (Data.Aeson..=) "used" (getLinodeTransferResponseBody200Used obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTransferResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTransferResponseBody200" (\obj -> ((GHC.Base.pure GetLinodeTransferResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quota")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used"))
-- | Defines the data type for the schema GetLinodeTransferResponseBodyDefault
-- 
-- 
data GetLinodeTransferResponseBodyDefault = GetLinodeTransferResponseBodyDefault {
  -- | errors
  getLinodeTransferResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLinodeTransferResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getLinodeTransferResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getLinodeTransferResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeTransferResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeTransferResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeTransferResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
