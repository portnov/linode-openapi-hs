-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getClients
module Linode.Operations.GetClients where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /account/oauth-clients
-- 
-- Returns a paginated list of OAuth Clients registered to your Account.  OAuth Clients allow users to log into applications you write or host using their Linode Account, and may allow them to grant some level of access to their Linodes or other entities to your application.
getClients :: forall m . Linode.Common.MonadHTTP m => GetClientsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetClientsResponse) -- ^ Monadic computation which returns the result of the operation
getClients parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetClientsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetClientsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       GetClientsResponseBody200)
                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetClientsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         GetClientsResponseBodyDefault)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/oauth-clients") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getClientsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                       Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getClientsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/account\/oauth-clients.GET.parameters@ in the specification.
-- 
-- 
data GetClientsParameters = GetClientsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getClientsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getClientsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetClientsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getClientsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getClientsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getClientsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getClientsParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetClientsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetClientsParameters" (\obj -> (GHC.Base.pure GetClientsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetClientsParameters' with all required fields.
mkGetClientsParameters :: GetClientsParameters
mkGetClientsParameters = GetClientsParameters{getClientsParametersQueryPage = GHC.Maybe.Nothing,
                                              getClientsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getClients'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetClientsResponseError' is used.
data GetClientsResponse =
   GetClientsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetClientsResponse200 GetClientsResponseBody200 -- ^ A paginated list of OAuth Clients.
  | GetClientsResponseDefault GetClientsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/account\/oauth-clients.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetClientsResponseBody200 = GetClientsResponseBody200 {
  -- | data
  getClientsResponseBody200Data :: (GHC.Maybe.Maybe ([OAuthClient]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getClientsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getClientsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getClientsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetClientsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getClientsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetClientsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetClientsResponseBody200" (\obj -> (((GHC.Base.pure GetClientsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetClientsResponseBody200' with all required fields.
mkGetClientsResponseBody200 :: GetClientsResponseBody200
mkGetClientsResponseBody200 = GetClientsResponseBody200{getClientsResponseBody200Data = GHC.Maybe.Nothing,
                                                        getClientsResponseBody200Page = GHC.Maybe.Nothing,
                                                        getClientsResponseBody200Pages = GHC.Maybe.Nothing,
                                                        getClientsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetClientsResponseBodyDefault = GetClientsResponseBodyDefault {
  -- | errors
  getClientsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetClientsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getClientsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getClientsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetClientsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetClientsResponseBodyDefault" (\obj -> GHC.Base.pure GetClientsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetClientsResponseBodyDefault' with all required fields.
mkGetClientsResponseBodyDefault :: GetClientsResponseBodyDefault
mkGetClientsResponseBodyDefault = GetClientsResponseBodyDefault{getClientsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
