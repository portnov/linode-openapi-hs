-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation post_images_upload
module Linode.Operations.Post_images_upload where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /images/upload
-- 
-- Initiates an Image upload.
-- 
-- This endpoint creates a new private Image object and returns it along
-- with the URL to which image data can be uploaded.
-- 
-- - Image data must be uploaded within 24 hours of creation or the
-- upload will be cancelled and the image deleted.
-- 
-- - Image uploads should be made as an HTTP PUT request to the URL returned in the \`upload_to\`
-- response parameter, with a \`Content-type: application\/octet-stream\` header included in the
-- request. For example:
-- 
--       curl -v \\
--         -H \"Content-Type: application\/octet-stream\" \\
--         --upload-file example.img.gz \\
--         \$UPLOAD_URL \\
--         --progress-bar \\
--         --output \/dev\/null
-- 
-- - Uploaded image data should be compressed in gzip (\`.gz\`) format. The uncompressed disk should be in raw
-- disk image (\`.img\`) format. A maximum compressed file size of 5GB is supported for upload at this time.
-- 
-- **Note:** To initiate and complete an Image upload in a single step, see our guide on how to [Upload an Image](\/docs\/products\/tools\/images\/guides\/upload-an-image\/) using Cloud Manager or the Linode CLI \`image-upload\` plugin.
post_images_upload :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe Post_images_uploadRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response Post_images_uploadResponse)) -- ^ Monad containing the result of the operation
post_images_upload config
                   body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_images_uploadResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_images_uploadResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        Post_images_uploadResponseBody200)
                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> Post_images_uploadResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                          Post_images_uploadResponseBodyDefault)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/images/upload") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /images/upload
-- 
-- The same as 'post_images_upload' but returns the raw 'Data.ByteString.Char8.ByteString'
post_images_uploadRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                       Linode.Common.SecurityScheme s) =>
                         Linode.Common.Configuration s ->
                         GHC.Base.Maybe Post_images_uploadRequestBody ->
                         m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
post_images_uploadRaw config
                      body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/images/upload") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /images/upload
-- 
-- Monadic version of 'post_images_upload' (use with 'Linode.Common.runWithConfiguration')
post_images_uploadM :: forall m s . (Linode.Common.MonadHTTP m,
                                     Linode.Common.SecurityScheme s) =>
                       GHC.Base.Maybe Post_images_uploadRequestBody ->
                       Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                          m
                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response Post_images_uploadResponse))
post_images_uploadM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_images_uploadResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_images_uploadResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         Post_images_uploadResponseBody200)
                                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> Post_images_uploadResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                           Post_images_uploadResponseBodyDefault)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/images/upload") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /images/upload
-- 
-- Monadic version of 'post_images_uploadRaw' (use with 'Linode.Common.runWithConfiguration')
post_images_uploadRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                        Linode.Common.SecurityScheme s) =>
                          GHC.Base.Maybe Post_images_uploadRequestBody ->
                          Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
post_images_uploadRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/images/upload") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema post_images_uploadRequestBody
-- 
-- 
data Post_images_uploadRequestBody = Post_images_uploadRequestBody {
  -- | description: Description for the uploaded Image.
  post_images_uploadRequestBodyDescription :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: Label for the uploaded Image.
  , post_images_uploadRequestBodyLabel :: Data.Text.Internal.Text
  -- | region: The region to upload to. Once uploaded, the Image can be used in any region.
  , post_images_uploadRequestBodyRegion :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Post_images_uploadRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (post_images_uploadRequestBodyDescription obj) : (Data.Aeson..=) "label" (post_images_uploadRequestBodyLabel obj) : (Data.Aeson..=) "region" (post_images_uploadRequestBodyRegion obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (post_images_uploadRequestBodyDescription obj) GHC.Base.<> ((Data.Aeson..=) "label" (post_images_uploadRequestBodyLabel obj) GHC.Base.<> (Data.Aeson..=) "region" (post_images_uploadRequestBodyRegion obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_images_uploadRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_images_uploadRequestBody" (\obj -> ((GHC.Base.pure Post_images_uploadRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region"))
-- | Represents a response of the operation 'post_images_upload'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_images_uploadResponseError' is used.
data Post_images_uploadResponse =                                            
   Post_images_uploadResponseError GHC.Base.String                           -- ^ Means either no matching case available or a parse error
  | Post_images_uploadResponse200 Post_images_uploadResponseBody200          -- ^ Image Upload object including the upload URL and Image object.
  | Post_images_uploadResponseDefault Post_images_uploadResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema Post_images_uploadResponseBody200
-- 
-- 
data Post_images_uploadResponseBody200 = Post_images_uploadResponseBody200 {
  -- | image: Image object
  post_images_uploadResponseBody200Image :: (GHC.Base.Maybe Image)
  -- | upload_to: The URL to upload the Image to.
  , post_images_uploadResponseBody200Upload_to :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Post_images_uploadResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "image" (post_images_uploadResponseBody200Image obj) : (Data.Aeson..=) "upload_to" (post_images_uploadResponseBody200Upload_to obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "image" (post_images_uploadResponseBody200Image obj) GHC.Base.<> (Data.Aeson..=) "upload_to" (post_images_uploadResponseBody200Upload_to obj))
instance Data.Aeson.Types.FromJSON.FromJSON Post_images_uploadResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_images_uploadResponseBody200" (\obj -> (GHC.Base.pure Post_images_uploadResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "upload_to"))
-- | Defines the data type for the schema Post_images_uploadResponseBodyDefault
-- 
-- 
data Post_images_uploadResponseBodyDefault = Post_images_uploadResponseBodyDefault {
  -- | errors
  post_images_uploadResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Post_images_uploadResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (post_images_uploadResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (post_images_uploadResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON Post_images_uploadResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_images_uploadResponseBodyDefault" (\obj -> GHC.Base.pure Post_images_uploadResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
