-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteObjectStorageSSL
module Linode.Operations.DeleteObjectStorageSSL where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /object-storage/buckets/{clusterId}/{bucket}/ssl
-- 
-- Deletes this Object Storage bucket\'s user uploaded TLS\/SSL certificate and private key.
deleteObjectStorageSSL :: forall m . Linode.Common.MonadHTTP m => DeleteObjectStorageSSLParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteObjectStorageSSLResponse) -- ^ Monadic computation which returns the result of the operation
deleteObjectStorageSSL parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteObjectStorageSSLResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteObjectStorageSSLResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteObjectStorageSSLResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                             DeleteObjectStorageSSLResponseBodyDefault)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack (("/object-storage/buckets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteObjectStorageSSLParametersPathClusterId parameters))) GHC.Base.++ "/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteObjectStorageSSLParametersPathBucket parameters))) GHC.Base.++ "/ssl"))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/object-storage\/buckets\/{clusterId}\/{bucket}\/ssl.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteObjectStorageSSLParameters = DeleteObjectStorageSSLParameters {
  -- | pathBucket: Represents the parameter named \'bucket\'
  -- 
  -- The bucket name.
  deleteObjectStorageSSLParametersPathBucket :: Data.Text.Internal.Text
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- The ID of the cluster this bucket exists in.
  , deleteObjectStorageSSLParametersPathClusterId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteObjectStorageSSLParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathBucket" Data.Aeson.Types.ToJSON..= deleteObjectStorageSSLParametersPathBucket obj : "pathClusterId" Data.Aeson.Types.ToJSON..= deleteObjectStorageSSLParametersPathClusterId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathBucket" Data.Aeson.Types.ToJSON..= deleteObjectStorageSSLParametersPathBucket obj) GHC.Base.<> ("pathClusterId" Data.Aeson.Types.ToJSON..= deleteObjectStorageSSLParametersPathClusterId obj))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteObjectStorageSSLParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteObjectStorageSSLParameters" (\obj -> (GHC.Base.pure DeleteObjectStorageSSLParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathBucket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId"))
-- | Create a new 'DeleteObjectStorageSSLParameters' with all required fields.
mkDeleteObjectStorageSSLParameters :: Data.Text.Internal.Text -- ^ 'deleteObjectStorageSSLParametersPathBucket'
  -> Data.Text.Internal.Text -- ^ 'deleteObjectStorageSSLParametersPathClusterId'
  -> DeleteObjectStorageSSLParameters
mkDeleteObjectStorageSSLParameters deleteObjectStorageSSLParametersPathBucket deleteObjectStorageSSLParametersPathClusterId = DeleteObjectStorageSSLParameters{deleteObjectStorageSSLParametersPathBucket = deleteObjectStorageSSLParametersPathBucket,
                                                                                                                                                               deleteObjectStorageSSLParametersPathClusterId = deleteObjectStorageSSLParametersPathClusterId}
-- | Represents a response of the operation 'deleteObjectStorageSSL'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteObjectStorageSSLResponseError' is used.
data DeleteObjectStorageSSLResponse =
   DeleteObjectStorageSSLResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteObjectStorageSSLResponse200 Data.Aeson.Types.Internal.Object -- ^ Deletes this Object Storage bucket\'s user uploaded TLS\/SSL certificate and private key.
  | DeleteObjectStorageSSLResponseDefault DeleteObjectStorageSSLResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteObjectStorageSSLResponseBodyDefault = DeleteObjectStorageSSLResponseBodyDefault {
  -- | errors
  deleteObjectStorageSSLResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteObjectStorageSSLResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= deleteObjectStorageSSLResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= deleteObjectStorageSSLResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON DeleteObjectStorageSSLResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteObjectStorageSSLResponseBodyDefault" (\obj -> GHC.Base.pure DeleteObjectStorageSSLResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'DeleteObjectStorageSSLResponseBodyDefault' with all required fields.
mkDeleteObjectStorageSSLResponseBodyDefault :: DeleteObjectStorageSSLResponseBodyDefault
mkDeleteObjectStorageSSLResponseBodyDefault = DeleteObjectStorageSSLResponseBodyDefault{deleteObjectStorageSSLResponseBodyDefaultErrors = GHC.Maybe.Nothing}
