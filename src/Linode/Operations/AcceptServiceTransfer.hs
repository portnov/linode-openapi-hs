-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation acceptServiceTransfer
module Linode.Operations.AcceptServiceTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /account/service-transfers/{token}/accept
-- 
-- Accept a Service Transfer for the provided token to receive the services included in the transfer to your
-- account. At this time, only Linodes can be transferred.
-- 
-- When accepted, email confirmations are sent to the accounts that created and accepted the transfer. A transfer
-- can take up to three hours to complete once accepted. Once a transfer is completed, billing for transferred
-- services ends for the sending account and begins for the receiving account.
-- 
-- This command can only be accessed by the unrestricted users of the account that receives the transfer. Users
-- of the same account that created a transfer cannot accept the transfer.
-- 
-- There are several conditions that must be met in order to accept a transfer request:
-- 
-- 1. Only transfers with a \`pending\` status can be accepted.
-- 
-- 1. The account accepting the transfer must have a registered payment method and must not have a past due
--   balance or other account limitations for the services to be transferred.
-- 
-- 1. Both the account that created the transfer and the account that is accepting the transfer must not have any
-- active Terms of Service violations.
-- 
-- 1. The service must still be owned by the account that created the transfer.
-- 
-- 1. Linodes must not:
-- 
--     * be assigned to a NodeBalancer, Firewall, VLAN, or Managed Service.
-- 
--     * have any attached Block Storage Volumes.
-- 
--     * have any shared IP addresses.
-- 
--     * have any assigned \/56, \/64, or \/116 IPv6 ranges.
-- 
-- Any and all of the above conditions must be cured and maintained by the relevant account prior to the
-- transfer\'s expiration to allow the transfer to be accepted by the receiving account.
acceptServiceTransfer :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response AcceptServiceTransferResponse)) -- ^ Monad containing the result of the operation
acceptServiceTransfer config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either AcceptServiceTransferResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AcceptServiceTransferResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   AcceptServiceTransferResponseBody200)
                                                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AcceptServiceTransferResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                     AcceptServiceTransferResponseBodyDefault)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers/{token}/accept") [])
-- | > POST /account/service-transfers/{token}/accept
-- 
-- The same as 'acceptServiceTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'
acceptServiceTransferRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                          Linode.Common.SecurityScheme s) =>
                            Linode.Common.Configuration s ->
                            m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
acceptServiceTransferRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers/{token}/accept") [])
-- | > POST /account/service-transfers/{token}/accept
-- 
-- Monadic version of 'acceptServiceTransfer' (use with 'Linode.Common.runWithConfiguration')
acceptServiceTransferM :: forall m s . (Linode.Common.MonadHTTP m,
                                        Linode.Common.SecurityScheme s) =>
                          Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response AcceptServiceTransferResponse))
acceptServiceTransferM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either AcceptServiceTransferResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> AcceptServiceTransferResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             AcceptServiceTransferResponseBody200)
                                                                                                                                                                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> AcceptServiceTransferResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               AcceptServiceTransferResponseBodyDefault)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers/{token}/accept") [])
-- | > POST /account/service-transfers/{token}/accept
-- 
-- Monadic version of 'acceptServiceTransferRaw' (use with 'Linode.Common.runWithConfiguration')
acceptServiceTransferRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                           Linode.Common.SecurityScheme s) =>
                             Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                m
                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
acceptServiceTransferRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers/{token}/accept") [])
-- | Represents a response of the operation 'acceptServiceTransfer'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'AcceptServiceTransferResponseError' is used.
data AcceptServiceTransferResponse =                                               
   AcceptServiceTransferResponseError GHC.Base.String                              -- ^ Means either no matching case available or a parse error
  | AcceptServiceTransferResponse200 AcceptServiceTransferResponseBody200          -- ^ Service Transfer accepted. 
  | AcceptServiceTransferResponseDefault AcceptServiceTransferResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema AcceptServiceTransferResponseBody200
-- 
-- 
data AcceptServiceTransferResponseBody200 = AcceptServiceTransferResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AcceptServiceTransferResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AcceptServiceTransferResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AcceptServiceTransferResponseBody200" (\obj -> GHC.Base.pure AcceptServiceTransferResponseBody200)
-- | Defines the data type for the schema AcceptServiceTransferResponseBodyDefault
-- 
-- 
data AcceptServiceTransferResponseBodyDefault = AcceptServiceTransferResponseBodyDefault {
  -- | errors
  acceptServiceTransferResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AcceptServiceTransferResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (acceptServiceTransferResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (acceptServiceTransferResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON AcceptServiceTransferResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AcceptServiceTransferResponseBodyDefault" (\obj -> GHC.Base.pure AcceptServiceTransferResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
