-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLKEClusterAPIEndpoints
module Linode.Operations.GetLKEClusterAPIEndpoints where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /lke/clusters/{clusterId}/api-endpoints
-- 
-- List the Kubernetes API server endpoints for this cluster. Please note that it often takes 2-5 minutes before the endpoint is ready after first [creating a new cluster](\/docs\/api\/linode-kubernetes-engine-lke\/\#kubernetes-cluster-create).
getLKEClusterAPIEndpoints :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLKEClusterAPIEndpointsResponse)) -- ^ Monad containing the result of the operation
getLKEClusterAPIEndpoints config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLKEClusterAPIEndpointsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterAPIEndpointsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetLKEClusterAPIEndpointsResponseBody200)
                                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterAPIEndpointsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetLKEClusterAPIEndpointsResponseBodyDefault)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/api-endpoints") [])
-- | > GET /lke/clusters/{clusterId}/api-endpoints
-- 
-- The same as 'getLKEClusterAPIEndpoints' but returns the raw 'Data.ByteString.Char8.ByteString'
getLKEClusterAPIEndpointsRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                              Linode.Common.SecurityScheme s) =>
                                Linode.Common.Configuration s ->
                                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLKEClusterAPIEndpointsRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/api-endpoints") [])
-- | > GET /lke/clusters/{clusterId}/api-endpoints
-- 
-- Monadic version of 'getLKEClusterAPIEndpoints' (use with 'Linode.Common.runWithConfiguration')
getLKEClusterAPIEndpointsM :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response GetLKEClusterAPIEndpointsResponse))
getLKEClusterAPIEndpointsM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLKEClusterAPIEndpointsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterAPIEndpointsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetLKEClusterAPIEndpointsResponseBody200)
                                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLKEClusterAPIEndpointsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetLKEClusterAPIEndpointsResponseBodyDefault)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/api-endpoints") [])
-- | > GET /lke/clusters/{clusterId}/api-endpoints
-- 
-- Monadic version of 'getLKEClusterAPIEndpointsRaw' (use with 'Linode.Common.runWithConfiguration')
getLKEClusterAPIEndpointsRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                               Linode.Common.SecurityScheme s) =>
                                 Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                    m
                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLKEClusterAPIEndpointsRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/lke/clusters/{clusterId}/api-endpoints") [])
-- | Represents a response of the operation 'getLKEClusterAPIEndpoints'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLKEClusterAPIEndpointsResponseError' is used.
data GetLKEClusterAPIEndpointsResponse =                                                   
   GetLKEClusterAPIEndpointsResponseError GHC.Base.String                                  -- ^ Means either no matching case available or a parse error
  | GetLKEClusterAPIEndpointsResponse200 GetLKEClusterAPIEndpointsResponseBody200          -- ^ Returns the Kubernetes API server endpoints for this cluster.
  | GetLKEClusterAPIEndpointsResponseDefault GetLKEClusterAPIEndpointsResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLKEClusterAPIEndpointsResponseBody200
-- 
-- 
data GetLKEClusterAPIEndpointsResponseBody200 = GetLKEClusterAPIEndpointsResponseBody200 {
  -- | data
  getLKEClusterAPIEndpointsResponseBody200Data :: (GHC.Base.Maybe ([] GetLKEClusterAPIEndpointsResponseBody200Data))
  -- | page
  , getLKEClusterAPIEndpointsResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getLKEClusterAPIEndpointsResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getLKEClusterAPIEndpointsResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterAPIEndpointsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getLKEClusterAPIEndpointsResponseBody200Data obj) : (Data.Aeson..=) "page" (getLKEClusterAPIEndpointsResponseBody200Page obj) : (Data.Aeson..=) "pages" (getLKEClusterAPIEndpointsResponseBody200Pages obj) : (Data.Aeson..=) "results" (getLKEClusterAPIEndpointsResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getLKEClusterAPIEndpointsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getLKEClusterAPIEndpointsResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getLKEClusterAPIEndpointsResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getLKEClusterAPIEndpointsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterAPIEndpointsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterAPIEndpointsResponseBody200" (\obj -> (((GHC.Base.pure GetLKEClusterAPIEndpointsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Defines the data type for the schema GetLKEClusterAPIEndpointsResponseBody200Data
-- 
-- The Kubernetes API server endpoints for this cluster.
data GetLKEClusterAPIEndpointsResponseBody200Data = GetLKEClusterAPIEndpointsResponseBody200Data {
  -- | endpoint: A Kubernetes API server endpoint for this cluster.
  getLKEClusterAPIEndpointsResponseBody200DataEndpoint :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterAPIEndpointsResponseBody200Data
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "endpoint" (getLKEClusterAPIEndpointsResponseBody200DataEndpoint obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "endpoint" (getLKEClusterAPIEndpointsResponseBody200DataEndpoint obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterAPIEndpointsResponseBody200Data
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterAPIEndpointsResponseBody200Data" (\obj -> GHC.Base.pure GetLKEClusterAPIEndpointsResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "endpoint"))
-- | Defines the data type for the schema GetLKEClusterAPIEndpointsResponseBodyDefault
-- 
-- 
data GetLKEClusterAPIEndpointsResponseBodyDefault = GetLKEClusterAPIEndpointsResponseBodyDefault {
  -- | errors
  getLKEClusterAPIEndpointsResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLKEClusterAPIEndpointsResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getLKEClusterAPIEndpointsResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getLKEClusterAPIEndpointsResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLKEClusterAPIEndpointsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLKEClusterAPIEndpointsResponseBodyDefault" (\obj -> GHC.Base.pure GetLKEClusterAPIEndpointsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
