-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteLKENodePool
module Linode.Operations.DeleteLKENodePool where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /lke/clusters/{clusterId}/pools/{poolId}
-- 
-- Delete a specific Node Pool from a Kubernetes cluster.
-- 
-- **Deleting a Node Pool is a destructive action and cannot be undone.**
-- 
-- Deleting a Node Pool will delete all Linodes within that Pool.
deleteLKENodePool :: forall m . Linode.Common.MonadHTTP m => DeleteLKENodePoolParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteLKENodePoolResponse) -- ^ Monadic computation which returns the result of the operation
deleteLKENodePool parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteLKENodePoolResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteLKENodePoolResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.Internal.Object)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteLKENodePoolResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              DeleteLKENodePoolResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/lke/clusters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteLKENodePoolParametersPathClusterId parameters))) GHC.Base.++ ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteLKENodePoolParametersPathPoolId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/lke\/clusters\/{clusterId}\/pools\/{poolId}.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteLKENodePoolParameters = DeleteLKENodePoolParameters {
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- ID of the Kubernetes cluster to look up.
  deleteLKENodePoolParametersPathClusterId :: GHC.Types.Int
  -- | pathPoolId: Represents the parameter named \'poolId\'
  -- 
  -- ID of the Pool to look up
  , deleteLKENodePoolParametersPathPoolId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteLKENodePoolParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathClusterId" Data.Aeson.Types.ToJSON..= deleteLKENodePoolParametersPathClusterId obj : "pathPoolId" Data.Aeson.Types.ToJSON..= deleteLKENodePoolParametersPathPoolId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathClusterId" Data.Aeson.Types.ToJSON..= deleteLKENodePoolParametersPathClusterId obj) GHC.Base.<> ("pathPoolId" Data.Aeson.Types.ToJSON..= deleteLKENodePoolParametersPathPoolId obj))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteLKENodePoolParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteLKENodePoolParameters" (\obj -> (GHC.Base.pure DeleteLKENodePoolParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPoolId"))
-- | Create a new 'DeleteLKENodePoolParameters' with all required fields.
mkDeleteLKENodePoolParameters :: GHC.Types.Int -- ^ 'deleteLKENodePoolParametersPathClusterId'
  -> GHC.Types.Int -- ^ 'deleteLKENodePoolParametersPathPoolId'
  -> DeleteLKENodePoolParameters
mkDeleteLKENodePoolParameters deleteLKENodePoolParametersPathClusterId deleteLKENodePoolParametersPathPoolId = DeleteLKENodePoolParameters{deleteLKENodePoolParametersPathClusterId = deleteLKENodePoolParametersPathClusterId,
                                                                                                                                           deleteLKENodePoolParametersPathPoolId = deleteLKENodePoolParametersPathPoolId}
-- | Represents a response of the operation 'deleteLKENodePool'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteLKENodePoolResponseError' is used.
data DeleteLKENodePoolResponse =
   DeleteLKENodePoolResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteLKENodePoolResponse200 Data.Aeson.Types.Internal.Object -- ^ Delete successful
  | DeleteLKENodePoolResponseDefault DeleteLKENodePoolResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteLKENodePoolResponseBodyDefault = DeleteLKENodePoolResponseBodyDefault {
  -- | errors
  deleteLKENodePoolResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteLKENodePoolResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= deleteLKENodePoolResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= deleteLKENodePoolResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON DeleteLKENodePoolResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteLKENodePoolResponseBodyDefault" (\obj -> GHC.Base.pure DeleteLKENodePoolResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'DeleteLKENodePoolResponseBodyDefault' with all required fields.
mkDeleteLKENodePoolResponseBodyDefault :: DeleteLKENodePoolResponseBodyDefault
mkDeleteLKENodePoolResponseBodyDefault = DeleteLKENodePoolResponseBodyDefault{deleteLKENodePoolResponseBodyDefaultErrors = GHC.Maybe.Nothing}
