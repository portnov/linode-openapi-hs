-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createTag
module Linode.Operations.CreateTag where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /tags
-- 
-- Creates a new Tag and optionally tags requested objects with it immediately.
-- 
-- **Important**: You must be an unrestricted User in order to add or modify Tags.
createTag :: forall m . Linode.Common.MonadHTTP m => GHC.Maybe.Maybe CreateTagRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreateTagResponse) -- ^ Monadic computation which returns the result of the operation
createTag body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateTagResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateTagResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                              Tag)
                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateTagResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                CreateTagResponseBodyDefault)
                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/tags") GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/tags.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateTagRequestBody = CreateTagRequestBody {
  -- | domains: A list of Domain IDs to apply the new Tag to.  You must be allowed to \`read_write\` all of the requested Domains, or the Tag will not be created and an error will be returned.
  createTagRequestBodyDomains :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | label: The new Tag.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  -- * Minimum length of 3
  , createTagRequestBodyLabel :: Data.Text.Internal.Text
  -- | linodes: A list of Linode IDs to apply the new Tag to.  You must be allowed to \`read_write\` all of the requested Linodes, or the Tag will not be created and an error will be returned.
  , createTagRequestBodyLinodes :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | nodebalancers: A list of NodeBalancer IDs to apply the new Tag to. You must be allowed to \`read_write\` all of the requested NodeBalancers, or the Tag will not be created and an error will be returned.
  , createTagRequestBodyNodebalancers :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | volumes: A list of Volume IDs to apply the new Tag to.  You must be allowed to \`read_write\` all of the requested Volumes, or the Tag will not be created and an error will be returned.
  , createTagRequestBodyVolumes :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateTagRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("domains" Data.Aeson.Types.ToJSON..= createTagRequestBodyDomains obj : "label" Data.Aeson.Types.ToJSON..= createTagRequestBodyLabel obj : "linodes" Data.Aeson.Types.ToJSON..= createTagRequestBodyLinodes obj : "nodebalancers" Data.Aeson.Types.ToJSON..= createTagRequestBodyNodebalancers obj : "volumes" Data.Aeson.Types.ToJSON..= createTagRequestBodyVolumes obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("domains" Data.Aeson.Types.ToJSON..= createTagRequestBodyDomains obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= createTagRequestBodyLabel obj) GHC.Base.<> (("linodes" Data.Aeson.Types.ToJSON..= createTagRequestBodyLinodes obj) GHC.Base.<> (("nodebalancers" Data.Aeson.Types.ToJSON..= createTagRequestBodyNodebalancers obj) GHC.Base.<> ("volumes" Data.Aeson.Types.ToJSON..= createTagRequestBodyVolumes obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateTagRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateTagRequestBody" (\obj -> ((((GHC.Base.pure CreateTagRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "domains")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "volumes"))
-- | Create a new 'CreateTagRequestBody' with all required fields.
mkCreateTagRequestBody :: Data.Text.Internal.Text -- ^ 'createTagRequestBodyLabel'
  -> CreateTagRequestBody
mkCreateTagRequestBody createTagRequestBodyLabel = CreateTagRequestBody{createTagRequestBodyDomains = GHC.Maybe.Nothing,
                                                                        createTagRequestBodyLabel = createTagRequestBodyLabel,
                                                                        createTagRequestBodyLinodes = GHC.Maybe.Nothing,
                                                                        createTagRequestBodyNodebalancers = GHC.Maybe.Nothing,
                                                                        createTagRequestBodyVolumes = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'createTag'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateTagResponseError' is used.
data CreateTagResponse =
   CreateTagResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateTagResponse200 Tag -- ^ The new Tag.
  | CreateTagResponseDefault CreateTagResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateTagResponseBodyDefault = CreateTagResponseBodyDefault {
  -- | errors
  createTagResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateTagResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createTagResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createTagResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateTagResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateTagResponseBodyDefault" (\obj -> GHC.Base.pure CreateTagResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreateTagResponseBodyDefault' with all required fields.
mkCreateTagResponseBodyDefault :: CreateTagResponseBodyDefault
mkCreateTagResponseBodyDefault = CreateTagResponseBodyDefault{createTagResponseBodyDefaultErrors = GHC.Maybe.Nothing}
