-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation resetLinodePassword
module Linode.Operations.ResetLinodePassword where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/password
-- 
-- Resets the root password for this Linode.
-- * Your Linode must be [shut down](\/docs\/api\/linode-instances\/\#linode-shut-down) for a password reset to complete.
-- * If your Linode has more than one disk (not counting its swap disk), use the [Reset Disk Root Password](\/docs\/api\/linode-instances\/\#disk-root-password-reset) endpoint to update a specific disk\'s root password.
-- * A \`password_reset\` event is generated when a root password reset is successful.
resetLinodePassword :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ linodeId: ID of the Linode for which to reset its root password.
  -> GHC.Maybe.Maybe ResetLinodePasswordRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response ResetLinodePasswordResponse) -- ^ Monadic computation which returns the result of the operation
resetLinodePassword linodeId
                    body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ResetLinodePasswordResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ResetLinodePasswordResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.Internal.Object)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ResetLinodePasswordResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              ResetLinodePasswordResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel linodeId)) GHC.Base.++ "/password"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/password.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data ResetLinodePasswordRequestBody = ResetLinodePasswordRequestBody {
  -- | root_pass: The root user\'s password on this Linode. Linode passwords must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a Password does not meet strength requirement error.
  resetLinodePasswordRequestBodyRootPass :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ResetLinodePasswordRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("root_pass" Data.Aeson.Types.ToJSON..= resetLinodePasswordRequestBodyRootPass obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("root_pass" Data.Aeson.Types.ToJSON..= resetLinodePasswordRequestBodyRootPass obj)
instance Data.Aeson.Types.FromJSON.FromJSON ResetLinodePasswordRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResetLinodePasswordRequestBody" (\obj -> GHC.Base.pure ResetLinodePasswordRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "root_pass"))
-- | Create a new 'ResetLinodePasswordRequestBody' with all required fields.
mkResetLinodePasswordRequestBody :: Data.Text.Internal.Text -- ^ 'resetLinodePasswordRequestBodyRootPass'
  -> ResetLinodePasswordRequestBody
mkResetLinodePasswordRequestBody resetLinodePasswordRequestBodyRootPass = ResetLinodePasswordRequestBody{resetLinodePasswordRequestBodyRootPass = resetLinodePasswordRequestBodyRootPass}
-- | Represents a response of the operation 'resetLinodePassword'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ResetLinodePasswordResponseError' is used.
data ResetLinodePasswordResponse =
   ResetLinodePasswordResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ResetLinodePasswordResponse200 Data.Aeson.Types.Internal.Object -- ^ Password Reset.
  | ResetLinodePasswordResponseDefault ResetLinodePasswordResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data ResetLinodePasswordResponseBodyDefault = ResetLinodePasswordResponseBodyDefault {
  -- | errors
  resetLinodePasswordResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ResetLinodePasswordResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= resetLinodePasswordResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= resetLinodePasswordResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON ResetLinodePasswordResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ResetLinodePasswordResponseBodyDefault" (\obj -> GHC.Base.pure ResetLinodePasswordResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'ResetLinodePasswordResponseBodyDefault' with all required fields.
mkResetLinodePasswordResponseBodyDefault :: ResetLinodePasswordResponseBodyDefault
mkResetLinodePasswordResponseBodyDefault = ResetLinodePasswordResponseBodyDefault{resetLinodePasswordResponseBodyDefaultErrors = GHC.Maybe.Nothing}
