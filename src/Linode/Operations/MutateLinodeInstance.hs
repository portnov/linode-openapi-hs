-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation mutateLinodeInstance
module Linode.Operations.MutateLinodeInstance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/mutate
-- 
-- Linodes created with now-deprecated Types are entitled to a free upgrade to the next generation. A mutating Linode will be allocated any new resources the upgraded Type provides, and will be subsequently restarted if it was currently running.
-- If any actions are currently running or queued, those actions must be completed first before you can initiate a mutate.
mutateLinodeInstance :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ linodeId: ID of the Linode to mutate.
  -> GHC.Maybe.Maybe MutateLinodeInstanceRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response MutateLinodeInstanceResponse) -- ^ Monadic computation which returns the result of the operation
mutateLinodeInstance linodeId
                     body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either MutateLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> MutateLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Internal.Object)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> MutateLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 MutateLinodeInstanceResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel linodeId)) GHC.Base.++ "/mutate"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/mutate.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data MutateLinodeInstanceRequestBody = MutateLinodeInstanceRequestBody {
  -- | allow_auto_disk_resize: Automatically resize disks when resizing a Linode. When resizing down to a smaller plan your Linode\'s data must fit within the smaller disk size.
  mutateLinodeInstanceRequestBodyAllowAutoDiskResize :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MutateLinodeInstanceRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("allow_auto_disk_resize" Data.Aeson.Types.ToJSON..= mutateLinodeInstanceRequestBodyAllowAutoDiskResize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("allow_auto_disk_resize" Data.Aeson.Types.ToJSON..= mutateLinodeInstanceRequestBodyAllowAutoDiskResize obj)
instance Data.Aeson.Types.FromJSON.FromJSON MutateLinodeInstanceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "MutateLinodeInstanceRequestBody" (\obj -> GHC.Base.pure MutateLinodeInstanceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allow_auto_disk_resize"))
-- | Create a new 'MutateLinodeInstanceRequestBody' with all required fields.
mkMutateLinodeInstanceRequestBody :: MutateLinodeInstanceRequestBody
mkMutateLinodeInstanceRequestBody = MutateLinodeInstanceRequestBody{mutateLinodeInstanceRequestBodyAllowAutoDiskResize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'mutateLinodeInstance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'MutateLinodeInstanceResponseError' is used.
data MutateLinodeInstanceResponse =
   MutateLinodeInstanceResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | MutateLinodeInstanceResponse200 Data.Aeson.Types.Internal.Object -- ^ Mutate started.
  | MutateLinodeInstanceResponseDefault MutateLinodeInstanceResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data MutateLinodeInstanceResponseBodyDefault = MutateLinodeInstanceResponseBodyDefault {
  -- | errors
  mutateLinodeInstanceResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MutateLinodeInstanceResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= mutateLinodeInstanceResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= mutateLinodeInstanceResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON MutateLinodeInstanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "MutateLinodeInstanceResponseBodyDefault" (\obj -> GHC.Base.pure MutateLinodeInstanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'MutateLinodeInstanceResponseBodyDefault' with all required fields.
mkMutateLinodeInstanceResponseBodyDefault :: MutateLinodeInstanceResponseBodyDefault
mkMutateLinodeInstanceResponseBodyDefault = MutateLinodeInstanceResponseBodyDefault{mutateLinodeInstanceResponseBodyDefaultErrors = GHC.Maybe.Nothing}
