-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeNodeBalancers
module Linode.Operations.GetLinodeNodeBalancers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/nodebalancers
-- 
-- Returns a list of NodeBalancers that are assigned to this Linode and readable by the requesting User.
-- 
-- Read permission to a NodeBalancer can be given to a User by accessing the User\'s Grants Update
-- ([PUT \/account\/users\/{username}\/grants](\/docs\/api\/account\/\#users-grants-update)) endpoint.
getLinodeNodeBalancers :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ linodeId: ID of the Linode to look up
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeNodeBalancersResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeNodeBalancers linodeId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeNodeBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeNodeBalancersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetLinodeNodeBalancersResponseBody200)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel linodeId)) GHC.Base.++ "/nodebalancers"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getLinodeNodeBalancers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeNodeBalancersResponseError' is used.
data GetLinodeNodeBalancersResponse =
   GetLinodeNodeBalancersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeNodeBalancersResponse200 GetLinodeNodeBalancersResponseBody200 -- ^ Returns a paginated list of NodeBalancers.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/nodebalancers.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeNodeBalancersResponseBody200 = GetLinodeNodeBalancersResponseBody200 {
  -- | data
  getLinodeNodeBalancersResponseBody200Data :: (GHC.Maybe.Maybe ([NodeBalancer]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLinodeNodeBalancersResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLinodeNodeBalancersResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLinodeNodeBalancersResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeNodeBalancersResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLinodeNodeBalancersResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeNodeBalancersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeNodeBalancersResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeNodeBalancersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLinodeNodeBalancersResponseBody200' with all required fields.
mkGetLinodeNodeBalancersResponseBody200 :: GetLinodeNodeBalancersResponseBody200
mkGetLinodeNodeBalancersResponseBody200 = GetLinodeNodeBalancersResponseBody200{getLinodeNodeBalancersResponseBody200Data = GHC.Maybe.Nothing,
                                                                                getLinodeNodeBalancersResponseBody200Page = GHC.Maybe.Nothing,
                                                                                getLinodeNodeBalancersResponseBody200Pages = GHC.Maybe.Nothing,
                                                                                getLinodeNodeBalancersResponseBody200Results = GHC.Maybe.Nothing}
