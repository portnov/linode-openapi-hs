-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLinodeNodeBalancers
module Linode.Operations.GetLinodeNodeBalancers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /linode/instances/{linodeId}/nodebalancers
-- 
-- Returns a list of NodeBalancers that are assigned to this Linode and readable by the requesting User.
-- 
-- Read permission to a NodeBalancer can be given to a User by accessing the User\'s Grants Update
-- ([PUT \/account\/users\/{username}\/grants](\/docs\/api\/account\/\#users-grants-update)) endpoint.
getLinodeNodeBalancers :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLinodeNodeBalancersResponse)) -- ^ Monad containing the result of the operation
getLinodeNodeBalancers config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeNodeBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeNodeBalancersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetLinodeNodeBalancersResponseBody200)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/nodebalancers") [])
-- | > GET /linode/instances/{linodeId}/nodebalancers
-- 
-- The same as 'getLinodeNodeBalancers' but returns the raw 'Data.ByteString.Char8.ByteString'
getLinodeNodeBalancersRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                           Linode.Common.SecurityScheme s) =>
                             Linode.Common.Configuration s ->
                             m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLinodeNodeBalancersRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/nodebalancers") [])
-- | > GET /linode/instances/{linodeId}/nodebalancers
-- 
-- Monadic version of 'getLinodeNodeBalancers' (use with 'Linode.Common.runWithConfiguration')
getLinodeNodeBalancersM :: forall m s . (Linode.Common.MonadHTTP m,
                                         Linode.Common.SecurityScheme s) =>
                           Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                              m
                                                              (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                  (Network.HTTP.Client.Types.Response GetLinodeNodeBalancersResponse))
getLinodeNodeBalancersM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLinodeNodeBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeNodeBalancersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetLinodeNodeBalancersResponseBody200)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/nodebalancers") [])
-- | > GET /linode/instances/{linodeId}/nodebalancers
-- 
-- Monadic version of 'getLinodeNodeBalancersRaw' (use with 'Linode.Common.runWithConfiguration')
getLinodeNodeBalancersRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLinodeNodeBalancersRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/nodebalancers") [])
-- | Represents a response of the operation 'getLinodeNodeBalancers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeNodeBalancersResponseError' is used.
data GetLinodeNodeBalancersResponse =                                        
   GetLinodeNodeBalancersResponseError GHC.Base.String                       -- ^ Means either no matching case available or a parse error
  | GetLinodeNodeBalancersResponse200 GetLinodeNodeBalancersResponseBody200  -- ^ Returns a paginated list of NodeBalancers.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLinodeNodeBalancersResponseBody200
-- 
-- 
data GetLinodeNodeBalancersResponseBody200 = GetLinodeNodeBalancersResponseBody200 {
  -- | data
  getLinodeNodeBalancersResponseBody200Data :: (GHC.Base.Maybe ([] NodeBalancer))
  -- | page
  , getLinodeNodeBalancersResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getLinodeNodeBalancersResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getLinodeNodeBalancersResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLinodeNodeBalancersResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getLinodeNodeBalancersResponseBody200Data obj) : (Data.Aeson..=) "page" (getLinodeNodeBalancersResponseBody200Page obj) : (Data.Aeson..=) "pages" (getLinodeNodeBalancersResponseBody200Pages obj) : (Data.Aeson..=) "results" (getLinodeNodeBalancersResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getLinodeNodeBalancersResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getLinodeNodeBalancersResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getLinodeNodeBalancersResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getLinodeNodeBalancersResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeNodeBalancersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeNodeBalancersResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeNodeBalancersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
