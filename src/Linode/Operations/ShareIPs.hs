-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation shareIPs
module Linode.Operations.ShareIPs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /networking/ips/share
-- 
-- Configure shared IPs.
-- 
-- IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if
-- the primary Linode becomes unresponsive. This means that requests to the primary Linode\'s IP address can be
-- automatically rerouted to secondary Linodes at the configured shared IP addresses.
-- 
-- IP failover requires configuration of a failover service (such as [Keepalived](\/docs\/guides\/ip-failover-keepalived))
-- within the internal system of the primary Linode.
-- 
-- **Note**: IPv6 range sharing has limited availability in certain regions. Please contact customer support for
-- assistance in enabling IPv6 range sharing for your Linodes.
shareIPs :: forall m . Linode.Common.MonadHTTP m => ShareIPsRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response ShareIPsResponse) -- ^ Monadic computation which returns the result of the operation
shareIPs body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ShareIPsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ShareIPsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.Internal.Object)
                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ShareIPsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                             ShareIPsResponseBodyDefault)
                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/ips/share") GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/networking\/ips\/share.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data ShareIPsRequestBody = ShareIPsRequestBody {
  -- | ips: A list of secondary Linode IPs to share with the primary Linode.
  -- * Can include both IPv4 addresses and IPv6 ranges (omit \/56 and \/64 prefix lengths)
  -- * Can include both private and public IPv4 addresses.
  -- * You must have access to all of these addresses and they must be in the same Region as the primary
  -- Linode.
  -- * Enter an empty array to remove all shared IP addresses.
  shareIPsRequestBodyIps :: ([Data.Text.Internal.Text])
  -- | linode_id: The ID of the primary Linode that the addresses will be shared with.
  , shareIPsRequestBodyLinodeId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ShareIPsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("ips" Data.Aeson.Types.ToJSON..= shareIPsRequestBodyIps obj : "linode_id" Data.Aeson.Types.ToJSON..= shareIPsRequestBodyLinodeId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ips" Data.Aeson.Types.ToJSON..= shareIPsRequestBodyIps obj) GHC.Base.<> ("linode_id" Data.Aeson.Types.ToJSON..= shareIPsRequestBodyLinodeId obj))
instance Data.Aeson.Types.FromJSON.FromJSON ShareIPsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ShareIPsRequestBody" (\obj -> (GHC.Base.pure ShareIPsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "linode_id"))
-- | Create a new 'ShareIPsRequestBody' with all required fields.
mkShareIPsRequestBody :: [Data.Text.Internal.Text] -- ^ 'shareIPsRequestBodyIps'
  -> GHC.Types.Int -- ^ 'shareIPsRequestBodyLinodeId'
  -> ShareIPsRequestBody
mkShareIPsRequestBody shareIPsRequestBodyIps shareIPsRequestBodyLinodeId = ShareIPsRequestBody{shareIPsRequestBodyIps = shareIPsRequestBodyIps,
                                                                                               shareIPsRequestBodyLinodeId = shareIPsRequestBodyLinodeId}
-- | Represents a response of the operation 'shareIPs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ShareIPsResponseError' is used.
data ShareIPsResponse =
   ShareIPsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ShareIPsResponse200 Data.Aeson.Types.Internal.Object -- ^ IP Address sharing successful.
  | ShareIPsResponseDefault ShareIPsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data ShareIPsResponseBodyDefault = ShareIPsResponseBodyDefault {
  -- | errors
  shareIPsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ShareIPsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= shareIPsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= shareIPsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON ShareIPsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ShareIPsResponseBodyDefault" (\obj -> GHC.Base.pure ShareIPsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'ShareIPsResponseBodyDefault' with all required fields.
mkShareIPsResponseBodyDefault :: ShareIPsResponseBodyDefault
mkShareIPsResponseBodyDefault = ShareIPsResponseBodyDefault{shareIPsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
