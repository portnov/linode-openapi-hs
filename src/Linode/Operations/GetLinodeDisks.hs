-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLinodeDisks
module Linode.Operations.GetLinodeDisks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /linode/instances/{linodeId}/disks
-- 
-- View Disk information for Disks associated with this Linode.
getLinodeDisks :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe GHC.Integer.Type.Integer                                                                                    -- ^ page: The page of a collection to return. | Constraints: Minimum  of 1.0
  -> GHC.Base.Maybe GHC.Integer.Type.Integer                                                                                    -- ^ page_size: The number of items to return per page. | Constraints: Maxium  of 100.0, Minimum  of 25.0
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLinodeDisksResponse)) -- ^ Monad containing the result of the operation
getLinodeDisks config
               page
               page_size = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeDisksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeDisksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetLinodeDisksResponseBody200)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeDisksResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                   GetLinodeDisksResponseBodyDefault)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/disks") ((Data.Text.pack "page",
                                                                                                                                                                                                                                                                                                                                                                                                                                                 Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | > GET /linode/instances/{linodeId}/disks
-- 
-- The same as 'getLinodeDisks' but returns the raw 'Data.ByteString.Char8.ByteString'
getLinodeDisksRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                   Linode.Common.SecurityScheme s) =>
                     Linode.Common.Configuration s ->
                     GHC.Base.Maybe GHC.Integer.Type.Integer ->
                     GHC.Base.Maybe GHC.Integer.Type.Integer ->
                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLinodeDisksRaw config
                  page
                  page_size = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/disks") ((Data.Text.pack "page",
                                                                                                                                                                                                     Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                                              Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | > GET /linode/instances/{linodeId}/disks
-- 
-- Monadic version of 'getLinodeDisks' (use with 'Linode.Common.runWithConfiguration')
getLinodeDisksM :: forall m s . (Linode.Common.MonadHTTP m,
                                 Linode.Common.SecurityScheme s) =>
                   GHC.Base.Maybe GHC.Integer.Type.Integer ->
                   GHC.Base.Maybe GHC.Integer.Type.Integer ->
                   Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response GetLinodeDisksResponse))
getLinodeDisksM page
                page_size = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLinodeDisksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeDisksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetLinodeDisksResponseBody200)
                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeDisksResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    GetLinodeDisksResponseBodyDefault)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/disks") ((Data.Text.pack "page",
                                                                                                                                                                                                                                                                                                                                                                                                                                            Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | > GET /linode/instances/{linodeId}/disks
-- 
-- Monadic version of 'getLinodeDisksRaw' (use with 'Linode.Common.runWithConfiguration')
getLinodeDisksRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      GHC.Base.Maybe GHC.Integer.Type.Integer ->
                      GHC.Base.Maybe GHC.Integer.Type.Integer ->
                      Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLinodeDisksRawM page
                   page_size = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/disks") ((Data.Text.pack "page",
                                                                                                                                                                                                Linode.Common.stringifyModel Data.Functor.<$> page) : ((Data.Text.pack "page_size",
                                                                                                                                                                                                                                                         Linode.Common.stringifyModel Data.Functor.<$> page_size) : [])))
-- | Represents a response of the operation 'getLinodeDisks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeDisksResponseError' is used.
data GetLinodeDisksResponse =                                        
   GetLinodeDisksResponseError GHC.Base.String                       -- ^ Means either no matching case available or a parse error
  | GetLinodeDisksResponse200 GetLinodeDisksResponseBody200          -- ^ Returns a paginated list of disks associated with this Linode.
  | GetLinodeDisksResponseDefault GetLinodeDisksResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLinodeDisksResponseBody200
-- 
-- 
data GetLinodeDisksResponseBody200 = GetLinodeDisksResponseBody200 {
  -- | data
  getLinodeDisksResponseBody200Data :: (GHC.Base.Maybe ([] Disk))
  -- | page
  , getLinodeDisksResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getLinodeDisksResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getLinodeDisksResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLinodeDisksResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getLinodeDisksResponseBody200Data obj) : (Data.Aeson..=) "page" (getLinodeDisksResponseBody200Page obj) : (Data.Aeson..=) "pages" (getLinodeDisksResponseBody200Pages obj) : (Data.Aeson..=) "results" (getLinodeDisksResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getLinodeDisksResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getLinodeDisksResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getLinodeDisksResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getLinodeDisksResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeDisksResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeDisksResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeDisksResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Defines the data type for the schema GetLinodeDisksResponseBodyDefault
-- 
-- 
data GetLinodeDisksResponseBodyDefault = GetLinodeDisksResponseBodyDefault {
  -- | errors
  getLinodeDisksResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLinodeDisksResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getLinodeDisksResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getLinodeDisksResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeDisksResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeDisksResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeDisksResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
