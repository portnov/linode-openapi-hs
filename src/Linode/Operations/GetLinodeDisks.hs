-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinodeDisks
module Linode.Operations.GetLinodeDisks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /linode/instances/{linodeId}/disks
-- 
-- View Disk information for Disks associated with this Linode.
getLinodeDisks :: forall m . Linode.Common.MonadHTTP m => GetLinodeDisksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinodeDisksResponse) -- ^ Monadic computation which returns the result of the operation
getLinodeDisks parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinodeDisksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeDisksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   GetLinodeDisksResponseBody200)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinodeDisksResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                     GetLinodeDisksResponseBodyDefault)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getLinodeDisksParametersPathLinodeId parameters))) GHC.Base.++ "/disks"))) [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinodeDisksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinodeDisksParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/disks.GET.parameters@ in the specification.
-- 
-- 
data GetLinodeDisksParameters = GetLinodeDisksParameters {
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- ID of the Linode to look up.
  getLinodeDisksParametersPathLinodeId :: GHC.Types.Int
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  , getLinodeDisksParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getLinodeDisksParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeDisksParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeDisksParametersPathLinodeId obj : "queryPage" Data.Aeson.Types.ToJSON..= getLinodeDisksParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getLinodeDisksParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLinodeId" Data.Aeson.Types.ToJSON..= getLinodeDisksParametersPathLinodeId obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= getLinodeDisksParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getLinodeDisksParametersQueryPageSize obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeDisksParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeDisksParameters" (\obj -> ((GHC.Base.pure GetLinodeDisksParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetLinodeDisksParameters' with all required fields.
mkGetLinodeDisksParameters :: GHC.Types.Int -- ^ 'getLinodeDisksParametersPathLinodeId'
  -> GetLinodeDisksParameters
mkGetLinodeDisksParameters getLinodeDisksParametersPathLinodeId = GetLinodeDisksParameters{getLinodeDisksParametersPathLinodeId = getLinodeDisksParametersPathLinodeId,
                                                                                           getLinodeDisksParametersQueryPage = GHC.Maybe.Nothing,
                                                                                           getLinodeDisksParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getLinodeDisks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinodeDisksResponseError' is used.
data GetLinodeDisksResponse =
   GetLinodeDisksResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinodeDisksResponse200 GetLinodeDisksResponseBody200 -- ^ Returns a paginated list of disks associated with this Linode.
  | GetLinodeDisksResponseDefault GetLinodeDisksResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/disks.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeDisksResponseBody200 = GetLinodeDisksResponseBody200 {
  -- | data
  getLinodeDisksResponseBody200Data :: (GHC.Maybe.Maybe ([Disk]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getLinodeDisksResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getLinodeDisksResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getLinodeDisksResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeDisksResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeDisksResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeDisksResponseBody200" (\obj -> (((GHC.Base.pure GetLinodeDisksResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetLinodeDisksResponseBody200' with all required fields.
mkGetLinodeDisksResponseBody200 :: GetLinodeDisksResponseBody200
mkGetLinodeDisksResponseBody200 = GetLinodeDisksResponseBody200{getLinodeDisksResponseBody200Data = GHC.Maybe.Nothing,
                                                                getLinodeDisksResponseBody200Page = GHC.Maybe.Nothing,
                                                                getLinodeDisksResponseBody200Pages = GHC.Maybe.Nothing,
                                                                getLinodeDisksResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinodeDisksResponseBodyDefault = GetLinodeDisksResponseBodyDefault {
  -- | errors
  getLinodeDisksResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinodeDisksResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLinodeDisksResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLinodeDisksResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinodeDisksResponseBodyDefault" (\obj -> GHC.Base.pure GetLinodeDisksResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLinodeDisksResponseBodyDefault' with all required fields.
mkGetLinodeDisksResponseBodyDefault :: GetLinodeDisksResponseBodyDefault
mkGetLinodeDisksResponseBodyDefault = GetLinodeDisksResponseBodyDefault{getLinodeDisksResponseBodyDefaultErrors = GHC.Maybe.Nothing}
