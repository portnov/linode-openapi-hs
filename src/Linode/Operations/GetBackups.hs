-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getBackups
module Linode.Operations.GetBackups where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /linode/instances/{linodeId}/backups
-- 
-- Returns information about this Linode\'s available backups.
getBackups :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetBackupsResponse)) -- ^ Monad containing the result of the operation
getBackups config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBackupsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBackupsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetBackupsResponseBody200)
                                                                                                                                                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetBackupsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                    GetBackupsResponseBodyDefault)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/backups") [])
-- | > GET /linode/instances/{linodeId}/backups
-- 
-- The same as 'getBackups' but returns the raw 'Data.ByteString.Char8.ByteString'
getBackupsRaw :: forall m s . (Linode.Common.MonadHTTP m,
                               Linode.Common.SecurityScheme s) =>
                 Linode.Common.Configuration s ->
                 m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getBackupsRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/backups") [])
-- | > GET /linode/instances/{linodeId}/backups
-- 
-- Monadic version of 'getBackups' (use with 'Linode.Common.runWithConfiguration')
getBackupsM :: forall m s . (Linode.Common.MonadHTTP m,
                             Linode.Common.SecurityScheme s) =>
               Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                  m
                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                      (Network.HTTP.Client.Types.Response GetBackupsResponse))
getBackupsM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetBackupsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBackupsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                            GetBackupsResponseBody200)
                                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetBackupsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                              GetBackupsResponseBodyDefault)
                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/backups") [])
-- | > GET /linode/instances/{linodeId}/backups
-- 
-- Monadic version of 'getBackupsRaw' (use with 'Linode.Common.runWithConfiguration')
getBackupsRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                Linode.Common.SecurityScheme s) =>
                  Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getBackupsRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/linode/instances/{linodeId}/backups") [])
-- | Represents a response of the operation 'getBackups'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBackupsResponseError' is used.
data GetBackupsResponse =                                    
   GetBackupsResponseError GHC.Base.String                   -- ^ Means either no matching case available or a parse error
  | GetBackupsResponse200 GetBackupsResponseBody200          -- ^ A collection of the specified Linode\'s available backups.
  | GetBackupsResponseDefault GetBackupsResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetBackupsResponseBody200
-- 
-- 
data GetBackupsResponseBody200 = GetBackupsResponseBody200 {
  -- | automatic
  getBackupsResponseBody200Automatic :: (GHC.Base.Maybe ([] GetBackupsResponseBody200Automatic))
  -- | snapshot
  , getBackupsResponseBody200Snapshot :: (GHC.Base.Maybe GetBackupsResponseBody200Snapshot)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "automatic" (getBackupsResponseBody200Automatic obj) : (Data.Aeson..=) "snapshot" (getBackupsResponseBody200Snapshot obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "automatic" (getBackupsResponseBody200Automatic obj) GHC.Base.<> (Data.Aeson..=) "snapshot" (getBackupsResponseBody200Snapshot obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetBackupsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBackupsResponseBody200" (\obj -> (GHC.Base.pure GetBackupsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "automatic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "snapshot"))
-- | Defines the data type for the schema GetBackupsResponseBody200Automatic
-- 
-- 
data GetBackupsResponseBody200Automatic = GetBackupsResponseBody200Automatic {
  -- | configs: A list of the labels of the Configuration profiles that are part of the Backup.
  getBackupsResponseBody200AutomaticConfigs :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | created: The date the Backup was taken.
  , getBackupsResponseBody200AutomaticCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | disks: A list of the disks that are part of the Backup.
  , getBackupsResponseBody200AutomaticDisks :: (GHC.Base.Maybe ([] GetBackupsResponseBody200AutomaticDisks))
  -- | finished: The date the Backup completed.
  , getBackupsResponseBody200AutomaticFinished :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID of this Backup.
  , getBackupsResponseBody200AutomaticId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: A label for Backups that are of type \`snapshot\`.
  , getBackupsResponseBody200AutomaticLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | status: The current state of a specific Backup.
  , getBackupsResponseBody200AutomaticStatus :: (GHC.Base.Maybe GetBackupsResponseBody200AutomaticStatus)
  -- | type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
  , getBackupsResponseBody200AutomaticType :: (GHC.Base.Maybe GetBackupsResponseBody200AutomaticType)
  -- | updated: The date the Backup was most recently updated.
  , getBackupsResponseBody200AutomaticUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBody200Automatic
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "configs" (getBackupsResponseBody200AutomaticConfigs obj) : (Data.Aeson..=) "created" (getBackupsResponseBody200AutomaticCreated obj) : (Data.Aeson..=) "disks" (getBackupsResponseBody200AutomaticDisks obj) : (Data.Aeson..=) "finished" (getBackupsResponseBody200AutomaticFinished obj) : (Data.Aeson..=) "id" (getBackupsResponseBody200AutomaticId obj) : (Data.Aeson..=) "label" (getBackupsResponseBody200AutomaticLabel obj) : (Data.Aeson..=) "status" (getBackupsResponseBody200AutomaticStatus obj) : (Data.Aeson..=) "type" (getBackupsResponseBody200AutomaticType obj) : (Data.Aeson..=) "updated" (getBackupsResponseBody200AutomaticUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "configs" (getBackupsResponseBody200AutomaticConfigs obj) GHC.Base.<> ((Data.Aeson..=) "created" (getBackupsResponseBody200AutomaticCreated obj) GHC.Base.<> ((Data.Aeson..=) "disks" (getBackupsResponseBody200AutomaticDisks obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getBackupsResponseBody200AutomaticFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getBackupsResponseBody200AutomaticId obj) GHC.Base.<> ((Data.Aeson..=) "label" (getBackupsResponseBody200AutomaticLabel obj) GHC.Base.<> ((Data.Aeson..=) "status" (getBackupsResponseBody200AutomaticStatus obj) GHC.Base.<> ((Data.Aeson..=) "type" (getBackupsResponseBody200AutomaticType obj) GHC.Base.<> (Data.Aeson..=) "updated" (getBackupsResponseBody200AutomaticUpdated obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetBackupsResponseBody200Automatic
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBackupsResponseBody200Automatic" (\obj -> ((((((((GHC.Base.pure GetBackupsResponseBody200Automatic GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "configs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema GetBackupsResponseBody200AutomaticDisks
-- 
-- 
data GetBackupsResponseBody200AutomaticDisks = GetBackupsResponseBody200AutomaticDisks {
  -- | filesystem
  getBackupsResponseBody200AutomaticDisksFilesystem :: (GHC.Base.Maybe Disk_properties_filesystem)
  -- | label
  , getBackupsResponseBody200AutomaticDisksLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | size
  , getBackupsResponseBody200AutomaticDisksSize :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBody200AutomaticDisks
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "filesystem" (getBackupsResponseBody200AutomaticDisksFilesystem obj) : (Data.Aeson..=) "label" (getBackupsResponseBody200AutomaticDisksLabel obj) : (Data.Aeson..=) "size" (getBackupsResponseBody200AutomaticDisksSize obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "filesystem" (getBackupsResponseBody200AutomaticDisksFilesystem obj) GHC.Base.<> ((Data.Aeson..=) "label" (getBackupsResponseBody200AutomaticDisksLabel obj) GHC.Base.<> (Data.Aeson..=) "size" (getBackupsResponseBody200AutomaticDisksSize obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBackupsResponseBody200AutomaticDisks
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBackupsResponseBody200AutomaticDisks" (\obj -> ((GHC.Base.pure GetBackupsResponseBody200AutomaticDisks GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filesystem")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size"))
-- | Defines the enum schema GetBackupsResponseBody200AutomaticStatus
-- 
-- The current state of a specific Backup.
data GetBackupsResponseBody200AutomaticStatus
    = GetBackupsResponseBody200AutomaticStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetBackupsResponseBody200AutomaticStatusEnumTyped Data.Text.Internal.Text
    | GetBackupsResponseBody200AutomaticStatusEnumString_failed
    | GetBackupsResponseBody200AutomaticStatusEnumString_needsPostProcessing
    | GetBackupsResponseBody200AutomaticStatusEnumString_paused
    | GetBackupsResponseBody200AutomaticStatusEnumString_pending
    | GetBackupsResponseBody200AutomaticStatusEnumString_running
    | GetBackupsResponseBody200AutomaticStatusEnumString_successful
    | GetBackupsResponseBody200AutomaticStatusEnumString_userAborted
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBody200AutomaticStatus
    where toJSON (GetBackupsResponseBody200AutomaticStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_failed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_needsPostProcessing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "needsPostProcessing"
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_paused) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paused"
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_running) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_successful) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "successful"
          toJSON (GetBackupsResponseBody200AutomaticStatusEnumString_userAborted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "userAborted"
instance Data.Aeson.FromJSON GetBackupsResponseBody200AutomaticStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                          then GetBackupsResponseBody200AutomaticStatusEnumString_failed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "needsPostProcessing")
                                                then GetBackupsResponseBody200AutomaticStatusEnumString_needsPostProcessing
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paused")
                                                      then GetBackupsResponseBody200AutomaticStatusEnumString_paused
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                            then GetBackupsResponseBody200AutomaticStatusEnumString_pending
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                                  then GetBackupsResponseBody200AutomaticStatusEnumString_running
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "successful")
                                                                        then GetBackupsResponseBody200AutomaticStatusEnumString_successful
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "userAborted")
                                                                              then GetBackupsResponseBody200AutomaticStatusEnumString_userAborted
                                                                              else GetBackupsResponseBody200AutomaticStatusEnumOther val)
-- | Defines the enum schema GetBackupsResponseBody200AutomaticType
-- 
-- This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
data GetBackupsResponseBody200AutomaticType
    = GetBackupsResponseBody200AutomaticTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetBackupsResponseBody200AutomaticTypeEnumTyped Data.Text.Internal.Text
    | GetBackupsResponseBody200AutomaticTypeEnumString_auto
    | GetBackupsResponseBody200AutomaticTypeEnumString_snapshot
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBody200AutomaticType
    where toJSON (GetBackupsResponseBody200AutomaticTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetBackupsResponseBody200AutomaticTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetBackupsResponseBody200AutomaticTypeEnumString_auto) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto"
          toJSON (GetBackupsResponseBody200AutomaticTypeEnumString_snapshot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snapshot"
instance Data.Aeson.FromJSON GetBackupsResponseBody200AutomaticType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto")
                                          then GetBackupsResponseBody200AutomaticTypeEnumString_auto
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snapshot")
                                                then GetBackupsResponseBody200AutomaticTypeEnumString_snapshot
                                                else GetBackupsResponseBody200AutomaticTypeEnumOther val)
-- | Defines the data type for the schema GetBackupsResponseBody200Snapshot
-- 
-- 
data GetBackupsResponseBody200Snapshot = GetBackupsResponseBody200Snapshot {
  -- | current: An object representing a Backup or snapshot for a Linode with Backup service enabled.
  getBackupsResponseBody200SnapshotCurrent :: (GHC.Base.Maybe Backup)
  -- | in_progress: An object representing a Backup or snapshot for a Linode with Backup service enabled.
  , getBackupsResponseBody200SnapshotIn_progress :: (GHC.Base.Maybe Backup)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBody200Snapshot
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "current" (getBackupsResponseBody200SnapshotCurrent obj) : (Data.Aeson..=) "in_progress" (getBackupsResponseBody200SnapshotIn_progress obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "current" (getBackupsResponseBody200SnapshotCurrent obj) GHC.Base.<> (Data.Aeson..=) "in_progress" (getBackupsResponseBody200SnapshotIn_progress obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetBackupsResponseBody200Snapshot
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBackupsResponseBody200Snapshot" (\obj -> (GHC.Base.pure GetBackupsResponseBody200Snapshot GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "current")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in_progress"))
-- | Defines the data type for the schema GetBackupsResponseBodyDefault
-- 
-- 
data GetBackupsResponseBodyDefault = GetBackupsResponseBodyDefault {
  -- | errors
  getBackupsResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetBackupsResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getBackupsResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getBackupsResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetBackupsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBackupsResponseBodyDefault" (\obj -> GHC.Base.pure GetBackupsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
