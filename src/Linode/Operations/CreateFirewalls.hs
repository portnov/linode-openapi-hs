-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createFirewalls
module Linode.Operations.CreateFirewalls where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /networking/firewalls
-- 
-- Creates a Firewall to filter network traffic.
-- 
-- * Use the \`rules\` property to create inbound and outbound access rules.
-- 
-- * Use the \`devices\` property to assign the Firewall to a service and apply its Rules to the device. Requires \`read_write\` [User\'s Grants](\/docs\/api\/account\/\#users-grants-view) to the device.
-- Currently, Firewalls can only be assigned to Linode instances.
-- 
-- * A Firewall can be assigned to multiple Linode instances at a time.
-- 
-- * A Linode instance can have one active, assigned Firewall at a time.
-- Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.
-- 
-- * A \`firewall_create\` Event is generated when this endpoint returns successfully.
createFirewalls :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe CreateFirewallsRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateFirewallsResponse)) -- ^ Monad containing the result of the operation
createFirewalls config
                body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateFirewallsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateFirewallsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Firewall)
                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateFirewallsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 CreateFirewallsResponseBodyDefault)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/firewalls") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /networking/firewalls
-- 
-- The same as 'createFirewalls' but returns the raw 'Data.ByteString.Char8.ByteString'
createFirewallsRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                    Linode.Common.SecurityScheme s) =>
                      Linode.Common.Configuration s ->
                      GHC.Base.Maybe CreateFirewallsRequestBody ->
                      m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createFirewallsRaw config
                   body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/firewalls") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /networking/firewalls
-- 
-- Monadic version of 'createFirewalls' (use with 'Linode.Common.runWithConfiguration')
createFirewallsM :: forall m s . (Linode.Common.MonadHTTP m,
                                  Linode.Common.SecurityScheme s) =>
                    GHC.Base.Maybe CreateFirewallsRequestBody ->
                    Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                       m
                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                           (Network.HTTP.Client.Types.Response CreateFirewallsResponse))
createFirewallsM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateFirewallsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateFirewallsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                Firewall)
                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateFirewallsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                  CreateFirewallsResponseBodyDefault)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/firewalls") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /networking/firewalls
-- 
-- Monadic version of 'createFirewallsRaw' (use with 'Linode.Common.runWithConfiguration')
createFirewallsRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                     Linode.Common.SecurityScheme s) =>
                       GHC.Base.Maybe CreateFirewallsRequestBody ->
                       Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                          m
                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createFirewallsRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networking/firewalls") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createFirewallsRequestBody
-- 
-- 
data CreateFirewallsRequestBody = CreateFirewallsRequestBody {
  -- | created: When this Firewall was created.
  createFirewallsRequestBodyCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The Firewall\'s unique ID.
  , createFirewallsRequestBodyId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The Firewall\'s label, for display purposes only.
  -- 
  -- Firewall labels have the following constraints:
  -- 
  --   * Must begin and end with an alphanumeric character.
  --   * May only consist of alphanumeric characters, dashes (\`-\`), underscores (\`_\`) or periods (\`.\`).
  --   * Cannot have two dashes (\`--\`), underscores (\`__\`) or periods (\`..\`) in a row.
  --   * Must be between 3 and 32 characters.
  --   * Must be unique.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+\$\'
  , createFirewallsRequestBodyLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | rules: The inbound and outbound access rules to apply to the Firewall.
  -- 
  -- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
  , createFirewallsRequestBodyRules :: (GHC.Base.Maybe CreateFirewallsRequestBodyRules)
  -- | status: The status of this Firewall.
  -- 
  --   * When a Firewall is first created its status is \`enabled\`.
  --   * Use the [Update Firewall](\/docs\/api\/networking\/\#firewall-update) endpoint to set a Firewall\'s status to \`enabled\` or \`disabled\`.
  --   * Use the [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete) endpoint to delete a Firewall.
  , createFirewallsRequestBodyStatus :: (GHC.Base.Maybe CreateFirewallsRequestBodyStatus)
  -- | tags: An array of tags applied to this object. Tags are for organizational purposes only.
  , createFirewallsRequestBodyTags :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | updated: When this Firewall was last updated.
  , createFirewallsRequestBodyUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateFirewallsRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (createFirewallsRequestBodyCreated obj) : (Data.Aeson..=) "id" (createFirewallsRequestBodyId obj) : (Data.Aeson..=) "label" (createFirewallsRequestBodyLabel obj) : (Data.Aeson..=) "rules" (createFirewallsRequestBodyRules obj) : (Data.Aeson..=) "status" (createFirewallsRequestBodyStatus obj) : (Data.Aeson..=) "tags" (createFirewallsRequestBodyTags obj) : (Data.Aeson..=) "updated" (createFirewallsRequestBodyUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (createFirewallsRequestBodyCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (createFirewallsRequestBodyId obj) GHC.Base.<> ((Data.Aeson..=) "label" (createFirewallsRequestBodyLabel obj) GHC.Base.<> ((Data.Aeson..=) "rules" (createFirewallsRequestBodyRules obj) GHC.Base.<> ((Data.Aeson..=) "status" (createFirewallsRequestBodyStatus obj) GHC.Base.<> ((Data.Aeson..=) "tags" (createFirewallsRequestBodyTags obj) GHC.Base.<> (Data.Aeson..=) "updated" (createFirewallsRequestBodyUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateFirewallsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateFirewallsRequestBody" (\obj -> ((((((GHC.Base.pure CreateFirewallsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema createFirewallsRequestBodyRules
-- 
-- The inbound and outbound access rules to apply to the Firewall.
-- 
-- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
data CreateFirewallsRequestBodyRules = CreateFirewallsRequestBodyRules {
  -- | inbound: The inbound rules for the firewall, as a JSON array.
  createFirewallsRequestBodyRulesInbound :: (GHC.Base.Maybe ([] FirewallRuleConfig))
  -- | inbound_policy: The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
  , createFirewallsRequestBodyRulesInbound_policy :: (GHC.Base.Maybe CreateFirewallsRequestBodyRulesInbound_policy)
  -- | outbound: The outbound rules for the firewall, as a JSON array.
  , createFirewallsRequestBodyRulesOutbound :: (GHC.Base.Maybe ([] FirewallRuleConfig))
  -- | outbound_policy: The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
  , createFirewallsRequestBodyRulesOutbound_policy :: (GHC.Base.Maybe CreateFirewallsRequestBodyRulesOutbound_policy)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateFirewallsRequestBodyRules
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "inbound" (createFirewallsRequestBodyRulesInbound obj) : (Data.Aeson..=) "inbound_policy" (createFirewallsRequestBodyRulesInbound_policy obj) : (Data.Aeson..=) "outbound" (createFirewallsRequestBodyRulesOutbound obj) : (Data.Aeson..=) "outbound_policy" (createFirewallsRequestBodyRulesOutbound_policy obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "inbound" (createFirewallsRequestBodyRulesInbound obj) GHC.Base.<> ((Data.Aeson..=) "inbound_policy" (createFirewallsRequestBodyRulesInbound_policy obj) GHC.Base.<> ((Data.Aeson..=) "outbound" (createFirewallsRequestBodyRulesOutbound obj) GHC.Base.<> (Data.Aeson..=) "outbound_policy" (createFirewallsRequestBodyRulesOutbound_policy obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateFirewallsRequestBodyRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateFirewallsRequestBodyRules" (\obj -> (((GHC.Base.pure CreateFirewallsRequestBodyRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound_policy"))
-- | Defines the enum schema createFirewallsRequestBodyRulesInbound_policy
-- 
-- The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
data CreateFirewallsRequestBodyRulesInbound_policy
    = CreateFirewallsRequestBodyRulesInbound_policyEnumOther Data.Aeson.Types.Internal.Value
    | CreateFirewallsRequestBodyRulesInbound_policyEnumTyped Data.Text.Internal.Text
    | CreateFirewallsRequestBodyRulesInbound_policyEnumString_ACCEPT
    | CreateFirewallsRequestBodyRulesInbound_policyEnumString_DROP
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateFirewallsRequestBodyRulesInbound_policy
    where toJSON (CreateFirewallsRequestBodyRulesInbound_policyEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateFirewallsRequestBodyRulesInbound_policyEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateFirewallsRequestBodyRulesInbound_policyEnumString_ACCEPT) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT"
          toJSON (CreateFirewallsRequestBodyRulesInbound_policyEnumString_DROP) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP"
instance Data.Aeson.FromJSON CreateFirewallsRequestBodyRulesInbound_policy
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT")
                                          then CreateFirewallsRequestBodyRulesInbound_policyEnumString_ACCEPT
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP")
                                                then CreateFirewallsRequestBodyRulesInbound_policyEnumString_DROP
                                                else CreateFirewallsRequestBodyRulesInbound_policyEnumOther val)
-- | Defines the enum schema createFirewallsRequestBodyRulesOutbound_policy
-- 
-- The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
data CreateFirewallsRequestBodyRulesOutbound_policy
    = CreateFirewallsRequestBodyRulesOutbound_policyEnumOther Data.Aeson.Types.Internal.Value
    | CreateFirewallsRequestBodyRulesOutbound_policyEnumTyped Data.Text.Internal.Text
    | CreateFirewallsRequestBodyRulesOutbound_policyEnumString_ACCEPT
    | CreateFirewallsRequestBodyRulesOutbound_policyEnumString_DROP
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateFirewallsRequestBodyRulesOutbound_policy
    where toJSON (CreateFirewallsRequestBodyRulesOutbound_policyEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateFirewallsRequestBodyRulesOutbound_policyEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateFirewallsRequestBodyRulesOutbound_policyEnumString_ACCEPT) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT"
          toJSON (CreateFirewallsRequestBodyRulesOutbound_policyEnumString_DROP) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP"
instance Data.Aeson.FromJSON CreateFirewallsRequestBodyRulesOutbound_policy
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT")
                                          then CreateFirewallsRequestBodyRulesOutbound_policyEnumString_ACCEPT
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP")
                                                then CreateFirewallsRequestBodyRulesOutbound_policyEnumString_DROP
                                                else CreateFirewallsRequestBodyRulesOutbound_policyEnumOther val)
-- | Defines the enum schema createFirewallsRequestBodyStatus
-- 
-- The status of this Firewall.
-- 
--   * When a Firewall is first created its status is \`enabled\`.
--   * Use the [Update Firewall](\/docs\/api\/networking\/\#firewall-update) endpoint to set a Firewall\'s status to \`enabled\` or \`disabled\`.
--   * Use the [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete) endpoint to delete a Firewall.
data CreateFirewallsRequestBodyStatus
    = CreateFirewallsRequestBodyStatusEnumOther Data.Aeson.Types.Internal.Value
    | CreateFirewallsRequestBodyStatusEnumTyped Data.Text.Internal.Text
    | CreateFirewallsRequestBodyStatusEnumString_deleted
    | CreateFirewallsRequestBodyStatusEnumString_disabled
    | CreateFirewallsRequestBodyStatusEnumString_enabled
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateFirewallsRequestBodyStatus
    where toJSON (CreateFirewallsRequestBodyStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateFirewallsRequestBodyStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreateFirewallsRequestBodyStatusEnumString_deleted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "deleted"
          toJSON (CreateFirewallsRequestBodyStatusEnumString_disabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled"
          toJSON (CreateFirewallsRequestBodyStatusEnumString_enabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "enabled"
instance Data.Aeson.FromJSON CreateFirewallsRequestBodyStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "deleted")
                                          then CreateFirewallsRequestBodyStatusEnumString_deleted
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled")
                                                then CreateFirewallsRequestBodyStatusEnumString_disabled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "enabled")
                                                      then CreateFirewallsRequestBodyStatusEnumString_enabled
                                                      else CreateFirewallsRequestBodyStatusEnumOther val)
-- | Represents a response of the operation 'createFirewalls'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateFirewallsResponseError' is used.
data CreateFirewallsResponse =                                         
   CreateFirewallsResponseError GHC.Base.String                        -- ^ Means either no matching case available or a parse error
  | CreateFirewallsResponse200 Firewall                                -- ^ Returns information about the created Firewall.
  | CreateFirewallsResponseDefault CreateFirewallsResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateFirewallsResponseBodyDefault
-- 
-- 
data CreateFirewallsResponseBodyDefault = CreateFirewallsResponseBodyDefault {
  -- | errors
  createFirewallsResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateFirewallsResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createFirewallsResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createFirewallsResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateFirewallsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateFirewallsResponseBodyDefault" (\obj -> GHC.Base.pure CreateFirewallsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
