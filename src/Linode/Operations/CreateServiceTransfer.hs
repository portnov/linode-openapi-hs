-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation createServiceTransfer
module Linode.Operations.CreateServiceTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > POST /account/service-transfers
-- 
-- Creates a transfer request for the specified services. A request can contain any of the specified service types
-- and any number of each service type. At this time, only Linodes can be transferred.
-- 
-- When created successfully, a confirmation email is sent to the account that created this transfer containing a
-- transfer token and instructions on completing the transfer.
-- 
-- When a transfer is [accepted](\/docs\/api\/account\/\#service-transfer-accept), the requested services are moved to
-- the receiving account. Linode services will not experience interruptions due to the transfer process. Backups
-- for Linodes are transferred as well.
-- 
-- DNS records that are associated with requested services will not be transferred or updated. Please ensure that
-- associated DNS records have been updated or communicated to the recipient prior to the transfer.
-- 
-- A transfer can take up to three hours to complete once accepted. When a transfer is
-- completed, billing for transferred services ends for the sending account and begins for the receiving account.
-- 
-- This command can only be accessed by the unrestricted users of an account.
-- 
-- There are several conditions that must be met in order to successfully create a transfer request:
-- 
-- 1. The account creating the transfer must not have a past due balance or active Terms of Service violation.
-- 
-- 1. The service must be owned by the account that is creating the transfer.
-- 
-- 1. The service must not be assigned to another Service Transfer that is pending or that has been accepted and is
-- incomplete.
-- 
-- 1. Linodes must not:
-- 
--     * be assigned to a NodeBalancer, Firewall, VLAN, or Managed Service.
-- 
--     * have any attached Block Storage Volumes.
-- 
--     * have any shared IP addresses.
-- 
--     * have any assigned \/56, \/64, or \/116 IPv6 ranges.
createServiceTransfer :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe CreateServiceTransferRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response CreateServiceTransferResponse)) -- ^ Monad containing the result of the operation
createServiceTransfer config
                      body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateServiceTransferResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateServiceTransferResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 ServiceTransfer)
                                                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateServiceTransferResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                   CreateServiceTransferResponseBodyDefault)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/service-transfers
-- 
-- The same as 'createServiceTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'
createServiceTransferRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                          Linode.Common.SecurityScheme s) =>
                            Linode.Common.Configuration s ->
                            GHC.Base.Maybe CreateServiceTransferRequestBody ->
                            m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createServiceTransferRaw config
                         body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/service-transfers
-- 
-- Monadic version of 'createServiceTransfer' (use with 'Linode.Common.runWithConfiguration')
createServiceTransferM :: forall m s . (Linode.Common.MonadHTTP m,
                                        Linode.Common.SecurityScheme s) =>
                          GHC.Base.Maybe CreateServiceTransferRequestBody ->
                          Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response CreateServiceTransferResponse))
createServiceTransferM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either CreateServiceTransferResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateServiceTransferResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  ServiceTransfer)
                                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateServiceTransferResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    CreateServiceTransferResponseBodyDefault)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/service-transfers
-- 
-- Monadic version of 'createServiceTransferRaw' (use with 'Linode.Common.runWithConfiguration')
createServiceTransferRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                           Linode.Common.SecurityScheme s) =>
                             GHC.Base.Maybe CreateServiceTransferRequestBody ->
                             Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                m
                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
createServiceTransferRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/service-transfers") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema createServiceTransferRequestBody
-- 
-- 
data CreateServiceTransferRequestBody = CreateServiceTransferRequestBody {
  -- | entities
  createServiceTransferRequestBodyEntities :: ServiceTransfer_properties_entities
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateServiceTransferRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "entities" (createServiceTransferRequestBodyEntities obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "entities" (createServiceTransferRequestBodyEntities obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateServiceTransferRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateServiceTransferRequestBody" (\obj -> GHC.Base.pure CreateServiceTransferRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "entities"))
-- | Represents a response of the operation 'createServiceTransfer'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateServiceTransferResponseError' is used.
data CreateServiceTransferResponse =                                               
   CreateServiceTransferResponseError GHC.Base.String                              -- ^ Means either no matching case available or a parse error
  | CreateServiceTransferResponse200 ServiceTransfer                               -- ^ Returns a Service Transfer object for the request. 
  | CreateServiceTransferResponseDefault CreateServiceTransferResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema CreateServiceTransferResponseBodyDefault
-- 
-- 
data CreateServiceTransferResponseBodyDefault = CreateServiceTransferResponseBodyDefault {
  -- | errors
  createServiceTransferResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreateServiceTransferResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (createServiceTransferResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (createServiceTransferResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateServiceTransferResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateServiceTransferResponseBodyDefault" (\obj -> GHC.Base.pure CreateServiceTransferResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
