-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation updateObjectStorageBucketAccess
module Linode.Operations.UpdateObjectStorageBucketAccess where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > PUT /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Allows changing basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings.
-- Only allows enabling\/disabling CORS for all origins, and\/or setting canned ACLs.
-- 
-- 
-- For more fine-grained control of both systems, please use the more [fully-featured S3 API](https:\/\/docs.ceph.com\/en\/latest\/radosgw\/s3\/bucketops\/\#put-bucket-acl) directly.
updateObjectStorageBucketAccess :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Base.Maybe UpdateObjectStorageBucketAccessRequestBody                                                                                   -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response UpdateObjectStorageBucketAccessResponse)) -- ^ Monad containing the result of the operation
updateObjectStorageBucketAccess config
                                body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either UpdateObjectStorageBucketAccessResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateObjectStorageBucketAccessResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               UpdateObjectStorageBucketAccessResponseBody200)
                                                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateObjectStorageBucketAccessResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 UpdateObjectStorageBucketAccessResponseBodyDefault)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- The same as 'updateObjectStorageBucketAccess' but returns the raw 'Data.ByteString.Char8.ByteString'
updateObjectStorageBucketAccessRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                                    Linode.Common.SecurityScheme s) =>
                                      Linode.Common.Configuration s ->
                                      GHC.Base.Maybe UpdateObjectStorageBucketAccessRequestBody ->
                                      m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
updateObjectStorageBucketAccessRaw config
                                   body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Monadic version of 'updateObjectStorageBucketAccess' (use with 'Linode.Common.runWithConfiguration')
updateObjectStorageBucketAccessM :: forall m s . (Linode.Common.MonadHTTP m,
                                                  Linode.Common.SecurityScheme s) =>
                                    GHC.Base.Maybe UpdateObjectStorageBucketAccessRequestBody ->
                                    Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                       m
                                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                           (Network.HTTP.Client.Types.Response UpdateObjectStorageBucketAccessResponse))
updateObjectStorageBucketAccessM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either UpdateObjectStorageBucketAccessResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> UpdateObjectStorageBucketAccessResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                UpdateObjectStorageBucketAccessResponseBody200)
                                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> UpdateObjectStorageBucketAccessResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  UpdateObjectStorageBucketAccessResponseBodyDefault)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | > PUT /object-storage/buckets/{clusterId}/{bucket}/access
-- 
-- Monadic version of 'updateObjectStorageBucketAccessRaw' (use with 'Linode.Common.runWithConfiguration')
updateObjectStorageBucketAccessRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                                     Linode.Common.SecurityScheme s) =>
                                       GHC.Base.Maybe UpdateObjectStorageBucketAccessRequestBody ->
                                       Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                          m
                                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
updateObjectStorageBucketAccessRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/object-storage/buckets/{clusterId}/{bucket}/access") [] body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema updateObjectStorageBucketAccessRequestBody
-- 
-- 
data UpdateObjectStorageBucketAccessRequestBody = UpdateObjectStorageBucketAccessRequestBody {
  -- | acl: The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
  updateObjectStorageBucketAccessRequestBodyAcl :: (GHC.Base.Maybe UpdateObjectStorageBucketAccessRequestBodyAcl)
  -- | cors_enabled: If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
  , updateObjectStorageBucketAccessRequestBodyCors_enabled :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateObjectStorageBucketAccessRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "acl" (updateObjectStorageBucketAccessRequestBodyAcl obj) : (Data.Aeson..=) "cors_enabled" (updateObjectStorageBucketAccessRequestBodyCors_enabled obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "acl" (updateObjectStorageBucketAccessRequestBodyAcl obj) GHC.Base.<> (Data.Aeson..=) "cors_enabled" (updateObjectStorageBucketAccessRequestBodyCors_enabled obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketAccessRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketAccessRequestBody" (\obj -> (GHC.Base.pure UpdateObjectStorageBucketAccessRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cors_enabled"))
-- | Defines the enum schema updateObjectStorageBucketAccessRequestBodyAcl
-- 
-- The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
data UpdateObjectStorageBucketAccessRequestBodyAcl
    = UpdateObjectStorageBucketAccessRequestBodyAclEnumOther Data.Aeson.Types.Internal.Value
    | UpdateObjectStorageBucketAccessRequestBodyAclEnumTyped Data.Text.Internal.Text
    | UpdateObjectStorageBucketAccessRequestBodyAclEnumString_authenticated_read
    | UpdateObjectStorageBucketAccessRequestBodyAclEnumString_custom
    | UpdateObjectStorageBucketAccessRequestBodyAclEnumString_private
    | UpdateObjectStorageBucketAccessRequestBodyAclEnumString_public_read
    | UpdateObjectStorageBucketAccessRequestBodyAclEnumString_public_read_write
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateObjectStorageBucketAccessRequestBodyAcl
    where toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumString_authenticated_read) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authenticated-read"
          toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumString_custom) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom"
          toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumString_private) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private"
          toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumString_public_read) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read"
          toJSON (UpdateObjectStorageBucketAccessRequestBodyAclEnumString_public_read_write) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read-write"
instance Data.Aeson.FromJSON UpdateObjectStorageBucketAccessRequestBodyAcl
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authenticated-read")
                                          then UpdateObjectStorageBucketAccessRequestBodyAclEnumString_authenticated_read
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom")
                                                then UpdateObjectStorageBucketAccessRequestBodyAclEnumString_custom
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private")
                                                      then UpdateObjectStorageBucketAccessRequestBodyAclEnumString_private
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read")
                                                            then UpdateObjectStorageBucketAccessRequestBodyAclEnumString_public_read
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public-read-write")
                                                                  then UpdateObjectStorageBucketAccessRequestBodyAclEnumString_public_read_write
                                                                  else UpdateObjectStorageBucketAccessRequestBodyAclEnumOther val)
-- | Represents a response of the operation 'updateObjectStorageBucketAccess'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'UpdateObjectStorageBucketAccessResponseError' is used.
data UpdateObjectStorageBucketAccessResponse =                                                         
   UpdateObjectStorageBucketAccessResponseError GHC.Base.String                                        -- ^ Means either no matching case available or a parse error
  | UpdateObjectStorageBucketAccessResponse200 UpdateObjectStorageBucketAccessResponseBody200          -- ^ Access controls updated.
  | UpdateObjectStorageBucketAccessResponseDefault UpdateObjectStorageBucketAccessResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema UpdateObjectStorageBucketAccessResponseBody200
-- 
-- 
data UpdateObjectStorageBucketAccessResponseBody200 = UpdateObjectStorageBucketAccessResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateObjectStorageBucketAccessResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketAccessResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketAccessResponseBody200" (\obj -> GHC.Base.pure UpdateObjectStorageBucketAccessResponseBody200)
-- | Defines the data type for the schema UpdateObjectStorageBucketAccessResponseBodyDefault
-- 
-- 
data UpdateObjectStorageBucketAccessResponseBodyDefault = UpdateObjectStorageBucketAccessResponseBodyDefault {
  -- | errors
  updateObjectStorageBucketAccessResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UpdateObjectStorageBucketAccessResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (updateObjectStorageBucketAccessResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (updateObjectStorageBucketAccessResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON UpdateObjectStorageBucketAccessResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UpdateObjectStorageBucketAccessResponseBodyDefault" (\obj -> GHC.Base.pure UpdateObjectStorageBucketAccessResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
