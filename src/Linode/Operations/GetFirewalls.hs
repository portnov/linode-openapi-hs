-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getFirewalls
module Linode.Operations.GetFirewalls where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /networking/firewalls
-- 
-- Returns a paginated list of accessible Firewalls.
getFirewalls :: forall m . Linode.Common.MonadHTTP m => GetFirewallsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetFirewallsResponse) -- ^ Monadic computation which returns the result of the operation
getFirewalls parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetFirewallsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetFirewallsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetFirewallsResponseBody200)
                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetFirewallsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                               GetFirewallsResponseBodyDefault)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/networking/firewalls") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFirewallsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                          Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFirewallsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/networking\/firewalls.GET.parameters@ in the specification.
-- 
-- 
data GetFirewallsParameters = GetFirewallsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getFirewallsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getFirewallsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetFirewallsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getFirewallsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getFirewallsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getFirewallsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getFirewallsParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsParameters" (\obj -> (GHC.Base.pure GetFirewallsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetFirewallsParameters' with all required fields.
mkGetFirewallsParameters :: GetFirewallsParameters
mkGetFirewallsParameters = GetFirewallsParameters{getFirewallsParametersQueryPage = GHC.Maybe.Nothing,
                                                  getFirewallsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getFirewalls'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetFirewallsResponseError' is used.
data GetFirewallsResponse =
   GetFirewallsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetFirewallsResponse200 GetFirewallsResponseBody200 -- ^ Returns an array of Firewalls.
  | GetFirewallsResponseDefault GetFirewallsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/networking\/firewalls.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetFirewallsResponseBody200 = GetFirewallsResponseBody200 {
  -- | data
  getFirewallsResponseBody200Data :: (GHC.Maybe.Maybe ([Firewall]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getFirewallsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getFirewallsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getFirewallsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetFirewallsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getFirewallsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsResponseBody200" (\obj -> (((GHC.Base.pure GetFirewallsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetFirewallsResponseBody200' with all required fields.
mkGetFirewallsResponseBody200 :: GetFirewallsResponseBody200
mkGetFirewallsResponseBody200 = GetFirewallsResponseBody200{getFirewallsResponseBody200Data = GHC.Maybe.Nothing,
                                                            getFirewallsResponseBody200Page = GHC.Maybe.Nothing,
                                                            getFirewallsResponseBody200Pages = GHC.Maybe.Nothing,
                                                            getFirewallsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetFirewallsResponseBodyDefault = GetFirewallsResponseBodyDefault {
  -- | errors
  getFirewallsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetFirewallsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getFirewallsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getFirewallsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsResponseBodyDefault" (\obj -> GHC.Base.pure GetFirewallsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetFirewallsResponseBodyDefault' with all required fields.
mkGetFirewallsResponseBodyDefault :: GetFirewallsResponseBodyDefault
mkGetFirewallsResponseBodyDefault = GetFirewallsResponseBodyDefault{getFirewallsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
