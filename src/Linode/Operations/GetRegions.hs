-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getRegions
module Linode.Operations.GetRegions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /regions
-- 
-- Lists the Regions available for Linode services. Not all services are guaranteed to be
-- available in all Regions.
getRegions :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetRegionsResponse) -- ^ Monadic computation which returns the result of the operation
getRegions = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetRegionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetRegionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                            GetRegionsResponseBody200)
                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetRegionsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                              GetRegionsResponseBodyDefault)
                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/regions") GHC.Base.mempty)
-- | Represents a response of the operation 'getRegions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetRegionsResponseError' is used.
data GetRegionsResponse =
   GetRegionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetRegionsResponse200 GetRegionsResponseBody200 -- ^ Returns an array of Regions.
  | GetRegionsResponseDefault GetRegionsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/regions.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetRegionsResponseBody200 = GetRegionsResponseBody200 {
  -- | data
  getRegionsResponseBody200Data :: (GHC.Maybe.Maybe ([Region]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getRegionsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getRegionsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getRegionsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetRegionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getRegionsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetRegionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetRegionsResponseBody200" (\obj -> (((GHC.Base.pure GetRegionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetRegionsResponseBody200' with all required fields.
mkGetRegionsResponseBody200 :: GetRegionsResponseBody200
mkGetRegionsResponseBody200 = GetRegionsResponseBody200{getRegionsResponseBody200Data = GHC.Maybe.Nothing,
                                                        getRegionsResponseBody200Page = GHC.Maybe.Nothing,
                                                        getRegionsResponseBody200Pages = GHC.Maybe.Nothing,
                                                        getRegionsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetRegionsResponseBodyDefault = GetRegionsResponseBodyDefault {
  -- | errors
  getRegionsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetRegionsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getRegionsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getRegionsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetRegionsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetRegionsResponseBodyDefault" (\obj -> GHC.Base.pure GetRegionsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetRegionsResponseBodyDefault' with all required fields.
mkGetRegionsResponseBodyDefault :: GetRegionsResponseBodyDefault
mkGetRegionsResponseBodyDefault = GetRegionsResponseBodyDefault{getRegionsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
