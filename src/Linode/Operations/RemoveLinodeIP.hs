-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation removeLinodeIP
module Linode.Operations.RemoveLinodeIP where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /linode/instances/{linodeId}/ips/{address}
-- 
-- Deletes a public IPv4 address associated with this Linode. This will fail if it is the Linode\'s last remaining public IPv4 address. Private IPv4 addresses cannot be removed via this endpoint.
removeLinodeIP :: forall m . Linode.Common.MonadHTTP m => RemoveLinodeIPParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response RemoveLinodeIPResponse) -- ^ Monadic computation which returns the result of the operation
removeLinodeIP parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RemoveLinodeIPResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RemoveLinodeIPResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   Data.Aeson.Types.Internal.Object)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RemoveLinodeIPResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                     RemoveLinodeIPResponseBodyDefault)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack (("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (removeLinodeIPParametersPathLinodeId parameters))) GHC.Base.++ "/ips/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (removeLinodeIPParametersPathAddress parameters))) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/ips\/{address}.DELETE.parameters@ in the specification.
-- 
-- 
data RemoveLinodeIPParameters = RemoveLinodeIPParameters {
  -- | pathAddress: Represents the parameter named \'address\'
  -- 
  -- The IP address to look up.
  removeLinodeIPParametersPathAddress :: Data.Text.Internal.Text
  -- | pathLinodeId: Represents the parameter named \'linodeId\'
  -- 
  -- The ID of the Linode to look up.
  , removeLinodeIPParametersPathLinodeId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RemoveLinodeIPParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAddress" Data.Aeson.Types.ToJSON..= removeLinodeIPParametersPathAddress obj : "pathLinodeId" Data.Aeson.Types.ToJSON..= removeLinodeIPParametersPathLinodeId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAddress" Data.Aeson.Types.ToJSON..= removeLinodeIPParametersPathAddress obj) GHC.Base.<> ("pathLinodeId" Data.Aeson.Types.ToJSON..= removeLinodeIPParametersPathLinodeId obj))
instance Data.Aeson.Types.FromJSON.FromJSON RemoveLinodeIPParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RemoveLinodeIPParameters" (\obj -> (GHC.Base.pure RemoveLinodeIPParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLinodeId"))
-- | Create a new 'RemoveLinodeIPParameters' with all required fields.
mkRemoveLinodeIPParameters :: Data.Text.Internal.Text -- ^ 'removeLinodeIPParametersPathAddress'
  -> GHC.Types.Int -- ^ 'removeLinodeIPParametersPathLinodeId'
  -> RemoveLinodeIPParameters
mkRemoveLinodeIPParameters removeLinodeIPParametersPathAddress removeLinodeIPParametersPathLinodeId = RemoveLinodeIPParameters{removeLinodeIPParametersPathAddress = removeLinodeIPParametersPathAddress,
                                                                                                                               removeLinodeIPParametersPathLinodeId = removeLinodeIPParametersPathLinodeId}
-- | Represents a response of the operation 'removeLinodeIP'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RemoveLinodeIPResponseError' is used.
data RemoveLinodeIPResponse =
   RemoveLinodeIPResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | RemoveLinodeIPResponse200 Data.Aeson.Types.Internal.Object -- ^ IP address successfully removed.
  | RemoveLinodeIPResponseDefault RemoveLinodeIPResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data RemoveLinodeIPResponseBodyDefault = RemoveLinodeIPResponseBodyDefault {
  -- | errors
  removeLinodeIPResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RemoveLinodeIPResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= removeLinodeIPResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= removeLinodeIPResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON RemoveLinodeIPResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RemoveLinodeIPResponseBodyDefault" (\obj -> GHC.Base.pure RemoveLinodeIPResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'RemoveLinodeIPResponseBodyDefault' with all required fields.
mkRemoveLinodeIPResponseBodyDefault :: RemoveLinodeIPResponseBodyDefault
mkRemoveLinodeIPResponseBodyDefault = RemoveLinodeIPResponseBodyDefault{removeLinodeIPResponseBodyDefaultErrors = GHC.Maybe.Nothing}
