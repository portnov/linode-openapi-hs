-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postLKEClusterPoolRecycle
module Linode.Operations.PostLKEClusterPoolRecycle where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > POST /lke/clusters/{clusterId}/pools/{poolId}/recycle
-- 
-- Recycles a Node Pool for the designated Kubernetes Cluster. All Linodes within the Node Pool will be deleted
-- and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are
-- installed with the latest available patch for the Cluster\'s Kubernetes Version.
-- 
-- **Any local storage on deleted Linodes (such as \"hostPath\" and \"emptyDir\" volumes, or \"local\" PersistentVolumes) will be erased.**
postLKEClusterPoolRecycle :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostLKEClusterPoolRecycleResponse)) -- ^ Monad containing the result of the operation
postLKEClusterPoolRecycle config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLKEClusterPoolRecycleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterPoolRecycleResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostLKEClusterPoolRecycleResponseBody200)
                                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterPoolRecycleResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 PostLKEClusterPoolRecycleResponseBodyDefault)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters/{clusterId}/pools/{poolId}/recycle") [])
-- | > POST /lke/clusters/{clusterId}/pools/{poolId}/recycle
-- 
-- The same as 'postLKEClusterPoolRecycle' but returns the raw 'Data.ByteString.Char8.ByteString'
postLKEClusterPoolRecycleRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                              Linode.Common.SecurityScheme s) =>
                                Linode.Common.Configuration s ->
                                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLKEClusterPoolRecycleRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters/{clusterId}/pools/{poolId}/recycle") [])
-- | > POST /lke/clusters/{clusterId}/pools/{poolId}/recycle
-- 
-- Monadic version of 'postLKEClusterPoolRecycle' (use with 'Linode.Common.runWithConfiguration')
postLKEClusterPoolRecycleM :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response PostLKEClusterPoolRecycleResponse))
postLKEClusterPoolRecycleM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostLKEClusterPoolRecycleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterPoolRecycleResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         PostLKEClusterPoolRecycleResponseBody200)
                                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterPoolRecycleResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           PostLKEClusterPoolRecycleResponseBodyDefault)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters/{clusterId}/pools/{poolId}/recycle") [])
-- | > POST /lke/clusters/{clusterId}/pools/{poolId}/recycle
-- 
-- Monadic version of 'postLKEClusterPoolRecycleRaw' (use with 'Linode.Common.runWithConfiguration')
postLKEClusterPoolRecycleRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                               Linode.Common.SecurityScheme s) =>
                                 Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                    m
                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLKEClusterPoolRecycleRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/lke/clusters/{clusterId}/pools/{poolId}/recycle") [])
-- | Represents a response of the operation 'postLKEClusterPoolRecycle'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLKEClusterPoolRecycleResponseError' is used.
data PostLKEClusterPoolRecycleResponse =                                                   
   PostLKEClusterPoolRecycleResponseError GHC.Base.String                                  -- ^ Means either no matching case available or a parse error
  | PostLKEClusterPoolRecycleResponse200 PostLKEClusterPoolRecycleResponseBody200          -- ^ Recycle request succeeded and is in progress.
  | PostLKEClusterPoolRecycleResponseDefault PostLKEClusterPoolRecycleResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostLKEClusterPoolRecycleResponseBody200
-- 
-- 
data PostLKEClusterPoolRecycleResponseBody200 = PostLKEClusterPoolRecycleResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLKEClusterPoolRecycleResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostLKEClusterPoolRecycleResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLKEClusterPoolRecycleResponseBody200" (\obj -> GHC.Base.pure PostLKEClusterPoolRecycleResponseBody200)
-- | Defines the data type for the schema PostLKEClusterPoolRecycleResponseBodyDefault
-- 
-- 
data PostLKEClusterPoolRecycleResponseBodyDefault = PostLKEClusterPoolRecycleResponseBodyDefault {
  -- | errors
  postLKEClusterPoolRecycleResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLKEClusterPoolRecycleResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (postLKEClusterPoolRecycleResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (postLKEClusterPoolRecycleResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLKEClusterPoolRecycleResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLKEClusterPoolRecycleResponseBodyDefault" (\obj -> GHC.Base.pure PostLKEClusterPoolRecycleResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
