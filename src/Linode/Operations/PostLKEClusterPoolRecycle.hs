-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postLKEClusterPoolRecycle
module Linode.Operations.PostLKEClusterPoolRecycle where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /lke/clusters/{clusterId}/pools/{poolId}/recycle
-- 
-- Recycles a Node Pool for the designated Kubernetes Cluster. All Linodes within the Node Pool will be deleted
-- and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are
-- installed with the latest available patch for the Cluster\'s Kubernetes Version.
-- 
-- **Any local storage on deleted Linodes (such as \"hostPath\" and \"emptyDir\" volumes, or \"local\" PersistentVolumes) will be erased.**
postLKEClusterPoolRecycle :: forall m . Linode.Common.MonadHTTP m => PostLKEClusterPoolRecycleParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response PostLKEClusterPoolRecycleResponse) -- ^ Monadic computation which returns the result of the operation
postLKEClusterPoolRecycle parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLKEClusterPoolRecycleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterPoolRecycleResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterPoolRecycleResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                      PostLKEClusterPoolRecycleResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/lke/clusters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (postLKEClusterPoolRecycleParametersPathClusterId parameters))) GHC.Base.++ ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (postLKEClusterPoolRecycleParametersPathPoolId parameters))) GHC.Base.++ "/recycle"))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/lke\/clusters\/{clusterId}\/pools\/{poolId}\/recycle.POST.parameters@ in the specification.
-- 
-- 
data PostLKEClusterPoolRecycleParameters = PostLKEClusterPoolRecycleParameters {
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- ID of the Kubernetes cluster this Node Pool is attached to.
  postLKEClusterPoolRecycleParametersPathClusterId :: GHC.Types.Int
  -- | pathPoolId: Represents the parameter named \'poolId\'
  -- 
  -- ID of the Node Pool to be recycled.
  , postLKEClusterPoolRecycleParametersPathPoolId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLKEClusterPoolRecycleParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathClusterId" Data.Aeson.Types.ToJSON..= postLKEClusterPoolRecycleParametersPathClusterId obj : "pathPoolId" Data.Aeson.Types.ToJSON..= postLKEClusterPoolRecycleParametersPathPoolId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathClusterId" Data.Aeson.Types.ToJSON..= postLKEClusterPoolRecycleParametersPathClusterId obj) GHC.Base.<> ("pathPoolId" Data.Aeson.Types.ToJSON..= postLKEClusterPoolRecycleParametersPathPoolId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLKEClusterPoolRecycleParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLKEClusterPoolRecycleParameters" (\obj -> (GHC.Base.pure PostLKEClusterPoolRecycleParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPoolId"))
-- | Create a new 'PostLKEClusterPoolRecycleParameters' with all required fields.
mkPostLKEClusterPoolRecycleParameters :: GHC.Types.Int -- ^ 'postLKEClusterPoolRecycleParametersPathClusterId'
  -> GHC.Types.Int -- ^ 'postLKEClusterPoolRecycleParametersPathPoolId'
  -> PostLKEClusterPoolRecycleParameters
mkPostLKEClusterPoolRecycleParameters postLKEClusterPoolRecycleParametersPathClusterId postLKEClusterPoolRecycleParametersPathPoolId = PostLKEClusterPoolRecycleParameters{postLKEClusterPoolRecycleParametersPathClusterId = postLKEClusterPoolRecycleParametersPathClusterId,
                                                                                                                                                                           postLKEClusterPoolRecycleParametersPathPoolId = postLKEClusterPoolRecycleParametersPathPoolId}
-- | Represents a response of the operation 'postLKEClusterPoolRecycle'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLKEClusterPoolRecycleResponseError' is used.
data PostLKEClusterPoolRecycleResponse =
   PostLKEClusterPoolRecycleResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostLKEClusterPoolRecycleResponse200 Data.Aeson.Types.Internal.Object -- ^ Recycle request succeeded and is in progress.
  | PostLKEClusterPoolRecycleResponseDefault PostLKEClusterPoolRecycleResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data PostLKEClusterPoolRecycleResponseBodyDefault = PostLKEClusterPoolRecycleResponseBodyDefault {
  -- | errors
  postLKEClusterPoolRecycleResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLKEClusterPoolRecycleResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= postLKEClusterPoolRecycleResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= postLKEClusterPoolRecycleResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostLKEClusterPoolRecycleResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLKEClusterPoolRecycleResponseBodyDefault" (\obj -> GHC.Base.pure PostLKEClusterPoolRecycleResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'PostLKEClusterPoolRecycleResponseBodyDefault' with all required fields.
mkPostLKEClusterPoolRecycleResponseBodyDefault :: PostLKEClusterPoolRecycleResponseBodyDefault
mkPostLKEClusterPoolRecycleResponseBodyDefault = PostLKEClusterPoolRecycleResponseBodyDefault{postLKEClusterPoolRecycleResponseBodyDefaultErrors = GHC.Maybe.Nothing}
