-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation executePayPalPayment
module Linode.Operations.ExecutePayPalPayment where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /account/payments/paypal/execute
-- 
-- Given a PaymentID and PayerID - as generated by PayPal during the
-- transaction authorization process - this endpoint executes the Payment
-- to capture the funds and credit your Linode Account.
-- 
-- **Note**: This endpoint is deprecated and may be removed in a future release. PayPal can now be
-- designated as a Payment Method for automated or manual payments using
-- [Cloud Manager](\/docs\/guides\/manage-billing-in-cloud-manager\/\#adding-a-new-payment-method).
executePayPalPayment :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> PayPalExecute                                                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response ExecutePayPalPaymentResponse)) -- ^ Monad containing the result of the operation
executePayPalPayment config
                     body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ExecutePayPalPaymentResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              ExecutePayPalPaymentResponseBody200)
                                                                                                                                                                                          | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              ExecutePayPalPaymentResponseBody202)
                                                                                                                                                                                          | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 299) (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponse299 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              ExecutePayPalPaymentResponseBody299)
                                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                ExecutePayPalPaymentResponseBodyDefault)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/payments/paypal/execute") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/payments/paypal/execute
-- 
-- The same as 'executePayPalPayment' but returns the raw 'Data.ByteString.Char8.ByteString'
executePayPalPaymentRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                         Linode.Common.SecurityScheme s) =>
                           Linode.Common.Configuration s ->
                           PayPalExecute ->
                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
executePayPalPaymentRaw config
                        body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/payments/paypal/execute") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/payments/paypal/execute
-- 
-- Monadic version of 'executePayPalPayment' (use with 'Linode.Common.runWithConfiguration')
executePayPalPaymentM :: forall m s . (Linode.Common.MonadHTTP m,
                                       Linode.Common.SecurityScheme s) =>
                         PayPalExecute ->
                         Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response ExecutePayPalPaymentResponse))
executePayPalPaymentM body = GHC.Base.fmap (GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either ExecutePayPalPaymentResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               ExecutePayPalPaymentResponseBody200)
                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               ExecutePayPalPaymentResponseBody202)
                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 299) (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponse299 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               ExecutePayPalPaymentResponseBody299)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> ExecutePayPalPaymentResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                 ExecutePayPalPaymentResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/payments/paypal/execute") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /account/payments/paypal/execute
-- 
-- Monadic version of 'executePayPalPaymentRaw' (use with 'Linode.Common.runWithConfiguration')
executePayPalPaymentRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                          Linode.Common.SecurityScheme s) =>
                            PayPalExecute ->
                            Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                               m
                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
executePayPalPaymentRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/account/payments/paypal/execute") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'executePayPalPayment'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ExecutePayPalPaymentResponseError' is used.
data ExecutePayPalPaymentResponse =                                              
   ExecutePayPalPaymentResponseError GHC.Base.String                             -- ^ Means either no matching case available or a parse error
  | ExecutePayPalPaymentResponse200 ExecutePayPalPaymentResponseBody200          -- ^ PayPal Payment executed.
  | ExecutePayPalPaymentResponse202 ExecutePayPalPaymentResponseBody202          -- ^ Accepted with warning.  A warnings array is included with the standard 200 response body. 
  | ExecutePayPalPaymentResponse299 ExecutePayPalPaymentResponseBody299          -- ^ Request successful. This endpoint is deprecated and may be removed in a future release.  A warnings array is included with the standard 200 response body. 
  | ExecutePayPalPaymentResponseDefault ExecutePayPalPaymentResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema ExecutePayPalPaymentResponseBody200
-- 
-- 
data ExecutePayPalPaymentResponseBody200 = ExecutePayPalPaymentResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExecutePayPalPaymentResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ExecutePayPalPaymentResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ExecutePayPalPaymentResponseBody200" (\obj -> GHC.Base.pure ExecutePayPalPaymentResponseBody200)
-- | Defines the data type for the schema ExecutePayPalPaymentResponseBody202
-- 
-- 
data ExecutePayPalPaymentResponseBody202 = ExecutePayPalPaymentResponseBody202 {
  -- | warnings
  executePayPalPaymentResponseBody202Warnings :: (GHC.Base.Maybe ([] WarningObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExecutePayPalPaymentResponseBody202
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "warnings" (executePayPalPaymentResponseBody202Warnings obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "warnings" (executePayPalPaymentResponseBody202Warnings obj))
instance Data.Aeson.Types.FromJSON.FromJSON ExecutePayPalPaymentResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ExecutePayPalPaymentResponseBody202" (\obj -> GHC.Base.pure ExecutePayPalPaymentResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "warnings"))
-- | Defines the data type for the schema ExecutePayPalPaymentResponseBody299
-- 
-- 
data ExecutePayPalPaymentResponseBody299 = ExecutePayPalPaymentResponseBody299 {
  -- | warnings
  executePayPalPaymentResponseBody299Warnings :: (GHC.Base.Maybe ([] WarningObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExecutePayPalPaymentResponseBody299
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "warnings" (executePayPalPaymentResponseBody299Warnings obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "warnings" (executePayPalPaymentResponseBody299Warnings obj))
instance Data.Aeson.Types.FromJSON.FromJSON ExecutePayPalPaymentResponseBody299
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ExecutePayPalPaymentResponseBody299" (\obj -> GHC.Base.pure ExecutePayPalPaymentResponseBody299 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "warnings"))
-- | Defines the data type for the schema ExecutePayPalPaymentResponseBodyDefault
-- 
-- 
data ExecutePayPalPaymentResponseBodyDefault = ExecutePayPalPaymentResponseBodyDefault {
  -- | errors
  executePayPalPaymentResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExecutePayPalPaymentResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (executePayPalPaymentResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (executePayPalPaymentResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON ExecutePayPalPaymentResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ExecutePayPalPaymentResponseBodyDefault" (\obj -> GHC.Base.pure ExecutePayPalPaymentResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
