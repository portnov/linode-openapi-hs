-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createNodeBalancer
module Linode.Operations.CreateNodeBalancer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /nodebalancers
-- 
-- Creates a NodeBalancer in the requested Region. This NodeBalancer will not start serving requests until it is configured.
createNodeBalancer :: forall m . Linode.Common.MonadHTTP m => CreateNodeBalancerRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response CreateNodeBalancerResponse) -- ^ Monadic computation which returns the result of the operation
createNodeBalancer body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateNodeBalancerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         NodeBalancer)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> CreateNodeBalancerResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           CreateNodeBalancerResponseBodyDefault)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/nodebalancers") GHC.Base.mempty (GHC.Maybe.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateNodeBalancerRequestBody = CreateNodeBalancerRequestBody {
  -- | client_conn_throttle: Throttle connections per second.  Set to 0 (zero) to disable throttling.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 20.0
  -- * Minimum  of 0.0
  createNodeBalancerRequestBodyClientConnThrottle :: (GHC.Maybe.Maybe NodeBalancerPropertiesClientConnThrottle)
  -- | configs: The ports to configure this NodeBalancer with on creation. Each config must have a unique port and at least one Node.
  , createNodeBalancerRequestBodyConfigs :: (GHC.Maybe.Maybe ([CreateNodeBalancerRequestBodyConfigs']))
  -- | label: This NodeBalancer\'s label. These must be unique on your Account.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_]{3,32}\'
  , createNodeBalancerRequestBodyLabel :: (GHC.Maybe.Maybe NodeBalancerPropertiesLabel)
  -- | region: The ID of the Region to create this NodeBalancer in.
  , createNodeBalancerRequestBodyRegion :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("client_conn_throttle" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyClientConnThrottle obj : "configs" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs obj : "label" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyLabel obj : "region" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyRegion obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("client_conn_throttle" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyClientConnThrottle obj) GHC.Base.<> (("configs" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyLabel obj) GHC.Base.<> ("region" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyRegion obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerRequestBody" (\obj -> (((GHC.Base.pure CreateNodeBalancerRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_conn_throttle")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "configs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region"))
-- | Create a new 'CreateNodeBalancerRequestBody' with all required fields.
mkCreateNodeBalancerRequestBody :: Data.Text.Internal.Text -- ^ 'createNodeBalancerRequestBodyRegion'
  -> CreateNodeBalancerRequestBody
mkCreateNodeBalancerRequestBody createNodeBalancerRequestBodyRegion = CreateNodeBalancerRequestBody{createNodeBalancerRequestBodyClientConnThrottle = GHC.Maybe.Nothing,
                                                                                                    createNodeBalancerRequestBodyConfigs = GHC.Maybe.Nothing,
                                                                                                    createNodeBalancerRequestBodyLabel = GHC.Maybe.Nothing,
                                                                                                    createNodeBalancerRequestBodyRegion = createNodeBalancerRequestBodyRegion}
-- | Defines the object schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf@ in the specification.
-- 
-- 
data CreateNodeBalancerRequestBodyConfigs' = CreateNodeBalancerRequestBodyConfigs' {
  -- | algorithm: What algorithm this NodeBalancer should use for routing traffic to backends.
  createNodeBalancerRequestBodyConfigs'Algorithm :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'Algorithm')
  -- | check: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
  -- * If \`none\` no check is performed.
  -- * \`connection\` requires only a connection to the backend to succeed.
  -- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
  --   the response returned matches what is expected.
  , createNodeBalancerRequestBodyConfigs'Check :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'Check')
  -- | check_attempts: How many times to attempt a check before considering a backend to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , createNodeBalancerRequestBodyConfigs'CheckAttempts :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | check_body: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
  , createNodeBalancerRequestBodyConfigs'CheckBody :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | check_interval: How often, in seconds, to check that backends are up and serving requests.
  , createNodeBalancerRequestBodyConfigs'CheckInterval :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | check_passive: If true, any response from this backend with a \`5xx\` status code will be enough for it to be considered unhealthy and taken out of rotation.
  , createNodeBalancerRequestBodyConfigs'CheckPassive :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | check_path: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^[a-zA-Z0-9\\\/\\-%?&=.]*\$\'
  , createNodeBalancerRequestBodyConfigs'CheckPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | check_timeout: How long, in seconds, to wait for a check attempt before considering it failed.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , createNodeBalancerRequestBodyConfigs'CheckTimeout :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | cipher_suite: What ciphers to use for SSL connections served by this NodeBalancer.
  -- 
  -- * \`legacy\` is considered insecure and should only be used if necessary.
  , createNodeBalancerRequestBodyConfigs'CipherSuite :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'CipherSuite')
  -- | id: This config\'s unique ID
  , createNodeBalancerRequestBodyConfigs'Id :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | nodebalancer_id: The ID for the NodeBalancer this config belongs to.
  , createNodeBalancerRequestBodyConfigs'NodebalancerId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | nodes: The NodeBalancer Nodes that serve this port.  When creating a NodeBalancer this way, at least one Node is required per configured port.
  , createNodeBalancerRequestBodyConfigs'Nodes :: (GHC.Maybe.Maybe ([NodeBalancerNode]))
  -- | nodes_status: A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
  , createNodeBalancerRequestBodyConfigs'NodesStatus :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'NodesStatus')
  -- | port: The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can\'t have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 1.0
  , createNodeBalancerRequestBodyConfigs'Port :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | protocol: The protocol this port is configured to serve.
  -- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
  -- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
  , createNodeBalancerRequestBodyConfigs'Protocol :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'Protocol')
  -- | proxy_protocol: ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
  -- 
  -- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
  -- * If set to \`v1\`, the human-readable header format (Version 1) is used.
  -- * If set to \`v2\`, the binary header format (Version 2) is used.
  , createNodeBalancerRequestBodyConfigs'ProxyProtocol :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'ProxyProtocol')
  -- | ssl_cert: The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
  -- certificate and Certificate Authority chain) that should be served on this
  -- NodeBalancerConfig\'s port.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , createNodeBalancerRequestBodyConfigs'SslCert :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_commonname: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , createNodeBalancerRequestBodyConfigs'SslCommonname :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_fingerprint: The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , createNodeBalancerRequestBodyConfigs'SslFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_key: The PEM-formatted private key for the SSL certificate set in the \`ssl_cert\` field.
  -- 
  -- Line breaks must be represented as \"\\n\" in the string.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , createNodeBalancerRequestBodyConfigs'SslKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | stickiness: Controls how session stickiness is handled on this port.
  -- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
  -- * If set to \`table\` sessions from the same remote address will be routed to the same
  --   backend.
  -- 
  -- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
  --   routed to the same backend based on a cookie set by the NodeBalancer.
  , createNodeBalancerRequestBodyConfigs'Stickiness :: (GHC.Maybe.Maybe CreateNodeBalancerRequestBodyConfigs'Stickiness')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'
    where toJSON obj = Data.Aeson.Types.Internal.object ("algorithm" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Algorithm obj : "check" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Check obj : "check_attempts" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckAttempts obj : "check_body" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckBody obj : "check_interval" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckInterval obj : "check_passive" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckPassive obj : "check_path" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckPath obj : "check_timeout" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckTimeout obj : "cipher_suite" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CipherSuite obj : "id" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Id obj : "nodebalancer_id" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodebalancerId obj : "nodes" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Nodes obj : "nodes_status" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodesStatus obj : "port" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Port obj : "protocol" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Protocol obj : "proxy_protocol" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'ProxyProtocol obj : "ssl_cert" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslCert obj : "ssl_commonname" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslCommonname obj : "ssl_fingerprint" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslFingerprint obj : "ssl_key" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslKey obj : "stickiness" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Stickiness obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("algorithm" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Algorithm obj) GHC.Base.<> (("check" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Check obj) GHC.Base.<> (("check_attempts" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckAttempts obj) GHC.Base.<> (("check_body" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckBody obj) GHC.Base.<> (("check_interval" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckInterval obj) GHC.Base.<> (("check_passive" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckPassive obj) GHC.Base.<> (("check_path" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckPath obj) GHC.Base.<> (("check_timeout" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CheckTimeout obj) GHC.Base.<> (("cipher_suite" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'CipherSuite obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Id obj) GHC.Base.<> (("nodebalancer_id" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodebalancerId obj) GHC.Base.<> (("nodes" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Nodes obj) GHC.Base.<> (("nodes_status" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodesStatus obj) GHC.Base.<> (("port" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Port obj) GHC.Base.<> (("protocol" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Protocol obj) GHC.Base.<> (("proxy_protocol" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'ProxyProtocol obj) GHC.Base.<> (("ssl_cert" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslCert obj) GHC.Base.<> (("ssl_commonname" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslCommonname obj) GHC.Base.<> (("ssl_fingerprint" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslFingerprint obj) GHC.Base.<> (("ssl_key" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'SslKey obj) GHC.Base.<> ("stickiness" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'Stickiness obj)))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerRequestBodyConfigs'" (\obj -> ((((((((((((((((((((GHC.Base.pure CreateNodeBalancerRequestBodyConfigs' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_attempts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_passive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cipher_suite")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proxy_protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_cert")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_commonname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stickiness"))
-- | Create a new 'CreateNodeBalancerRequestBodyConfigs'' with all required fields.
mkCreateNodeBalancerRequestBodyConfigs' :: CreateNodeBalancerRequestBodyConfigs'
mkCreateNodeBalancerRequestBodyConfigs' = CreateNodeBalancerRequestBodyConfigs'{createNodeBalancerRequestBodyConfigs'Algorithm = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'Check = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CheckAttempts = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CheckBody = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CheckInterval = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CheckPassive = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CheckPath = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CheckTimeout = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'CipherSuite = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'Id = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'NodebalancerId = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'Nodes = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'NodesStatus = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'Port = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'Protocol = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'ProxyProtocol = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'SslCert = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'SslCommonname = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'SslFingerprint = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'SslKey = GHC.Maybe.Nothing,
                                                                                createNodeBalancerRequestBodyConfigs'Stickiness = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.algorithm@ in the specification.
-- 
-- What algorithm this NodeBalancer should use for routing traffic to backends.
data CreateNodeBalancerRequestBodyConfigs'Algorithm' =
   CreateNodeBalancerRequestBodyConfigs'Algorithm'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateNodeBalancerRequestBodyConfigs'Algorithm'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumRoundrobin -- ^ Represents the JSON value @"roundrobin"@
  | CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumLeastconn -- ^ Represents the JSON value @"leastconn"@
  | CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumSource -- ^ Represents the JSON value @"source"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'Algorithm'
    where toJSON (CreateNodeBalancerRequestBodyConfigs'Algorithm'Other val) = val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Algorithm'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumRoundrobin) = "roundrobin"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumLeastconn) = "leastconn"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumSource) = "source"
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'Algorithm'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "roundrobin" -> CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumRoundrobin
                                            | val GHC.Classes.== "leastconn" -> CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumLeastconn
                                            | val GHC.Classes.== "source" -> CreateNodeBalancerRequestBodyConfigs'Algorithm'EnumSource
                                            | GHC.Base.otherwise -> CreateNodeBalancerRequestBodyConfigs'Algorithm'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.check@ in the specification.
-- 
-- The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
-- * If \`none\` no check is performed.
-- * \`connection\` requires only a connection to the backend to succeed.
-- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
--   the response returned matches what is expected.
data CreateNodeBalancerRequestBodyConfigs'Check' =
   CreateNodeBalancerRequestBodyConfigs'Check'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateNodeBalancerRequestBodyConfigs'Check'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateNodeBalancerRequestBodyConfigs'Check'EnumNone -- ^ Represents the JSON value @"none"@
  | CreateNodeBalancerRequestBodyConfigs'Check'EnumConnection -- ^ Represents the JSON value @"connection"@
  | CreateNodeBalancerRequestBodyConfigs'Check'EnumHttp -- ^ Represents the JSON value @"http"@
  | CreateNodeBalancerRequestBodyConfigs'Check'EnumHttpBody -- ^ Represents the JSON value @"http_body"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'Check'
    where toJSON (CreateNodeBalancerRequestBodyConfigs'Check'Other val) = val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Check'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Check'EnumNone) = "none"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Check'EnumConnection) = "connection"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Check'EnumHttp) = "http"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Check'EnumHttpBody) = "http_body"
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'Check'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> CreateNodeBalancerRequestBodyConfigs'Check'EnumNone
                                            | val GHC.Classes.== "connection" -> CreateNodeBalancerRequestBodyConfigs'Check'EnumConnection
                                            | val GHC.Classes.== "http" -> CreateNodeBalancerRequestBodyConfigs'Check'EnumHttp
                                            | val GHC.Classes.== "http_body" -> CreateNodeBalancerRequestBodyConfigs'Check'EnumHttpBody
                                            | GHC.Base.otherwise -> CreateNodeBalancerRequestBodyConfigs'Check'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.cipher_suite@ in the specification.
-- 
-- What ciphers to use for SSL connections served by this NodeBalancer.
-- 
-- * \`legacy\` is considered insecure and should only be used if necessary.
data CreateNodeBalancerRequestBodyConfigs'CipherSuite' =
   CreateNodeBalancerRequestBodyConfigs'CipherSuite'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateNodeBalancerRequestBodyConfigs'CipherSuite'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateNodeBalancerRequestBodyConfigs'CipherSuite'EnumRecommended -- ^ Represents the JSON value @"recommended"@
  | CreateNodeBalancerRequestBodyConfigs'CipherSuite'EnumLegacy -- ^ Represents the JSON value @"legacy"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'CipherSuite'
    where toJSON (CreateNodeBalancerRequestBodyConfigs'CipherSuite'Other val) = val
          toJSON (CreateNodeBalancerRequestBodyConfigs'CipherSuite'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateNodeBalancerRequestBodyConfigs'CipherSuite'EnumRecommended) = "recommended"
          toJSON (CreateNodeBalancerRequestBodyConfigs'CipherSuite'EnumLegacy) = "legacy"
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'CipherSuite'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "recommended" -> CreateNodeBalancerRequestBodyConfigs'CipherSuite'EnumRecommended
                                            | val GHC.Classes.== "legacy" -> CreateNodeBalancerRequestBodyConfigs'CipherSuite'EnumLegacy
                                            | GHC.Base.otherwise -> CreateNodeBalancerRequestBodyConfigs'CipherSuite'Other val)
-- | Defines the object schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.nodes_status@ in the specification.
-- 
-- A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
data CreateNodeBalancerRequestBodyConfigs'NodesStatus' = CreateNodeBalancerRequestBodyConfigs'NodesStatus' {
  -- | down: The number of backends considered to be \"DOWN\" and unhealthy.  These are not in rotation, and not serving requests.
  createNodeBalancerRequestBodyConfigs'NodesStatus'Down :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | up: The number of backends considered to be \"UP\" and healthy, and that are serving requests.
  , createNodeBalancerRequestBodyConfigs'NodesStatus'Up :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'NodesStatus'
    where toJSON obj = Data.Aeson.Types.Internal.object ("down" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodesStatus'Down obj : "up" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodesStatus'Up obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("down" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodesStatus'Down obj) GHC.Base.<> ("up" Data.Aeson.Types.ToJSON..= createNodeBalancerRequestBodyConfigs'NodesStatus'Up obj))
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'NodesStatus'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerRequestBodyConfigs'NodesStatus'" (\obj -> (GHC.Base.pure CreateNodeBalancerRequestBodyConfigs'NodesStatus' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "down")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "up"))
-- | Create a new 'CreateNodeBalancerRequestBodyConfigs'NodesStatus'' with all required fields.
mkCreateNodeBalancerRequestBodyConfigs'NodesStatus' :: CreateNodeBalancerRequestBodyConfigs'NodesStatus'
mkCreateNodeBalancerRequestBodyConfigs'NodesStatus' = CreateNodeBalancerRequestBodyConfigs'NodesStatus'{createNodeBalancerRequestBodyConfigs'NodesStatus'Down = GHC.Maybe.Nothing,
                                                                                                        createNodeBalancerRequestBodyConfigs'NodesStatus'Up = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.protocol@ in the specification.
-- 
-- The protocol this port is configured to serve.
-- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
-- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
data CreateNodeBalancerRequestBodyConfigs'Protocol' =
   CreateNodeBalancerRequestBodyConfigs'Protocol'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateNodeBalancerRequestBodyConfigs'Protocol'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateNodeBalancerRequestBodyConfigs'Protocol'EnumHttp -- ^ Represents the JSON value @"http"@
  | CreateNodeBalancerRequestBodyConfigs'Protocol'EnumHttps -- ^ Represents the JSON value @"https"@
  | CreateNodeBalancerRequestBodyConfigs'Protocol'EnumTcp -- ^ Represents the JSON value @"tcp"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'Protocol'
    where toJSON (CreateNodeBalancerRequestBodyConfigs'Protocol'Other val) = val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Protocol'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Protocol'EnumHttp) = "http"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Protocol'EnumHttps) = "https"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Protocol'EnumTcp) = "tcp"
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'Protocol'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "http" -> CreateNodeBalancerRequestBodyConfigs'Protocol'EnumHttp
                                            | val GHC.Classes.== "https" -> CreateNodeBalancerRequestBodyConfigs'Protocol'EnumHttps
                                            | val GHC.Classes.== "tcp" -> CreateNodeBalancerRequestBodyConfigs'Protocol'EnumTcp
                                            | GHC.Base.otherwise -> CreateNodeBalancerRequestBodyConfigs'Protocol'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.proxy_protocol@ in the specification.
-- 
-- ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
-- 
-- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
-- * If set to \`v1\`, the human-readable header format (Version 1) is used.
-- * If set to \`v2\`, the binary header format (Version 2) is used.
data CreateNodeBalancerRequestBodyConfigs'ProxyProtocol' =
   CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumNone -- ^ Represents the JSON value @"none"@
  | CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumV1 -- ^ Represents the JSON value @"v1"@
  | CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'
    where toJSON (CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'Other val) = val
          toJSON (CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumNone) = "none"
          toJSON (CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumV1) = "v1"
          toJSON (CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumNone
                                            | val GHC.Classes.== "v1" -> CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumV1
                                            | val GHC.Classes.== "v2" -> CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'EnumV2
                                            | GHC.Base.otherwise -> CreateNodeBalancerRequestBodyConfigs'ProxyProtocol'Other val)
-- | Defines the enum schema located at @paths.\/nodebalancers.POST.requestBody.content.application\/json.schema.properties.configs.items.allOf.properties.stickiness@ in the specification.
-- 
-- Controls how session stickiness is handled on this port.
-- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
-- * If set to \`table\` sessions from the same remote address will be routed to the same
--   backend.
-- 
-- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
--   routed to the same backend based on a cookie set by the NodeBalancer.
data CreateNodeBalancerRequestBodyConfigs'Stickiness' =
   CreateNodeBalancerRequestBodyConfigs'Stickiness'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateNodeBalancerRequestBodyConfigs'Stickiness'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumNone -- ^ Represents the JSON value @"none"@
  | CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumTable -- ^ Represents the JSON value @"table"@
  | CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumHttpCookie -- ^ Represents the JSON value @"http_cookie"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerRequestBodyConfigs'Stickiness'
    where toJSON (CreateNodeBalancerRequestBodyConfigs'Stickiness'Other val) = val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Stickiness'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumNone) = "none"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumTable) = "table"
          toJSON (CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumHttpCookie) = "http_cookie"
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerRequestBodyConfigs'Stickiness'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumNone
                                            | val GHC.Classes.== "table" -> CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumTable
                                            | val GHC.Classes.== "http_cookie" -> CreateNodeBalancerRequestBodyConfigs'Stickiness'EnumHttpCookie
                                            | GHC.Base.otherwise -> CreateNodeBalancerRequestBodyConfigs'Stickiness'Other val)
-- | Represents a response of the operation 'createNodeBalancer'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateNodeBalancerResponseError' is used.
data CreateNodeBalancerResponse =
   CreateNodeBalancerResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateNodeBalancerResponse200 NodeBalancer -- ^ NodeBalancer created successfully.
  | CreateNodeBalancerResponseDefault CreateNodeBalancerResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateNodeBalancerResponseBodyDefault = CreateNodeBalancerResponseBodyDefault {
  -- | errors
  createNodeBalancerResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateNodeBalancerResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= createNodeBalancerResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= createNodeBalancerResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON CreateNodeBalancerResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateNodeBalancerResponseBodyDefault" (\obj -> GHC.Base.pure CreateNodeBalancerResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'CreateNodeBalancerResponseBodyDefault' with all required fields.
mkCreateNodeBalancerResponseBodyDefault :: CreateNodeBalancerResponseBodyDefault
mkCreateNodeBalancerResponseBodyDefault = CreateNodeBalancerResponseBodyDefault{createNodeBalancerResponseBodyDefaultErrors = GHC.Maybe.Nothing}
