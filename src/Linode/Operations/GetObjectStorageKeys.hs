-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getObjectStorageKeys
module Linode.Operations.GetObjectStorageKeys where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /object-storage/keys
-- 
-- Returns a paginated list of Object Storage Keys for authenticating to
-- the Object Storage S3 API.
getObjectStorageKeys :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetObjectStorageKeysResponse) -- ^ Monadic computation which returns the result of the operation
getObjectStorageKeys = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetObjectStorageKeysResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageKeysResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                          GetObjectStorageKeysResponseBody200)
                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetObjectStorageKeysResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                            GetObjectStorageKeysResponseBodyDefault)
                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/object-storage/keys") GHC.Base.mempty)
-- | Represents a response of the operation 'getObjectStorageKeys'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetObjectStorageKeysResponseError' is used.
data GetObjectStorageKeysResponse =
   GetObjectStorageKeysResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetObjectStorageKeysResponse200 GetObjectStorageKeysResponseBody200 -- ^ A paginated list of Object Storage Keys
  | GetObjectStorageKeysResponseDefault GetObjectStorageKeysResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/object-storage\/keys.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetObjectStorageKeysResponseBody200 = GetObjectStorageKeysResponseBody200 {
  -- | data
  getObjectStorageKeysResponseBody200Data :: (GHC.Maybe.Maybe ([ObjectStorageKey]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getObjectStorageKeysResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getObjectStorageKeysResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getObjectStorageKeysResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetObjectStorageKeysResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageKeysResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageKeysResponseBody200" (\obj -> (((GHC.Base.pure GetObjectStorageKeysResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetObjectStorageKeysResponseBody200' with all required fields.
mkGetObjectStorageKeysResponseBody200 :: GetObjectStorageKeysResponseBody200
mkGetObjectStorageKeysResponseBody200 = GetObjectStorageKeysResponseBody200{getObjectStorageKeysResponseBody200Data = GHC.Maybe.Nothing,
                                                                            getObjectStorageKeysResponseBody200Page = GHC.Maybe.Nothing,
                                                                            getObjectStorageKeysResponseBody200Pages = GHC.Maybe.Nothing,
                                                                            getObjectStorageKeysResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetObjectStorageKeysResponseBodyDefault = GetObjectStorageKeysResponseBodyDefault {
  -- | errors
  getObjectStorageKeysResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetObjectStorageKeysResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getObjectStorageKeysResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetObjectStorageKeysResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetObjectStorageKeysResponseBodyDefault" (\obj -> GHC.Base.pure GetObjectStorageKeysResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetObjectStorageKeysResponseBodyDefault' with all required fields.
mkGetObjectStorageKeysResponseBodyDefault :: GetObjectStorageKeysResponseBodyDefault
mkGetObjectStorageKeysResponseBodyDefault = GetObjectStorageKeysResponseBodyDefault{getObjectStorageKeysResponseBodyDefaultErrors = GHC.Maybe.Nothing}
