-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation rescueLinodeInstance
module Linode.Operations.RescueLinodeInstance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /linode/instances/{linodeId}/rescue
-- 
-- Rescue Mode is a safe environment for performing many system recovery and disk management tasks. Rescue Mode is based on the Finnix recovery distribution, a self-contained and bootable Linux distribution. You can also use Rescue Mode for tasks other than disaster recovery, such as formatting disks to use different filesystems, copying data between disks, and downloading files from a disk via SSH and SFTP.
-- * Note that \"sdh\" is reserved and unavailable during rescue.
rescueLinodeInstance :: forall m . Linode.Common.MonadHTTP m => GHC.Types.Int -- ^ linodeId: ID of the Linode to rescue.
  -> GHC.Maybe.Maybe RescueLinodeInstanceRequestBody -- ^ The request body to send
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response RescueLinodeInstanceResponse) -- ^ Monadic computation which returns the result of the operation
rescueLinodeInstance linodeId
                     body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RescueLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RescueLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Internal.Object)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RescueLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 RescueLinodeInstanceResponseBodyDefault)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/linode/instances/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel linodeId)) GHC.Base.++ "/rescue"))) GHC.Base.mempty body Linode.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/linode\/instances\/{linodeId}\/rescue.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data RescueLinodeInstanceRequestBody = RescueLinodeInstanceRequestBody {
  -- | devices
  rescueLinodeInstanceRequestBodyDevices :: (GHC.Maybe.Maybe RescueDevices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RescueLinodeInstanceRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("devices" Data.Aeson.Types.ToJSON..= rescueLinodeInstanceRequestBodyDevices obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("devices" Data.Aeson.Types.ToJSON..= rescueLinodeInstanceRequestBodyDevices obj)
instance Data.Aeson.Types.FromJSON.FromJSON RescueLinodeInstanceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RescueLinodeInstanceRequestBody" (\obj -> GHC.Base.pure RescueLinodeInstanceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "devices"))
-- | Create a new 'RescueLinodeInstanceRequestBody' with all required fields.
mkRescueLinodeInstanceRequestBody :: RescueLinodeInstanceRequestBody
mkRescueLinodeInstanceRequestBody = RescueLinodeInstanceRequestBody{rescueLinodeInstanceRequestBodyDevices = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'rescueLinodeInstance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RescueLinodeInstanceResponseError' is used.
data RescueLinodeInstanceResponse =
   RescueLinodeInstanceResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | RescueLinodeInstanceResponse200 Data.Aeson.Types.Internal.Object -- ^ Rescue started.
  | RescueLinodeInstanceResponseDefault RescueLinodeInstanceResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data RescueLinodeInstanceResponseBodyDefault = RescueLinodeInstanceResponseBodyDefault {
  -- | errors
  rescueLinodeInstanceResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RescueLinodeInstanceResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= rescueLinodeInstanceResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= rescueLinodeInstanceResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON RescueLinodeInstanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RescueLinodeInstanceResponseBodyDefault" (\obj -> GHC.Base.pure RescueLinodeInstanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'RescueLinodeInstanceResponseBodyDefault' with all required fields.
mkRescueLinodeInstanceResponseBodyDefault :: RescueLinodeInstanceResponseBodyDefault
mkRescueLinodeInstanceResponseBodyDefault = RescueLinodeInstanceResponseBodyDefault{rescueLinodeInstanceResponseBodyDefaultErrors = GHC.Maybe.Nothing}
