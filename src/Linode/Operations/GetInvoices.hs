-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getInvoices
module Linode.Operations.GetInvoices where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /account/invoices
-- 
-- Returns a paginated list of Invoices against your Account.
getInvoices :: forall m . Linode.Common.MonadHTTP m => GetInvoicesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetInvoicesResponse) -- ^ Monadic computation which returns the result of the operation
getInvoices parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetInvoicesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetInvoicesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          GetInvoicesResponseBody200)
                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetInvoicesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                            GetInvoicesResponseBodyDefault)
                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/account/invoices") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicesParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/account\/invoices.GET.parameters@ in the specification.
-- 
-- 
data GetInvoicesParameters = GetInvoicesParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getInvoicesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getInvoicesParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getInvoicesParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getInvoicesParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getInvoicesParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getInvoicesParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicesParameters" (\obj -> (GHC.Base.pure GetInvoicesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetInvoicesParameters' with all required fields.
mkGetInvoicesParameters :: GetInvoicesParameters
mkGetInvoicesParameters = GetInvoicesParameters{getInvoicesParametersQueryPage = GHC.Maybe.Nothing,
                                                getInvoicesParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getInvoices'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetInvoicesResponseError' is used.
data GetInvoicesResponse =
   GetInvoicesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetInvoicesResponse200 GetInvoicesResponseBody200 -- ^ Returns a paginated list of Invoice objects.
  | GetInvoicesResponseDefault GetInvoicesResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/account\/invoices.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetInvoicesResponseBody200 = GetInvoicesResponseBody200 {
  -- | data
  getInvoicesResponseBody200Data :: (GHC.Maybe.Maybe ([Invoice]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getInvoicesResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getInvoicesResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getInvoicesResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getInvoicesResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicesResponseBody200" (\obj -> (((GHC.Base.pure GetInvoicesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetInvoicesResponseBody200' with all required fields.
mkGetInvoicesResponseBody200 :: GetInvoicesResponseBody200
mkGetInvoicesResponseBody200 = GetInvoicesResponseBody200{getInvoicesResponseBody200Data = GHC.Maybe.Nothing,
                                                          getInvoicesResponseBody200Page = GHC.Maybe.Nothing,
                                                          getInvoicesResponseBody200Pages = GHC.Maybe.Nothing,
                                                          getInvoicesResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetInvoicesResponseBodyDefault = GetInvoicesResponseBodyDefault {
  -- | errors
  getInvoicesResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicesResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getInvoicesResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getInvoicesResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicesResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicesResponseBodyDefault" (\obj -> GHC.Base.pure GetInvoicesResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetInvoicesResponseBodyDefault' with all required fields.
mkGetInvoicesResponseBodyDefault :: GetInvoicesResponseBodyDefault
mkGetInvoicesResponseBodyDefault = GetInvoicesResponseBodyDefault{getInvoicesResponseBodyDefaultErrors = GHC.Maybe.Nothing}
