-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getIPv6Ranges
module Linode.Operations.GetIPv6Ranges where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /networking/ipv6/ranges
-- 
-- Displays the IPv6 ranges on your Account.
-- 
-- 
--   * An IPv6 range is a \`\/64\` or \`\/54\` block of IPv6 addresses routed to a single Linode in a given [Region](\/docs\/api\/regions\/\#regions-list).
-- 
--   * Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.
-- 
--   * Access the IPv6 Range Create ([POST \/networking\/ipv6\/ranges](\/docs\/api\/networking\/\#ipv6-range-create)) endpoint to add a \`\/64\` or \`\/56\` block of IPv6 addresses to your account.
getIPv6Ranges :: forall m . Linode.Common.MonadHTTP m => GetIPv6RangesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetIPv6RangesResponse) -- ^ Monadic computation which returns the result of the operation
getIPv6Ranges parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIPv6RangesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIPv6RangesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetIPv6RangesResponseBody200)
                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetIPv6RangesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                  GetIPv6RangesResponseBodyDefault)
                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/networking/ipv6/ranges") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIPv6RangesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                              Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIPv6RangesParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/networking\/ipv6\/ranges.GET.parameters@ in the specification.
-- 
-- 
data GetIPv6RangesParameters = GetIPv6RangesParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getIPv6RangesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getIPv6RangesParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIPv6RangesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getIPv6RangesParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getIPv6RangesParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getIPv6RangesParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getIPv6RangesParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetIPv6RangesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIPv6RangesParameters" (\obj -> (GHC.Base.pure GetIPv6RangesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetIPv6RangesParameters' with all required fields.
mkGetIPv6RangesParameters :: GetIPv6RangesParameters
mkGetIPv6RangesParameters = GetIPv6RangesParameters{getIPv6RangesParametersQueryPage = GHC.Maybe.Nothing,
                                                    getIPv6RangesParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getIPv6Ranges'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIPv6RangesResponseError' is used.
data GetIPv6RangesResponse =
   GetIPv6RangesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetIPv6RangesResponse200 GetIPv6RangesResponseBody200 -- ^ The IPv6 ranges on your Account.
  | GetIPv6RangesResponseDefault GetIPv6RangesResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/networking\/ipv6\/ranges.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIPv6RangesResponseBody200 = GetIPv6RangesResponseBody200 {
  -- | data
  getIPv6RangesResponseBody200Data :: (GHC.Maybe.Maybe ([IPv6Range]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getIPv6RangesResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getIPv6RangesResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getIPv6RangesResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIPv6RangesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetIPv6RangesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIPv6RangesResponseBody200" (\obj -> (((GHC.Base.pure GetIPv6RangesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetIPv6RangesResponseBody200' with all required fields.
mkGetIPv6RangesResponseBody200 :: GetIPv6RangesResponseBody200
mkGetIPv6RangesResponseBody200 = GetIPv6RangesResponseBody200{getIPv6RangesResponseBody200Data = GHC.Maybe.Nothing,
                                                              getIPv6RangesResponseBody200Page = GHC.Maybe.Nothing,
                                                              getIPv6RangesResponseBody200Pages = GHC.Maybe.Nothing,
                                                              getIPv6RangesResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIPv6RangesResponseBodyDefault = GetIPv6RangesResponseBodyDefault {
  -- | errors
  getIPv6RangesResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIPv6RangesResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getIPv6RangesResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetIPv6RangesResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIPv6RangesResponseBodyDefault" (\obj -> GHC.Base.pure GetIPv6RangesResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetIPv6RangesResponseBodyDefault' with all required fields.
mkGetIPv6RangesResponseBodyDefault :: GetIPv6RangesResponseBodyDefault
mkGetIPv6RangesResponseBodyDefault = GetIPv6RangesResponseBodyDefault{getIPv6RangesResponseBodyDefaultErrors = GHC.Maybe.Nothing}
