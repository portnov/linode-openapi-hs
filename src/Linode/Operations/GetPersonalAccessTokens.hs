-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getPersonalAccessTokens
module Linode.Operations.GetPersonalAccessTokens where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > GET /profile/tokens
-- 
-- Returns a paginated list of Personal Access Tokens currently active for your User.
getPersonalAccessTokens :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetPersonalAccessTokensResponse)) -- ^ Monad containing the result of the operation
getPersonalAccessTokens config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPersonalAccessTokensResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPersonalAccessTokensResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPersonalAccessTokensResponseBody200)
                                                                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetPersonalAccessTokensResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetPersonalAccessTokensResponseBodyDefault)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/profile/tokens") [])
-- | > GET /profile/tokens
-- 
-- The same as 'getPersonalAccessTokens' but returns the raw 'Data.ByteString.Char8.ByteString'
getPersonalAccessTokensRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                            Linode.Common.SecurityScheme s) =>
                              Linode.Common.Configuration s ->
                              m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getPersonalAccessTokensRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/profile/tokens") [])
-- | > GET /profile/tokens
-- 
-- Monadic version of 'getPersonalAccessTokens' (use with 'Linode.Common.runWithConfiguration')
getPersonalAccessTokensM :: forall m s . (Linode.Common.MonadHTTP m,
                                          Linode.Common.SecurityScheme s) =>
                            Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                               m
                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                   (Network.HTTP.Client.Types.Response GetPersonalAccessTokensResponse))
getPersonalAccessTokensM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetPersonalAccessTokensResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPersonalAccessTokensResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPersonalAccessTokensResponseBody200)
                                                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetPersonalAccessTokensResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                     GetPersonalAccessTokensResponseBodyDefault)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/profile/tokens") [])
-- | > GET /profile/tokens
-- 
-- Monadic version of 'getPersonalAccessTokensRaw' (use with 'Linode.Common.runWithConfiguration')
getPersonalAccessTokensRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                             Linode.Common.SecurityScheme s) =>
                               Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                  m
                                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getPersonalAccessTokensRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/profile/tokens") [])
-- | Represents a response of the operation 'getPersonalAccessTokens'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPersonalAccessTokensResponseError' is used.
data GetPersonalAccessTokensResponse =                                                 
   GetPersonalAccessTokensResponseError GHC.Base.String                                -- ^ Means either no matching case available or a parse error
  | GetPersonalAccessTokensResponse200 GetPersonalAccessTokensResponseBody200          -- ^ A paginated list of active tokens.
  | GetPersonalAccessTokensResponseDefault GetPersonalAccessTokensResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetPersonalAccessTokensResponseBody200
-- 
-- 
data GetPersonalAccessTokensResponseBody200 = GetPersonalAccessTokensResponseBody200 {
  -- | data
  getPersonalAccessTokensResponseBody200Data :: (GHC.Base.Maybe ([] PersonalAccessToken))
  -- | page
  , getPersonalAccessTokensResponseBody200Page :: (GHC.Base.Maybe PaginationEnvelope_properties_page)
  -- | pages
  , getPersonalAccessTokensResponseBody200Pages :: (GHC.Base.Maybe PaginationEnvelope_properties_pages)
  -- | results
  , getPersonalAccessTokensResponseBody200Results :: (GHC.Base.Maybe PaginationEnvelope_properties_results)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPersonalAccessTokensResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getPersonalAccessTokensResponseBody200Data obj) : (Data.Aeson..=) "page" (getPersonalAccessTokensResponseBody200Page obj) : (Data.Aeson..=) "pages" (getPersonalAccessTokensResponseBody200Pages obj) : (Data.Aeson..=) "results" (getPersonalAccessTokensResponseBody200Results obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getPersonalAccessTokensResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "page" (getPersonalAccessTokensResponseBody200Page obj) GHC.Base.<> ((Data.Aeson..=) "pages" (getPersonalAccessTokensResponseBody200Pages obj) GHC.Base.<> (Data.Aeson..=) "results" (getPersonalAccessTokensResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPersonalAccessTokensResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPersonalAccessTokensResponseBody200" (\obj -> (((GHC.Base.pure GetPersonalAccessTokensResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Defines the data type for the schema GetPersonalAccessTokensResponseBodyDefault
-- 
-- 
data GetPersonalAccessTokensResponseBodyDefault = GetPersonalAccessTokensResponseBodyDefault {
  -- | errors
  getPersonalAccessTokensResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPersonalAccessTokensResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (getPersonalAccessTokensResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (getPersonalAccessTokensResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPersonalAccessTokensResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPersonalAccessTokensResponseBodyDefault" (\obj -> GHC.Base.pure GetPersonalAccessTokensResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
