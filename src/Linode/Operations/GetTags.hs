-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTags
module Linode.Operations.GetTags where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /tags
-- 
-- Tags are User-defined labels attached to objects in your Account, such as Linodes. They are used for specifying and grouping attributes of objects that are relevant to the User.
-- 
-- This endpoint returns a paginated list of Tags on your account.
getTags :: forall m . Linode.Common.MonadHTTP m => GetTagsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetTagsResponse) -- ^ Monadic computation which returns the result of the operation
getTags parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTagsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTagsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                              GetTagsResponseBody200)
                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetTagsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                GetTagsResponseBodyDefault)
                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/tags") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTagsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTagsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/tags.GET.parameters@ in the specification.
-- 
-- 
data GetTagsParameters = GetTagsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getTagsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getTagsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTagsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getTagsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getTagsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getTagsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getTagsParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetTagsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTagsParameters" (\obj -> (GHC.Base.pure GetTagsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetTagsParameters' with all required fields.
mkGetTagsParameters :: GetTagsParameters
mkGetTagsParameters = GetTagsParameters{getTagsParametersQueryPage = GHC.Maybe.Nothing,
                                        getTagsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getTags'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTagsResponseError' is used.
data GetTagsResponse =
   GetTagsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTagsResponse200 GetTagsResponseBody200 -- ^ A paginated list of Tags
  | GetTagsResponseDefault GetTagsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/tags.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTagsResponseBody200 = GetTagsResponseBody200 {
  -- | data
  getTagsResponseBody200Data :: (GHC.Maybe.Maybe ([Tag]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getTagsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getTagsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getTagsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTagsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getTagsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetTagsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTagsResponseBody200" (\obj -> (((GHC.Base.pure GetTagsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetTagsResponseBody200' with all required fields.
mkGetTagsResponseBody200 :: GetTagsResponseBody200
mkGetTagsResponseBody200 = GetTagsResponseBody200{getTagsResponseBody200Data = GHC.Maybe.Nothing,
                                                  getTagsResponseBody200Page = GHC.Maybe.Nothing,
                                                  getTagsResponseBody200Pages = GHC.Maybe.Nothing,
                                                  getTagsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTagsResponseBodyDefault = GetTagsResponseBodyDefault {
  -- | errors
  getTagsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTagsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getTagsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getTagsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetTagsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTagsResponseBodyDefault" (\obj -> GHC.Base.pure GetTagsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetTagsResponseBodyDefault' with all required fields.
mkGetTagsResponseBodyDefault :: GetTagsResponseBodyDefault
mkGetTagsResponseBodyDefault = GetTagsResponseBodyDefault{getTagsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
