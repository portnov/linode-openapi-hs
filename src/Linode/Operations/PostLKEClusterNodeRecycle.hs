-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postLKEClusterNodeRecycle
module Linode.Operations.PostLKEClusterNodeRecycle where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > POST /lke/clusters/{clusterId}/nodes/{nodeId}/recycle
-- 
-- Recycles an individual Node in the designated Kubernetes Cluster. The Node will be deleted
-- and replaced with a new Linode, which may take a few minutes. Replacement Nodes are
-- installed with the latest available patch for the Cluster\'s Kubernetes Version.
-- 
-- **Any local storage on deleted Linodes (such as \"hostPath\" and \"emptyDir\" volumes, or \"local\" PersistentVolumes) will be erased.**
postLKEClusterNodeRecycle :: forall m . Linode.Common.MonadHTTP m => PostLKEClusterNodeRecycleParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response PostLKEClusterNodeRecycleResponse) -- ^ Monadic computation which returns the result of the operation
postLKEClusterNodeRecycle parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLKEClusterNodeRecycleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterNodeRecycleResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostLKEClusterNodeRecycleResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                      PostLKEClusterNodeRecycleResponseBodyDefault)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/lke/clusters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (postLKEClusterNodeRecycleParametersPathClusterId parameters))) GHC.Base.++ ("/nodes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (postLKEClusterNodeRecycleParametersPathNodeId parameters))) GHC.Base.++ "/recycle"))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/lke\/clusters\/{clusterId}\/nodes\/{nodeId}\/recycle.POST.parameters@ in the specification.
-- 
-- 
data PostLKEClusterNodeRecycleParameters = PostLKEClusterNodeRecycleParameters {
  -- | pathClusterId: Represents the parameter named \'clusterId\'
  -- 
  -- ID of the Kubernetes cluster containing the Node.
  postLKEClusterNodeRecycleParametersPathClusterId :: GHC.Types.Int
  -- | pathNodeId: Represents the parameter named \'nodeId\'
  -- 
  -- ID of the Node to be recycled.
  , postLKEClusterNodeRecycleParametersPathNodeId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLKEClusterNodeRecycleParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathClusterId" Data.Aeson.Types.ToJSON..= postLKEClusterNodeRecycleParametersPathClusterId obj : "pathNodeId" Data.Aeson.Types.ToJSON..= postLKEClusterNodeRecycleParametersPathNodeId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathClusterId" Data.Aeson.Types.ToJSON..= postLKEClusterNodeRecycleParametersPathClusterId obj) GHC.Base.<> ("pathNodeId" Data.Aeson.Types.ToJSON..= postLKEClusterNodeRecycleParametersPathNodeId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLKEClusterNodeRecycleParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLKEClusterNodeRecycleParameters" (\obj -> (GHC.Base.pure PostLKEClusterNodeRecycleParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathClusterId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNodeId"))
-- | Create a new 'PostLKEClusterNodeRecycleParameters' with all required fields.
mkPostLKEClusterNodeRecycleParameters :: GHC.Types.Int -- ^ 'postLKEClusterNodeRecycleParametersPathClusterId'
  -> Data.Text.Internal.Text -- ^ 'postLKEClusterNodeRecycleParametersPathNodeId'
  -> PostLKEClusterNodeRecycleParameters
mkPostLKEClusterNodeRecycleParameters postLKEClusterNodeRecycleParametersPathClusterId postLKEClusterNodeRecycleParametersPathNodeId = PostLKEClusterNodeRecycleParameters{postLKEClusterNodeRecycleParametersPathClusterId = postLKEClusterNodeRecycleParametersPathClusterId,
                                                                                                                                                                           postLKEClusterNodeRecycleParametersPathNodeId = postLKEClusterNodeRecycleParametersPathNodeId}
-- | Represents a response of the operation 'postLKEClusterNodeRecycle'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLKEClusterNodeRecycleResponseError' is used.
data PostLKEClusterNodeRecycleResponse =
   PostLKEClusterNodeRecycleResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostLKEClusterNodeRecycleResponse200 Data.Aeson.Types.Internal.Object -- ^ Recycle request succeeded and is in progress.
  | PostLKEClusterNodeRecycleResponseDefault PostLKEClusterNodeRecycleResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data PostLKEClusterNodeRecycleResponseBodyDefault = PostLKEClusterNodeRecycleResponseBodyDefault {
  -- | errors
  postLKEClusterNodeRecycleResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLKEClusterNodeRecycleResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= postLKEClusterNodeRecycleResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= postLKEClusterNodeRecycleResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostLKEClusterNodeRecycleResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLKEClusterNodeRecycleResponseBodyDefault" (\obj -> GHC.Base.pure PostLKEClusterNodeRecycleResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'PostLKEClusterNodeRecycleResponseBodyDefault' with all required fields.
mkPostLKEClusterNodeRecycleResponseBodyDefault :: PostLKEClusterNodeRecycleResponseBodyDefault
mkPostLKEClusterNodeRecycleResponseBodyDefault = PostLKEClusterNodeRecycleResponseBodyDefault{postLKEClusterNodeRecycleResponseBodyDefaultErrors = GHC.Maybe.Nothing}
