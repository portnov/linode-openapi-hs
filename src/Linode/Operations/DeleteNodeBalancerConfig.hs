-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteNodeBalancerConfig
module Linode.Operations.DeleteNodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /nodebalancers/{nodeBalancerId}/configs/{configId}
-- 
-- Deletes the Config for a port of this NodeBalancer.
-- 
-- **This cannot be undone.**
-- 
-- Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.
deleteNodeBalancerConfig :: forall m . Linode.Common.MonadHTTP m => DeleteNodeBalancerConfigParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteNodeBalancerConfigResponse) -- ^ Monadic computation which returns the result of the operation
deleteNodeBalancerConfig parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                   DeleteNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack (("/nodebalancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteNodeBalancerConfigParametersPathNodeBalancerId parameters))) GHC.Base.++ "/configs/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (deleteNodeBalancerConfigParametersPathConfigId parameters))) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/nodebalancers\/{nodeBalancerId}\/configs\/{configId}.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteNodeBalancerConfigParameters = DeleteNodeBalancerConfigParameters {
  -- | pathConfigId: Represents the parameter named \'configId\'
  -- 
  -- The ID of the config to access.
  deleteNodeBalancerConfigParametersPathConfigId :: GHC.Types.Int
  -- | pathNodeBalancerId: Represents the parameter named \'nodeBalancerId\'
  -- 
  -- The ID of the NodeBalancer to access.
  , deleteNodeBalancerConfigParametersPathNodeBalancerId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteNodeBalancerConfigParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathConfigId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigParametersPathConfigId obj : "pathNodeBalancerId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigParametersPathNodeBalancerId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathConfigId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigParametersPathConfigId obj) GHC.Base.<> ("pathNodeBalancerId" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigParametersPathNodeBalancerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteNodeBalancerConfigParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteNodeBalancerConfigParameters" (\obj -> (GHC.Base.pure DeleteNodeBalancerConfigParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathConfigId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNodeBalancerId"))
-- | Create a new 'DeleteNodeBalancerConfigParameters' with all required fields.
mkDeleteNodeBalancerConfigParameters :: GHC.Types.Int -- ^ 'deleteNodeBalancerConfigParametersPathConfigId'
  -> GHC.Types.Int -- ^ 'deleteNodeBalancerConfigParametersPathNodeBalancerId'
  -> DeleteNodeBalancerConfigParameters
mkDeleteNodeBalancerConfigParameters deleteNodeBalancerConfigParametersPathConfigId deleteNodeBalancerConfigParametersPathNodeBalancerId = DeleteNodeBalancerConfigParameters{deleteNodeBalancerConfigParametersPathConfigId = deleteNodeBalancerConfigParametersPathConfigId,
                                                                                                                                                                              deleteNodeBalancerConfigParametersPathNodeBalancerId = deleteNodeBalancerConfigParametersPathNodeBalancerId}
-- | Represents a response of the operation 'deleteNodeBalancerConfig'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteNodeBalancerConfigResponseError' is used.
data DeleteNodeBalancerConfigResponse =
   DeleteNodeBalancerConfigResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteNodeBalancerConfigResponse200 Data.Aeson.Types.Internal.Object -- ^ NodeBalancer Config deleted successfully.
  | DeleteNodeBalancerConfigResponseDefault DeleteNodeBalancerConfigResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteNodeBalancerConfigResponseBodyDefault = DeleteNodeBalancerConfigResponseBodyDefault {
  -- | errors
  deleteNodeBalancerConfigResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteNodeBalancerConfigResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= deleteNodeBalancerConfigResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON DeleteNodeBalancerConfigResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteNodeBalancerConfigResponseBodyDefault" (\obj -> GHC.Base.pure DeleteNodeBalancerConfigResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'DeleteNodeBalancerConfigResponseBodyDefault' with all required fields.
mkDeleteNodeBalancerConfigResponseBodyDefault :: DeleteNodeBalancerConfigResponseBodyDefault
mkDeleteNodeBalancerConfigResponseBodyDefault = DeleteNodeBalancerConfigResponseBodyDefault{deleteNodeBalancerConfigResponseBodyDefaultErrors = GHC.Maybe.Nothing}
