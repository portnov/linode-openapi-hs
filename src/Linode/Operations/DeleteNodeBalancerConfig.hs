-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation deleteNodeBalancerConfig
module Linode.Operations.DeleteNodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > DELETE /nodebalancers/{nodeBalancerId}/configs/{configId}
-- 
-- Deletes the Config for a port of this NodeBalancer.
-- 
-- **This cannot be undone.**
-- 
-- Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.
deleteNodeBalancerConfig :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response DeleteNodeBalancerConfigResponse)) -- ^ Monad containing the result of the operation
deleteNodeBalancerConfig config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            DeleteNodeBalancerConfigResponseBody200)
                                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              DeleteNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}") [])
-- | > DELETE /nodebalancers/{nodeBalancerId}/configs/{configId}
-- 
-- The same as 'deleteNodeBalancerConfig' but returns the raw 'Data.ByteString.Char8.ByteString'
deleteNodeBalancerConfigRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                             Linode.Common.SecurityScheme s) =>
                               Linode.Common.Configuration s ->
                               m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
deleteNodeBalancerConfigRaw config = GHC.Base.id (Linode.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}") [])
-- | > DELETE /nodebalancers/{nodeBalancerId}/configs/{configId}
-- 
-- Monadic version of 'deleteNodeBalancerConfig' (use with 'Linode.Common.runWithConfiguration')
deleteNodeBalancerConfigM :: forall m s . (Linode.Common.MonadHTTP m,
                                           Linode.Common.SecurityScheme s) =>
                             Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                m
                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                    (Network.HTTP.Client.Types.Response DeleteNodeBalancerConfigResponse))
deleteNodeBalancerConfigM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either DeleteNodeBalancerConfigResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      DeleteNodeBalancerConfigResponseBody200)
                                                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> DeleteNodeBalancerConfigResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                        DeleteNodeBalancerConfigResponseBodyDefault)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}") [])
-- | > DELETE /nodebalancers/{nodeBalancerId}/configs/{configId}
-- 
-- Monadic version of 'deleteNodeBalancerConfigRaw' (use with 'Linode.Common.runWithConfiguration')
deleteNodeBalancerConfigRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                              Linode.Common.SecurityScheme s) =>
                                Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                   m
                                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
deleteNodeBalancerConfigRawM = GHC.Base.id (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/nodebalancers/{nodeBalancerId}/configs/{configId}") [])
-- | Represents a response of the operation 'deleteNodeBalancerConfig'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteNodeBalancerConfigResponseError' is used.
data DeleteNodeBalancerConfigResponse =                                                  
   DeleteNodeBalancerConfigResponseError GHC.Base.String                                 -- ^ Means either no matching case available or a parse error
  | DeleteNodeBalancerConfigResponse200 DeleteNodeBalancerConfigResponseBody200          -- ^ NodeBalancer Config deleted successfully.
  | DeleteNodeBalancerConfigResponseDefault DeleteNodeBalancerConfigResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema DeleteNodeBalancerConfigResponseBody200
-- 
-- 
data DeleteNodeBalancerConfigResponseBody200 = DeleteNodeBalancerConfigResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON DeleteNodeBalancerConfigResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteNodeBalancerConfigResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteNodeBalancerConfigResponseBody200" (\obj -> GHC.Base.pure DeleteNodeBalancerConfigResponseBody200)
-- | Defines the data type for the schema DeleteNodeBalancerConfigResponseBodyDefault
-- 
-- 
data DeleteNodeBalancerConfigResponseBodyDefault = DeleteNodeBalancerConfigResponseBodyDefault {
  -- | errors
  deleteNodeBalancerConfigResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON DeleteNodeBalancerConfigResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (deleteNodeBalancerConfigResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (deleteNodeBalancerConfigResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteNodeBalancerConfigResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteNodeBalancerConfigResponseBodyDefault" (\obj -> GHC.Base.pure DeleteNodeBalancerConfigResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
