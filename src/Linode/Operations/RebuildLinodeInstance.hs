-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation rebuildLinodeInstance
module Linode.Operations.RebuildLinodeInstance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types
import Linode.ManualTypes

-- | > POST /linode/instances/{linodeId}/rebuild
-- 
-- Rebuilds a Linode you have the \`read_write\` permission to modify.
-- A rebuild will first shut down the Linode, delete all disks and configs on the Linode, and then deploy a new \`image\` to the Linode with the given attributes. Additionally:
-- 
--   * Requires an \`image\` be supplied.
--   * Requires a \`root_pass\` be supplied to use for the root User\'s Account.
--   * It is recommended to supply SSH keys for the root User using the
--     \`authorized_keys\` field.
rebuildLinodeInstance :: forall m s . (Linode.Common.MonadHTTP m, Linode.Common.SecurityScheme s) => Linode.Common.Configuration s  -- ^ The configuration to use in the request
  -> RebuildLinodeInstanceRequestBody                                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response RebuildLinodeInstanceResponse)) -- ^ Monad containing the result of the operation
rebuildLinodeInstance config
                      body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RebuildLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RebuildLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 Linode)
                                                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RebuildLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                   RebuildLinodeInstanceResponseBodyDefault)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/rebuild
-- 
-- The same as 'rebuildLinodeInstance' but returns the raw 'Data.ByteString.Char8.ByteString'
rebuildLinodeInstanceRaw :: forall m s . (Linode.Common.MonadHTTP m,
                                          Linode.Common.SecurityScheme s) =>
                            Linode.Common.Configuration s ->
                            RebuildLinodeInstanceRequestBody ->
                            m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
rebuildLinodeInstanceRaw config
                         body = GHC.Base.id (Linode.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/rebuild
-- 
-- Monadic version of 'rebuildLinodeInstance' (use with 'Linode.Common.runWithConfiguration')
rebuildLinodeInstanceM :: forall m s . (Linode.Common.MonadHTTP m,
                                        Linode.Common.SecurityScheme s) =>
                          RebuildLinodeInstanceRequestBody ->
                          Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response RebuildLinodeInstanceResponse))
rebuildLinodeInstanceM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either RebuildLinodeInstanceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> RebuildLinodeInstanceResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  Linode)
                                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> RebuildLinodeInstanceResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    RebuildLinodeInstanceResponseBodyDefault)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | > POST /linode/instances/{linodeId}/rebuild
-- 
-- Monadic version of 'rebuildLinodeInstanceRaw' (use with 'Linode.Common.runWithConfiguration')
rebuildLinodeInstanceRawM :: forall m s . (Linode.Common.MonadHTTP m,
                                           Linode.Common.SecurityScheme s) =>
                             RebuildLinodeInstanceRequestBody ->
                             Control.Monad.Trans.Reader.ReaderT (Linode.Common.Configuration s)
                                                                m
                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
rebuildLinodeInstanceRawM body = GHC.Base.id (Linode.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/linode/instances/{linodeId}/rebuild") [] (GHC.Base.Just body) Linode.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema rebuildLinodeInstanceRequestBody
-- 
-- 
data RebuildLinodeInstanceRequestBody = RebuildLinodeInstanceRequestBody {
  -- | authorized_keys
  rebuildLinodeInstanceRequestBodyAuthorized_keys :: (GHC.Base.Maybe DiskRequest_properties_authorized_keys)
  -- | authorized_users
  , rebuildLinodeInstanceRequestBodyAuthorized_users :: (GHC.Base.Maybe DiskRequest_properties_authorized_users)
  -- | booted: This field defaults to \`true\` if the Linode is created with an Image or from a Backup.
  -- If it is deployed from an Image or a Backup and you wish it to remain \`offline\` after deployment, set this to \`false\`.
  , rebuildLinodeInstanceRequestBodyBooted :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | image
  , rebuildLinodeInstanceRequestBodyImage :: (GHC.Base.Maybe DiskRequest_properties_image)
  -- | root_pass
  , rebuildLinodeInstanceRequestBodyRoot_pass :: (GHC.Base.Maybe DiskRequest_properties_root_pass)
  -- | stackscript_data
  , rebuildLinodeInstanceRequestBodyStackscript_data :: (GHC.Base.Maybe DiskRequest_properties_stackscript_data)
  -- | stackscript_id
  , rebuildLinodeInstanceRequestBodyStackscript_id :: (GHC.Base.Maybe DiskRequest_properties_stackscript_id)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildLinodeInstanceRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authorized_keys" (rebuildLinodeInstanceRequestBodyAuthorized_keys obj) : (Data.Aeson..=) "authorized_users" (rebuildLinodeInstanceRequestBodyAuthorized_users obj) : (Data.Aeson..=) "booted" (rebuildLinodeInstanceRequestBodyBooted obj) : (Data.Aeson..=) "image" (rebuildLinodeInstanceRequestBodyImage obj) : (Data.Aeson..=) "root_pass" (rebuildLinodeInstanceRequestBodyRoot_pass obj) : (Data.Aeson..=) "stackscript_data" (rebuildLinodeInstanceRequestBodyStackscript_data obj) : (Data.Aeson..=) "stackscript_id" (rebuildLinodeInstanceRequestBodyStackscript_id obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authorized_keys" (rebuildLinodeInstanceRequestBodyAuthorized_keys obj) GHC.Base.<> ((Data.Aeson..=) "authorized_users" (rebuildLinodeInstanceRequestBodyAuthorized_users obj) GHC.Base.<> ((Data.Aeson..=) "booted" (rebuildLinodeInstanceRequestBodyBooted obj) GHC.Base.<> ((Data.Aeson..=) "image" (rebuildLinodeInstanceRequestBodyImage obj) GHC.Base.<> ((Data.Aeson..=) "root_pass" (rebuildLinodeInstanceRequestBodyRoot_pass obj) GHC.Base.<> ((Data.Aeson..=) "stackscript_data" (rebuildLinodeInstanceRequestBodyStackscript_data obj) GHC.Base.<> (Data.Aeson..=) "stackscript_id" (rebuildLinodeInstanceRequestBodyStackscript_id obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildLinodeInstanceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildLinodeInstanceRequestBody" (\obj -> ((((((GHC.Base.pure RebuildLinodeInstanceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "booted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_pass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_id"))
-- | Represents a response of the operation 'rebuildLinodeInstance'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RebuildLinodeInstanceResponseError' is used.
data RebuildLinodeInstanceResponse =                                               
   RebuildLinodeInstanceResponseError GHC.Base.String                              -- ^ Means either no matching case available or a parse error
  | RebuildLinodeInstanceResponse200 Linode                                        -- ^ Rebuild started.
  | RebuildLinodeInstanceResponseDefault RebuildLinodeInstanceResponseBodyDefault  -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema RebuildLinodeInstanceResponseBodyDefault
-- 
-- 
data RebuildLinodeInstanceResponseBodyDefault = RebuildLinodeInstanceResponseBodyDefault {
  -- | errors
  rebuildLinodeInstanceResponseBodyDefaultErrors :: (GHC.Base.Maybe ([] ErrorObject))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RebuildLinodeInstanceResponseBodyDefault
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "errors" (rebuildLinodeInstanceResponseBodyDefaultErrors obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "errors" (rebuildLinodeInstanceResponseBodyDefaultErrors obj))
instance Data.Aeson.Types.FromJSON.FromJSON RebuildLinodeInstanceResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RebuildLinodeInstanceResponseBodyDefault" (\obj -> GHC.Base.pure RebuildLinodeInstanceResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
