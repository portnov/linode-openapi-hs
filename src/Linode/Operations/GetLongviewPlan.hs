-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLongviewPlan
module Linode.Operations.GetLongviewPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /longview/plan
-- 
-- Get the details of your current Longview plan. This returns a \`LongviewSubscription\` object for your current Longview Pro plan, or an empty set \`{}\` if your current plan is Longview Free.
-- 
-- You must have at least one of the following \`global\` [User Grants](\/docs\/api\/account\/\#users-grants-view) in order to access this endpoint:
-- 
--   - \`\"account_access\": read_write\`
--   - \`\"account_access\": read_only\`
--   - \`\"longview_subscription\": true\`
--   - \`\"add_longview\": true\`
-- 
-- 
-- To update your subscription plan, send a request to [Update Longview Plan](\/docs\/api\/longview\/\#longview-plan-update).
getLongviewPlan :: forall m . Linode.Common.MonadHTTP m => Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetLongviewPlanResponse) -- ^ Monadic computation which returns the result of the operation
getLongviewPlan = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLongviewPlanResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLongviewPlanResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           LongviewSubscription)
                                                                                                                                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLongviewPlanResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                             GetLongviewPlanResponseBodyDefault)
                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/longview/plan") GHC.Base.mempty)
-- | Represents a response of the operation 'getLongviewPlan'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLongviewPlanResponseError' is used.
data GetLongviewPlanResponse =
   GetLongviewPlanResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLongviewPlanResponse200 LongviewSubscription -- ^ The Longview plan details for this account.
  | GetLongviewPlanResponseDefault GetLongviewPlanResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLongviewPlanResponseBodyDefault = GetLongviewPlanResponseBodyDefault {
  -- | errors
  getLongviewPlanResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLongviewPlanResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getLongviewPlanResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getLongviewPlanResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLongviewPlanResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLongviewPlanResponseBodyDefault" (\obj -> GHC.Base.pure GetLongviewPlanResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetLongviewPlanResponseBodyDefault' with all required fields.
mkGetLongviewPlanResponseBodyDefault :: GetLongviewPlanResponseBodyDefault
mkGetLongviewPlanResponseBodyDefault = GetLongviewPlanResponseBodyDefault{getLongviewPlanResponseBodyDefaultErrors = GHC.Maybe.Nothing}
