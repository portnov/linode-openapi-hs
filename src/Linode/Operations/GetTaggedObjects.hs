-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTaggedObjects
module Linode.Operations.GetTaggedObjects where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /tags/{label}
-- 
-- Returns a paginated list of all objects you\'ve tagged with the requested Tag. This is a mixed collection of all object types.
getTaggedObjects :: forall m . Linode.Common.MonadHTTP m => GetTaggedObjectsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetTaggedObjectsResponse) -- ^ Monadic computation which returns the result of the operation
getTaggedObjects parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTaggedObjectsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTaggedObjectsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetTaggedObjectsResponseBody200)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetTaggedObjectsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           GetTaggedObjectsResponseBodyDefault)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/tags/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Linode.Common.stringifyModel (getTaggedObjectsParametersPathLabel parameters))) GHC.Base.++ ""))) [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaggedObjectsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
inode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaggedObjectsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/tags\/{label}.GET.parameters@ in the specification.
-- 
-- 
data GetTaggedObjectsParameters = GetTaggedObjectsParameters {
  -- | pathLabel: Represents the parameter named \'label\'
  getTaggedObjectsParametersPathLabel :: Data.Text.Internal.Text
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  , getTaggedObjectsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getTaggedObjectsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaggedObjectsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLabel" Data.Aeson.Types.ToJSON..= getTaggedObjectsParametersPathLabel obj : "queryPage" Data.Aeson.Types.ToJSON..= getTaggedObjectsParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getTaggedObjectsParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLabel" Data.Aeson.Types.ToJSON..= getTaggedObjectsParametersPathLabel obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= getTaggedObjectsParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getTaggedObjectsParametersQueryPageSize obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTaggedObjectsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaggedObjectsParameters" (\obj -> ((GHC.Base.pure GetTaggedObjectsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLabel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetTaggedObjectsParameters' with all required fields.
mkGetTaggedObjectsParameters :: Data.Text.Internal.Text -- ^ 'getTaggedObjectsParametersPathLabel'
  -> GetTaggedObjectsParameters
mkGetTaggedObjectsParameters getTaggedObjectsParametersPathLabel = GetTaggedObjectsParameters{getTaggedObjectsParametersPathLabel = getTaggedObjectsParametersPathLabel,
                                                                                              getTaggedObjectsParametersQueryPage = GHC.Maybe.Nothing,
                                                                                              getTaggedObjectsParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getTaggedObjects'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTaggedObjectsResponseError' is used.
data GetTaggedObjectsResponse =
   GetTaggedObjectsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTaggedObjectsResponse200 GetTaggedObjectsResponseBody200 -- ^ A paginated list of objects, organized by type, that have been tagged with the requested Tag. 
  | GetTaggedObjectsResponseDefault GetTaggedObjectsResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/tags\/{label}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTaggedObjectsResponseBody200 = GetTaggedObjectsResponseBody200 {
  -- | data
  getTaggedObjectsResponseBody200Data :: (GHC.Maybe.Maybe ([GetTaggedObjectsResponseBody200Data']))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getTaggedObjectsResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getTaggedObjectsResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getTaggedObjectsResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaggedObjectsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetTaggedObjectsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaggedObjectsResponseBody200" (\obj -> (((GHC.Base.pure GetTaggedObjectsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetTaggedObjectsResponseBody200' with all required fields.
mkGetTaggedObjectsResponseBody200 :: GetTaggedObjectsResponseBody200
mkGetTaggedObjectsResponseBody200 = GetTaggedObjectsResponseBody200{getTaggedObjectsResponseBody200Data = GHC.Maybe.Nothing,
                                                                    getTaggedObjectsResponseBody200Page = GHC.Maybe.Nothing,
                                                                    getTaggedObjectsResponseBody200Pages = GHC.Maybe.Nothing,
                                                                    getTaggedObjectsResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/tags\/{label}.GET.responses.200.content.application\/json.schema.properties.data.items@ in the specification.
-- 
-- 
data GetTaggedObjectsResponseBody200Data' = GetTaggedObjectsResponseBody200Data' {
  -- | data
  getTaggedObjectsResponseBody200Data'Data :: (GHC.Maybe.Maybe GetTaggedObjectsResponseBody200Data'Data'Variants)
  -- | type
  , getTaggedObjectsResponseBody200Data'Type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaggedObjectsResponseBody200Data'
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Data'Data obj : "type" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Data'Type obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Data'Data obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBody200Data'Type obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetTaggedObjectsResponseBody200Data'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaggedObjectsResponseBody200Data'" (\obj -> (GHC.Base.pure GetTaggedObjectsResponseBody200Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Create a new 'GetTaggedObjectsResponseBody200Data'' with all required fields.
mkGetTaggedObjectsResponseBody200Data' :: GetTaggedObjectsResponseBody200Data'
mkGetTaggedObjectsResponseBody200Data' = GetTaggedObjectsResponseBody200Data'{getTaggedObjectsResponseBody200Data'Data = GHC.Maybe.Nothing,
                                                                              getTaggedObjectsResponseBody200Data'Type = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/tags\/{label}.GET.responses.200.content.application\/json.schema.properties.data.items.properties.data.oneOf@ in the specification.
-- 
-- 
data GetTaggedObjectsResponseBody200Data'Data'Variants =
   GetTaggedObjectsResponseBody200Data'Data'Linode Linode
  | GetTaggedObjectsResponseBody200Data'Data'Domain Domain
  | GetTaggedObjectsResponseBody200Data'Data'Volume Volume
  | GetTaggedObjectsResponseBody200Data'Data'NodeBalancer NodeBalancer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaggedObjectsResponseBody200Data'Data'Variants
    where toJSON (GetTaggedObjectsResponseBody200Data'Data'Linode a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetTaggedObjectsResponseBody200Data'Data'Domain a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetTaggedObjectsResponseBody200Data'Data'Volume a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetTaggedObjectsResponseBody200Data'Data'NodeBalancer a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetTaggedObjectsResponseBody200Data'Data'Variants
    where parseJSON val = case (GetTaggedObjectsResponseBody200Data'Data'Linode Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetTaggedObjectsResponseBody200Data'Data'Domain Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetTaggedObjectsResponseBody200Data'Data'Volume Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetTaggedObjectsResponseBody200Data'Data'NodeBalancer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTaggedObjectsResponseBodyDefault = GetTaggedObjectsResponseBodyDefault {
  -- | errors
  getTaggedObjectsResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaggedObjectsResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getTaggedObjectsResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetTaggedObjectsResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaggedObjectsResponseBodyDefault" (\obj -> GHC.Base.pure GetTaggedObjectsResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetTaggedObjectsResponseBodyDefault' with all required fields.
mkGetTaggedObjectsResponseBodyDefault :: GetTaggedObjectsResponseBodyDefault
mkGetTaggedObjectsResponseBodyDefault = GetTaggedObjectsResponseBodyDefault{getTaggedObjectsResponseBodyDefaultErrors = GHC.Maybe.Nothing}
