-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getVolumes
module Linode.Operations.GetVolumes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Linode.Common
import Linode.Types

-- | > GET /volumes
-- 
-- Returns a paginated list of Volumes you have permission to view.
getVolumes :: forall m . Linode.Common.MonadHTTP m => GetVolumesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Linode.Common.ClientT m (Network.HTTP.Client.Types.Response GetVolumesResponse) -- ^ Monadic computation which returns the result of the operation
getVolumes parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetVolumesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVolumesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       GetVolumesResponseBody200)
                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetVolumesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         GetVolumesResponseBodyDefault)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Linode.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/volumes") [Linode.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                         Linode.Common.QueryParameter (Data.Text.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/volumes.GET.parameters@ in the specification.
-- 
-- 
data GetVolumesParameters = GetVolumesParameters {
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page of a collection to return.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  getVolumesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPage_size: Represents the parameter named \'page_size\'
  -- 
  -- The number of items to return per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 25.0
  , getVolumesParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryPage obj : "queryPage_size" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryPageSize obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryPage obj) GHC.Base.<> ("queryPage_size" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryPageSize obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesParameters" (\obj -> (GHC.Base.pure GetVolumesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage_size"))
-- | Create a new 'GetVolumesParameters' with all required fields.
mkGetVolumesParameters :: GetVolumesParameters
mkGetVolumesParameters = GetVolumesParameters{getVolumesParametersQueryPage = GHC.Maybe.Nothing,
                                              getVolumesParametersQueryPageSize = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getVolumes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetVolumesResponseError' is used.
data GetVolumesResponse =
   GetVolumesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetVolumesResponse200 GetVolumesResponseBody200 -- ^ Returns an array of all Volumes on your Account.
  | GetVolumesResponseDefault GetVolumesResponseBodyDefault -- ^ Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetVolumesResponseBody200 = GetVolumesResponseBody200 {
  -- | data
  getVolumesResponseBody200Data :: (GHC.Maybe.Maybe ([Volume]))
  -- | page: The current [page](\/docs\/api\/\#pagination).
  , getVolumesResponseBody200Page :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPage)
  -- | pages: The total number of [pages](\/docs\/api\/\#pagination).
  , getVolumesResponseBody200Pages :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesPages)
  -- | results: The total number of results.
  , getVolumesResponseBody200Results :: (GHC.Maybe.Maybe PaginationEnvelopePropertiesResults)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Data obj : "page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Page obj : "pages" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Pages obj : "results" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Results obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Data obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Page obj) GHC.Base.<> (("pages" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Pages obj) GHC.Base.<> ("results" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Results obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200" (\obj -> (((GHC.Base.pure GetVolumesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "results"))
-- | Create a new 'GetVolumesResponseBody200' with all required fields.
mkGetVolumesResponseBody200 :: GetVolumesResponseBody200
mkGetVolumesResponseBody200 = GetVolumesResponseBody200{getVolumesResponseBody200Data = GHC.Maybe.Nothing,
                                                        getVolumesResponseBody200Page = GHC.Maybe.Nothing,
                                                        getVolumesResponseBody200Pages = GHC.Maybe.Nothing,
                                                        getVolumesResponseBody200Results = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.ErrorResponse.content.application\/json.schema@ in the specification.
-- 
-- 
data GetVolumesResponseBodyDefault = GetVolumesResponseBodyDefault {
  -- | errors
  getVolumesResponseBodyDefaultErrors :: (GHC.Maybe.Maybe ([ErrorObject]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBodyDefault
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= getVolumesResponseBodyDefaultErrors obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("errors" Data.Aeson.Types.ToJSON..= getVolumesResponseBodyDefaultErrors obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBodyDefault
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBodyDefault" (\obj -> GHC.Base.pure GetVolumesResponseBodyDefault GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors"))
-- | Create a new 'GetVolumesResponseBodyDefault' with all required fields.
mkGetVolumesResponseBodyDefault :: GetVolumesResponseBodyDefault
mkGetVolumesResponseBodyDefault = GetVolumesResponseBodyDefault{getVolumesResponseBodyDefaultErrors = GHC.Maybe.Nothing}
