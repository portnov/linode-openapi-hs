-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema SupportTicket
module Linode.Types.SupportTicket where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema SupportTicket
-- 
-- A Support Ticket opened on your Account.
data SupportTicket = SupportTicket {
  -- | attachments: A list of filenames representing attached files associated with this Ticket.
  supportTicketAttachments :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | closable: Whether the Support Ticket may be closed.
  , supportTicketClosable :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | closed: The date and time this Ticket was closed.
  , supportTicketClosed :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | description: The full details of the issue or question.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 65000
  -- * Minimum length of 1
  , supportTicketDescription :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | entity: The entity this Ticket was opened for.
  , supportTicketEntity :: (GHC.Base.Maybe SupportTicketEntity)
  -- | gravatar_id: The Gravatar ID of the User who opened this Ticket.
  , supportTicketGravatar_id :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The ID of the Support Ticket.
  , supportTicketId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | opened: The date and time this Ticket was created.
  , supportTicketOpened :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | opened_by: The User who opened this Ticket.
  , supportTicketOpened_by :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | status: The current status of this Ticket.
  , supportTicketStatus :: (GHC.Base.Maybe SupportTicketStatus)
  -- | summary: The summary or title for this Ticket.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 1
  , supportTicketSummary :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | updated: The date and time this Ticket was last updated.
  , supportTicketUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | updated_by: The User who last updated this Ticket.
  , supportTicketUpdated_by :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON SupportTicket
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "attachments" (supportTicketAttachments obj) : (Data.Aeson..=) "closable" (supportTicketClosable obj) : (Data.Aeson..=) "closed" (supportTicketClosed obj) : (Data.Aeson..=) "description" (supportTicketDescription obj) : (Data.Aeson..=) "entity" (supportTicketEntity obj) : (Data.Aeson..=) "gravatar_id" (supportTicketGravatar_id obj) : (Data.Aeson..=) "id" (supportTicketId obj) : (Data.Aeson..=) "opened" (supportTicketOpened obj) : (Data.Aeson..=) "opened_by" (supportTicketOpened_by obj) : (Data.Aeson..=) "status" (supportTicketStatus obj) : (Data.Aeson..=) "summary" (supportTicketSummary obj) : (Data.Aeson..=) "updated" (supportTicketUpdated obj) : (Data.Aeson..=) "updated_by" (supportTicketUpdated_by obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "attachments" (supportTicketAttachments obj) GHC.Base.<> ((Data.Aeson..=) "closable" (supportTicketClosable obj) GHC.Base.<> ((Data.Aeson..=) "closed" (supportTicketClosed obj) GHC.Base.<> ((Data.Aeson..=) "description" (supportTicketDescription obj) GHC.Base.<> ((Data.Aeson..=) "entity" (supportTicketEntity obj) GHC.Base.<> ((Data.Aeson..=) "gravatar_id" (supportTicketGravatar_id obj) GHC.Base.<> ((Data.Aeson..=) "id" (supportTicketId obj) GHC.Base.<> ((Data.Aeson..=) "opened" (supportTicketOpened obj) GHC.Base.<> ((Data.Aeson..=) "opened_by" (supportTicketOpened_by obj) GHC.Base.<> ((Data.Aeson..=) "status" (supportTicketStatus obj) GHC.Base.<> ((Data.Aeson..=) "summary" (supportTicketSummary obj) GHC.Base.<> ((Data.Aeson..=) "updated" (supportTicketUpdated obj) GHC.Base.<> (Data.Aeson..=) "updated_by" (supportTicketUpdated_by obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SupportTicket
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SupportTicket" (\obj -> ((((((((((((GHC.Base.pure SupportTicket GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "attachments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "closable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "closed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gravatar_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "opened")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "opened_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "summary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_by"))
-- | Defines the data type for the schema SupportTicketEntity
-- 
-- The entity this Ticket was opened for.
data SupportTicketEntity = SupportTicketEntity {
  -- | id: The unique ID for this Ticket\'s entity.
  supportTicketEntityId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The current label of this entity.
  , supportTicketEntityLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity this is related to.
  , supportTicketEntityType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | url: The URL where you can access the object this event is for. If a relative URL, it is relative to the domain you retrieved the entity from.
  , supportTicketEntityUrl :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON SupportTicketEntity
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (supportTicketEntityId obj) : (Data.Aeson..=) "label" (supportTicketEntityLabel obj) : (Data.Aeson..=) "type" (supportTicketEntityType obj) : (Data.Aeson..=) "url" (supportTicketEntityUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (supportTicketEntityId obj) GHC.Base.<> ((Data.Aeson..=) "label" (supportTicketEntityLabel obj) GHC.Base.<> ((Data.Aeson..=) "type" (supportTicketEntityType obj) GHC.Base.<> (Data.Aeson..=) "url" (supportTicketEntityUrl obj))))
instance Data.Aeson.Types.FromJSON.FromJSON SupportTicketEntity
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SupportTicketEntity" (\obj -> (((GHC.Base.pure SupportTicketEntity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Defines the enum schema SupportTicketStatus
-- 
-- The current status of this Ticket.
data SupportTicketStatus
    = SupportTicketStatusEnumOther Data.Aeson.Types.Internal.Value
    | SupportTicketStatusEnumTyped Data.Text.Internal.Text
    | SupportTicketStatusEnumString_closed
    | SupportTicketStatusEnumString_new
    | SupportTicketStatusEnumString_open
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SupportTicketStatus
    where toJSON (SupportTicketStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SupportTicketStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SupportTicketStatusEnumString_closed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "closed"
          toJSON (SupportTicketStatusEnumString_new) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "new"
          toJSON (SupportTicketStatusEnumString_open) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "open"
instance Data.Aeson.FromJSON SupportTicketStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "closed")
                                          then SupportTicketStatusEnumString_closed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "new")
                                                then SupportTicketStatusEnumString_new
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "open")
                                                      then SupportTicketStatusEnumString_open
                                                      else SupportTicketStatusEnumOther val)