-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LKENodePoolPropertiesDisksItems
module Linode.Types.LKENodePoolPropertiesDisksItems where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LKENodePoolPropertiesDisksItems@ in the specification.
-- 
-- The values to assign to each partition in this Node Pool\'s custom disk layout.
data LKENodePoolPropertiesDisksItems = LKENodePoolPropertiesDisksItems {
  -- | size: The size of this custom disk partition in MB.
  -- 
  --   * The size of this disk partition must not exceed the capacity of the node\'s plan type.
  lKENodePoolPropertiesDisksItemsSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | type: This custom disk partition\'s filesystem type.
  , lKENodePoolPropertiesDisksItemsType :: (GHC.Maybe.Maybe LKENodePoolPropertiesDisksItemsType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LKENodePoolPropertiesDisksItems
    where toJSON obj = Data.Aeson.Types.Internal.object ("size" Data.Aeson.Types.ToJSON..= lKENodePoolPropertiesDisksItemsSize obj : "type" Data.Aeson.Types.ToJSON..= lKENodePoolPropertiesDisksItemsType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("size" Data.Aeson.Types.ToJSON..= lKENodePoolPropertiesDisksItemsSize obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= lKENodePoolPropertiesDisksItemsType obj))
instance Data.Aeson.Types.FromJSON.FromJSON LKENodePoolPropertiesDisksItems
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKENodePoolPropertiesDisksItems" (\obj -> (GHC.Base.pure LKENodePoolPropertiesDisksItems GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Create a new 'LKENodePoolPropertiesDisksItems' with all required fields.
mkLKENodePoolPropertiesDisksItems :: LKENodePoolPropertiesDisksItems
mkLKENodePoolPropertiesDisksItems = LKENodePoolPropertiesDisksItems{lKENodePoolPropertiesDisksItemsSize = GHC.Maybe.Nothing,
                                                                    lKENodePoolPropertiesDisksItemsType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.LKENodePoolPropertiesDisksItems.properties.type@ in the specification.
-- 
-- This custom disk partition\'s filesystem type.
data LKENodePoolPropertiesDisksItemsType' =
   LKENodePoolPropertiesDisksItemsType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LKENodePoolPropertiesDisksItemsType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LKENodePoolPropertiesDisksItemsType'EnumRaw -- ^ Represents the JSON value @"raw"@
  | LKENodePoolPropertiesDisksItemsType'EnumExt4 -- ^ Represents the JSON value @"ext4"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LKENodePoolPropertiesDisksItemsType'
    where toJSON (LKENodePoolPropertiesDisksItemsType'Other val) = val
          toJSON (LKENodePoolPropertiesDisksItemsType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LKENodePoolPropertiesDisksItemsType'EnumRaw) = "raw"
          toJSON (LKENodePoolPropertiesDisksItemsType'EnumExt4) = "ext4"
instance Data.Aeson.Types.FromJSON.FromJSON LKENodePoolPropertiesDisksItemsType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "raw" -> LKENodePoolPropertiesDisksItemsType'EnumRaw
                                            | val GHC.Classes.== "ext4" -> LKENodePoolPropertiesDisksItemsType'EnumExt4
                                            | GHC.Base.otherwise -> LKENodePoolPropertiesDisksItemsType'Other val)
