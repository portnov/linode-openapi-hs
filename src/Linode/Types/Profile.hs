-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Profile
module Linode.Types.Profile where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Profile@ in the specification.
-- 
-- A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
data Profile = Profile {
  -- | authentication_type: This account\'s Cloud Manager authentication type. Authentication types are chosen through
  -- Cloud Manager and authorized when logging into your account. These authentication types are either
  -- the user\'s password (in conjunction with their username), or the name of their
  -- indentity provider such as GitHub. For example, if a user:
  -- 
  -- - Has never used Third-Party Authentication, their authentication type will be \`password\`.
  -- - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. \`github\`).
  -- - Has used Third-Party Authentication and has since revoked it, their authentication type will be \`password\`.
  -- 
  -- 
  -- **Note:** This functionality may not yet be available in Cloud Manager.
  -- See the [Cloud Manager Changelog](\/changelog\/cloud-manager\/) for the latest updates.
  profileAuthenticationType :: (GHC.Maybe.Maybe ProfileAuthenticationType')
  -- | authorized_keys: The list of SSH Keys authorized to use Lish for your User. This value is ignored if \`lish_auth_method\` is \"disabled.\"
  , profileAuthorizedKeys :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | email: Your email address.  This address will be used for communication with Linode as necessary.
  , profileEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | email_notifications: If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
  , profileEmailNotifications :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | ip_whitelist_enabled: If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
  -- 
  -- If you disable this setting, you will not be able to re-enable it.
  , profileIpWhitelistEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | lish_auth_method: The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](\/docs\/platform\/manager\/using-the-linode-shell-lish\/).
  -- * \`keys_only\` is the most secure if you intend to use Lish.
  -- * \`disabled\` is recommended if you do not intend to use Lish at all.
  -- * If this account\'s Cloud Manager authentication type is set to a Third-Party Authentication method, \`password_keys\` cannot be used as your Lish authentication method. To view this account\'s Cloud Manager \`authentication_type\` field, send a request to the [View Profile](\/docs\/api\/profile\/\#profile-view) endpoint.
  , profileLishAuthMethod :: (GHC.Maybe.Maybe ProfileLishAuthMethod')
  -- | referrals: Information about your status in our referral program.
  -- 
  -- This information becomes accessible after this Profile\'s Account has established at least \$25.00 USD of total payments.
  , profileReferrals :: (GHC.Maybe.Maybe ProfileReferrals')
  -- | restricted: If true, your User has restrictions on what can be accessed on your Account. To get details on what entities\/actions you can access\/perform, see [\/profile\/grants](\/docs\/api\/profile\/\#grants-list).
  , profileRestricted :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | timezone: The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
  , profileTimezone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | two_factor_auth: If true, logins from untrusted computers will require Two Factor Authentication.  See [\/profile\/tfa-enable](\/docs\/api\/profile\/\#two-factor-secret-create) to enable Two Factor Authentication.
  , profileTwoFactorAuth :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | uid: Your unique ID in our system. This value will never change, and can safely be used to identify your User.
  , profileUid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | username: Your username, used for logging in to our system.
  , profileUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Profile
    where toJSON obj = Data.Aeson.Types.Internal.object ("authentication_type" Data.Aeson.Types.ToJSON..= profileAuthenticationType obj : "authorized_keys" Data.Aeson.Types.ToJSON..= profileAuthorizedKeys obj : "email" Data.Aeson.Types.ToJSON..= profileEmail obj : "email_notifications" Data.Aeson.Types.ToJSON..= profileEmailNotifications obj : "ip_whitelist_enabled" Data.Aeson.Types.ToJSON..= profileIpWhitelistEnabled obj : "lish_auth_method" Data.Aeson.Types.ToJSON..= profileLishAuthMethod obj : "referrals" Data.Aeson.Types.ToJSON..= profileReferrals obj : "restricted" Data.Aeson.Types.ToJSON..= profileRestricted obj : "timezone" Data.Aeson.Types.ToJSON..= profileTimezone obj : "two_factor_auth" Data.Aeson.Types.ToJSON..= profileTwoFactorAuth obj : "uid" Data.Aeson.Types.ToJSON..= profileUid obj : "username" Data.Aeson.Types.ToJSON..= profileUsername obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("authentication_type" Data.Aeson.Types.ToJSON..= profileAuthenticationType obj) GHC.Base.<> (("authorized_keys" Data.Aeson.Types.ToJSON..= profileAuthorizedKeys obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= profileEmail obj) GHC.Base.<> (("email_notifications" Data.Aeson.Types.ToJSON..= profileEmailNotifications obj) GHC.Base.<> (("ip_whitelist_enabled" Data.Aeson.Types.ToJSON..= profileIpWhitelistEnabled obj) GHC.Base.<> (("lish_auth_method" Data.Aeson.Types.ToJSON..= profileLishAuthMethod obj) GHC.Base.<> (("referrals" Data.Aeson.Types.ToJSON..= profileReferrals obj) GHC.Base.<> (("restricted" Data.Aeson.Types.ToJSON..= profileRestricted obj) GHC.Base.<> (("timezone" Data.Aeson.Types.ToJSON..= profileTimezone obj) GHC.Base.<> (("two_factor_auth" Data.Aeson.Types.ToJSON..= profileTwoFactorAuth obj) GHC.Base.<> (("uid" Data.Aeson.Types.ToJSON..= profileUid obj) GHC.Base.<> ("username" Data.Aeson.Types.ToJSON..= profileUsername obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Profile
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Profile" (\obj -> (((((((((((GHC.Base.pure Profile GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authentication_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email_notifications")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_whitelist_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lish_auth_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "referrals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "restricted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "timezone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "two_factor_auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))
-- | Create a new 'Profile' with all required fields.
mkProfile :: Profile
mkProfile = Profile{profileAuthenticationType = GHC.Maybe.Nothing,
                    profileAuthorizedKeys = GHC.Maybe.Nothing,
                    profileEmail = GHC.Maybe.Nothing,
                    profileEmailNotifications = GHC.Maybe.Nothing,
                    profileIpWhitelistEnabled = GHC.Maybe.Nothing,
                    profileLishAuthMethod = GHC.Maybe.Nothing,
                    profileReferrals = GHC.Maybe.Nothing,
                    profileRestricted = GHC.Maybe.Nothing,
                    profileTimezone = GHC.Maybe.Nothing,
                    profileTwoFactorAuth = GHC.Maybe.Nothing,
                    profileUid = GHC.Maybe.Nothing,
                    profileUsername = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Profile.properties.authentication_type@ in the specification.
-- 
-- This account\'s Cloud Manager authentication type. Authentication types are chosen through
-- Cloud Manager and authorized when logging into your account. These authentication types are either
-- the user\'s password (in conjunction with their username), or the name of their
-- indentity provider such as GitHub. For example, if a user:
-- 
-- - Has never used Third-Party Authentication, their authentication type will be \`password\`.
-- - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. \`github\`).
-- - Has used Third-Party Authentication and has since revoked it, their authentication type will be \`password\`.
-- 
-- 
-- **Note:** This functionality may not yet be available in Cloud Manager.
-- See the [Cloud Manager Changelog](\/changelog\/cloud-manager\/) for the latest updates.
data ProfileAuthenticationType' =
   ProfileAuthenticationType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ProfileAuthenticationType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ProfileAuthenticationType'EnumPassword -- ^ Represents the JSON value @"password"@
  | ProfileAuthenticationType'EnumGithub -- ^ Represents the JSON value @"github"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ProfileAuthenticationType'
    where toJSON (ProfileAuthenticationType'Other val) = val
          toJSON (ProfileAuthenticationType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ProfileAuthenticationType'EnumPassword) = "password"
          toJSON (ProfileAuthenticationType'EnumGithub) = "github"
instance Data.Aeson.Types.FromJSON.FromJSON ProfileAuthenticationType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "password" -> ProfileAuthenticationType'EnumPassword
                                            | val GHC.Classes.== "github" -> ProfileAuthenticationType'EnumGithub
                                            | GHC.Base.otherwise -> ProfileAuthenticationType'Other val)
-- | Defines the enum schema located at @components.schemas.Profile.properties.lish_auth_method@ in the specification.
-- 
-- The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](\/docs\/platform\/manager\/using-the-linode-shell-lish\/).
-- * \`keys_only\` is the most secure if you intend to use Lish.
-- * \`disabled\` is recommended if you do not intend to use Lish at all.
-- * If this account\'s Cloud Manager authentication type is set to a Third-Party Authentication method, \`password_keys\` cannot be used as your Lish authentication method. To view this account\'s Cloud Manager \`authentication_type\` field, send a request to the [View Profile](\/docs\/api\/profile\/\#profile-view) endpoint.
data ProfileLishAuthMethod' =
   ProfileLishAuthMethod'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ProfileLishAuthMethod'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ProfileLishAuthMethod'EnumPasswordKeys -- ^ Represents the JSON value @"password_keys"@
  | ProfileLishAuthMethod'EnumKeysOnly -- ^ Represents the JSON value @"keys_only"@
  | ProfileLishAuthMethod'EnumDisabled -- ^ Represents the JSON value @"disabled"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ProfileLishAuthMethod'
    where toJSON (ProfileLishAuthMethod'Other val) = val
          toJSON (ProfileLishAuthMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ProfileLishAuthMethod'EnumPasswordKeys) = "password_keys"
          toJSON (ProfileLishAuthMethod'EnumKeysOnly) = "keys_only"
          toJSON (ProfileLishAuthMethod'EnumDisabled) = "disabled"
instance Data.Aeson.Types.FromJSON.FromJSON ProfileLishAuthMethod'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "password_keys" -> ProfileLishAuthMethod'EnumPasswordKeys
                                            | val GHC.Classes.== "keys_only" -> ProfileLishAuthMethod'EnumKeysOnly
                                            | val GHC.Classes.== "disabled" -> ProfileLishAuthMethod'EnumDisabled
                                            | GHC.Base.otherwise -> ProfileLishAuthMethod'Other val)
-- | Defines the object schema located at @components.schemas.Profile.properties.referrals@ in the specification.
-- 
-- Information about your status in our referral program.
-- 
-- This information becomes accessible after this Profile\'s Account has established at least \$25.00 USD of total payments.
data ProfileReferrals' = ProfileReferrals' {
  -- | code: Your referral code.  If others use this when signing up for Linode, you will receive account credit.
  profileReferrals'Code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | completed: The number of completed signups with your referral code.
  , profileReferrals'Completed :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | credit: The amount of account credit in US Dollars issued to you through the referral program.
  , profileReferrals'Credit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | pending: The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.
  , profileReferrals'Pending :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | total: The number of users who have signed up with your referral code.
  , profileReferrals'Total :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | url: Your referral url, used to direct others to sign up for Linode with your referral code.
  , profileReferrals'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ProfileReferrals'
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= profileReferrals'Code obj : "completed" Data.Aeson.Types.ToJSON..= profileReferrals'Completed obj : "credit" Data.Aeson.Types.ToJSON..= profileReferrals'Credit obj : "pending" Data.Aeson.Types.ToJSON..= profileReferrals'Pending obj : "total" Data.Aeson.Types.ToJSON..= profileReferrals'Total obj : "url" Data.Aeson.Types.ToJSON..= profileReferrals'Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= profileReferrals'Code obj) GHC.Base.<> (("completed" Data.Aeson.Types.ToJSON..= profileReferrals'Completed obj) GHC.Base.<> (("credit" Data.Aeson.Types.ToJSON..= profileReferrals'Credit obj) GHC.Base.<> (("pending" Data.Aeson.Types.ToJSON..= profileReferrals'Pending obj) GHC.Base.<> (("total" Data.Aeson.Types.ToJSON..= profileReferrals'Total obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= profileReferrals'Url obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ProfileReferrals'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ProfileReferrals'" (\obj -> (((((GHC.Base.pure ProfileReferrals' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "completed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'ProfileReferrals'' with all required fields.
mkProfileReferrals' :: ProfileReferrals'
mkProfileReferrals' = ProfileReferrals'{profileReferrals'Code = GHC.Maybe.Nothing,
                                        profileReferrals'Completed = GHC.Maybe.Nothing,
                                        profileReferrals'Credit = GHC.Maybe.Nothing,
                                        profileReferrals'Pending = GHC.Maybe.Nothing,
                                        profileReferrals'Total = GHC.Maybe.Nothing,
                                        profileReferrals'Url = GHC.Maybe.Nothing}
