-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Image
module Linode.Types.Image where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Image@ in the specification.
-- 
-- Image object
data Image = Image {
  -- | created: When this Image was created.
  imageCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | created_by: The name of the User who created this Image, or \"linode\" for public Images.
  , imageCreatedBy :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | deprecated: Whether or not this Image is deprecated. Will only be true for deprecated public Images.
  , imageDeprecated :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | description: A detailed description of this Image.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 65000
  -- * Minimum length of 1
  , imageDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | eol: The date of the public Image\'s planned end of life. \`None\` for private Images.
  , imageEol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expiry: Only Images created automatically from a deleted Linode (type=automatic) will expire.
  , imageExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID of this Image.
  , imageId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | is_public: True if the Image is a public distribution image. False if Image is private Account-specific Image.
  , imageIsPublic :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | label: A short description of the Image.
  , imageLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | size: The minimum size this Image needs to deploy. Size is in MB.
  , imageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | status: The current status of this Image.  Only Images in an \"available\" status
  -- can be deployed.  Images in a \"creating\" status are being created from
  -- a Linode Disk, and will become \"available\" shortly.  Images in a
  -- \"pending_upload\" status are waiting for data to be [uploaded](\/docs\/api\/images\/\#image-upload),
  -- and become \"available\" after the upload and processing are complete.
  , imageStatus :: (GHC.Maybe.Maybe ImageStatus')
  -- | type: How the Image was created.
  -- 
  -- \"Manual\" Images can be created at any time.
  -- 
  -- \"Automatic\" Images are created automatically from a deleted Linode.
  , imageType :: (GHC.Maybe.Maybe ImageType')
  -- | updated: When this Image was last updated.
  , imageUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | vendor: The upstream distribution vendor. \`None\` for private Images.
  , imageVendor :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Image
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= imageCreated obj : "created_by" Data.Aeson.Types.ToJSON..= imageCreatedBy obj : "deprecated" Data.Aeson.Types.ToJSON..= imageDeprecated obj : "description" Data.Aeson.Types.ToJSON..= imageDescription obj : "eol" Data.Aeson.Types.ToJSON..= imageEol obj : "expiry" Data.Aeson.Types.ToJSON..= imageExpiry obj : "id" Data.Aeson.Types.ToJSON..= imageId obj : "is_public" Data.Aeson.Types.ToJSON..= imageIsPublic obj : "label" Data.Aeson.Types.ToJSON..= imageLabel obj : "size" Data.Aeson.Types.ToJSON..= imageSize obj : "status" Data.Aeson.Types.ToJSON..= imageStatus obj : "type" Data.Aeson.Types.ToJSON..= imageType obj : "updated" Data.Aeson.Types.ToJSON..= imageUpdated obj : "vendor" Data.Aeson.Types.ToJSON..= imageVendor obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= imageCreated obj) GHC.Base.<> (("created_by" Data.Aeson.Types.ToJSON..= imageCreatedBy obj) GHC.Base.<> (("deprecated" Data.Aeson.Types.ToJSON..= imageDeprecated obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= imageDescription obj) GHC.Base.<> (("eol" Data.Aeson.Types.ToJSON..= imageEol obj) GHC.Base.<> (("expiry" Data.Aeson.Types.ToJSON..= imageExpiry obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= imageId obj) GHC.Base.<> (("is_public" Data.Aeson.Types.ToJSON..= imageIsPublic obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= imageLabel obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= imageSize obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= imageStatus obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= imageType obj) GHC.Base.<> (("updated" Data.Aeson.Types.ToJSON..= imageUpdated obj) GHC.Base.<> ("vendor" Data.Aeson.Types.ToJSON..= imageVendor obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Image
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Image" (\obj -> (((((((((((((GHC.Base.pure Image GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vendor"))
-- | Create a new 'Image' with all required fields.
mkImage :: Image
mkImage = Image{imageCreated = GHC.Maybe.Nothing,
                imageCreatedBy = GHC.Maybe.Nothing,
                imageDeprecated = GHC.Maybe.Nothing,
                imageDescription = GHC.Maybe.Nothing,
                imageEol = GHC.Maybe.Nothing,
                imageExpiry = GHC.Maybe.Nothing,
                imageId = GHC.Maybe.Nothing,
                imageIsPublic = GHC.Maybe.Nothing,
                imageLabel = GHC.Maybe.Nothing,
                imageSize = GHC.Maybe.Nothing,
                imageStatus = GHC.Maybe.Nothing,
                imageType = GHC.Maybe.Nothing,
                imageUpdated = GHC.Maybe.Nothing,
                imageVendor = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Image.properties.status@ in the specification.
-- 
-- The current status of this Image.  Only Images in an \"available\" status
-- can be deployed.  Images in a \"creating\" status are being created from
-- a Linode Disk, and will become \"available\" shortly.  Images in a
-- \"pending_upload\" status are waiting for data to be [uploaded](\/docs\/api\/images\/\#image-upload),
-- and become \"available\" after the upload and processing are complete.
data ImageStatus' =
   ImageStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ImageStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ImageStatus'EnumCreating -- ^ Represents the JSON value @"creating"@
  | ImageStatus'EnumPendingUpload -- ^ Represents the JSON value @"pending_upload"@
  | ImageStatus'EnumAvailable -- ^ Represents the JSON value @"available"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImageStatus'
    where toJSON (ImageStatus'Other val) = val
          toJSON (ImageStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ImageStatus'EnumCreating) = "creating"
          toJSON (ImageStatus'EnumPendingUpload) = "pending_upload"
          toJSON (ImageStatus'EnumAvailable) = "available"
instance Data.Aeson.Types.FromJSON.FromJSON ImageStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "creating" -> ImageStatus'EnumCreating
                                            | val GHC.Classes.== "pending_upload" -> ImageStatus'EnumPendingUpload
                                            | val GHC.Classes.== "available" -> ImageStatus'EnumAvailable
                                            | GHC.Base.otherwise -> ImageStatus'Other val)
-- | Defines the enum schema located at @components.schemas.Image.properties.type@ in the specification.
-- 
-- How the Image was created.
-- 
-- \"Manual\" Images can be created at any time.
-- 
-- \"Automatic\" Images are created automatically from a deleted Linode.
data ImageType' =
   ImageType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ImageType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ImageType'EnumManual -- ^ Represents the JSON value @"manual"@
  | ImageType'EnumAutomatic -- ^ Represents the JSON value @"automatic"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImageType'
    where toJSON (ImageType'Other val) = val
          toJSON (ImageType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ImageType'EnumManual) = "manual"
          toJSON (ImageType'EnumAutomatic) = "automatic"
instance Data.Aeson.Types.FromJSON.FromJSON ImageType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "manual" -> ImageType'EnumManual
                                            | val GHC.Classes.== "automatic" -> ImageType'EnumAutomatic
                                            | GHC.Base.otherwise -> ImageType'Other val)
