-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Image
module Linode.Types.Image where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Image
-- 
-- Image object
data Image = Image {
  -- | created: When this Image was created.
  imageCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | created_by: The name of the User who created this Image, or \"linode\" for public Images.
  , imageCreated_by :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | deprecated: Whether or not this Image is deprecated. Will only be true for deprecated public Images.
  , imageDeprecated :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | description: A detailed description of this Image.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 65000
  -- * Minimum length of 1
  , imageDescription :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | eol: The date of the public Image\'s planned end of life. \`None\` for private Images.
  , imageEol :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | expiry: Only Images created automatically from a deleted Linode (type=automatic) will expire.
  , imageExpiry :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID of this Image.
  , imageId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | is_public: True if the Image is a public distribution image. False if Image is private Account-specific Image.
  , imageIs_public :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | label: A short description of the Image.
  , imageLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | size: The minimum size this Image needs to deploy. Size is in MB.
  , imageSize :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | status: The current status of this Image.  Only Images in an \"available\" status
  -- can be deployed.  Images in a \"creating\" status are being created from
  -- a Linode Disk, and will become \"available\" shortly.  Images in a
  -- \"pending_upload\" status are waiting for data to be [uploaded](\/docs\/api\/images\/\#image-upload),
  -- and become \"available\" after the upload and processing are complete.
  , imageStatus :: (GHC.Base.Maybe ImageStatus)
  -- | type: How the Image was created.
  -- 
  -- \"Manual\" Images can be created at any time.
  -- 
  -- \"Automatic\" Images are created automatically from a deleted Linode.
  , imageType :: (GHC.Base.Maybe ImageType)
  -- | updated: When this Image was last updated.
  , imageUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | vendor: The upstream distribution vendor. \`None\` for private Images.
  , imageVendor :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Image
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (imageCreated obj) : (Data.Aeson..=) "created_by" (imageCreated_by obj) : (Data.Aeson..=) "deprecated" (imageDeprecated obj) : (Data.Aeson..=) "description" (imageDescription obj) : (Data.Aeson..=) "eol" (imageEol obj) : (Data.Aeson..=) "expiry" (imageExpiry obj) : (Data.Aeson..=) "id" (imageId obj) : (Data.Aeson..=) "is_public" (imageIs_public obj) : (Data.Aeson..=) "label" (imageLabel obj) : (Data.Aeson..=) "size" (imageSize obj) : (Data.Aeson..=) "status" (imageStatus obj) : (Data.Aeson..=) "type" (imageType obj) : (Data.Aeson..=) "updated" (imageUpdated obj) : (Data.Aeson..=) "vendor" (imageVendor obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (imageCreated obj) GHC.Base.<> ((Data.Aeson..=) "created_by" (imageCreated_by obj) GHC.Base.<> ((Data.Aeson..=) "deprecated" (imageDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (imageDescription obj) GHC.Base.<> ((Data.Aeson..=) "eol" (imageEol obj) GHC.Base.<> ((Data.Aeson..=) "expiry" (imageExpiry obj) GHC.Base.<> ((Data.Aeson..=) "id" (imageId obj) GHC.Base.<> ((Data.Aeson..=) "is_public" (imageIs_public obj) GHC.Base.<> ((Data.Aeson..=) "label" (imageLabel obj) GHC.Base.<> ((Data.Aeson..=) "size" (imageSize obj) GHC.Base.<> ((Data.Aeson..=) "status" (imageStatus obj) GHC.Base.<> ((Data.Aeson..=) "type" (imageType obj) GHC.Base.<> ((Data.Aeson..=) "updated" (imageUpdated obj) GHC.Base.<> (Data.Aeson..=) "vendor" (imageVendor obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Image
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Image" (\obj -> (((((((((((((GHC.Base.pure Image GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vendor"))
-- | Defines the enum schema ImageStatus
-- 
-- The current status of this Image.  Only Images in an \"available\" status
-- can be deployed.  Images in a \"creating\" status are being created from
-- a Linode Disk, and will become \"available\" shortly.  Images in a
-- \"pending_upload\" status are waiting for data to be [uploaded](\/docs\/api\/images\/\#image-upload),
-- and become \"available\" after the upload and processing are complete.
data ImageStatus
    = ImageStatusEnumOther Data.Aeson.Types.Internal.Value
    | ImageStatusEnumTyped Data.Text.Internal.Text
    | ImageStatusEnumString_available
    | ImageStatusEnumString_creating
    | ImageStatusEnumString_pending_upload
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ImageStatus
    where toJSON (ImageStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ImageStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ImageStatusEnumString_available) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available"
          toJSON (ImageStatusEnumString_creating) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "creating"
          toJSON (ImageStatusEnumString_pending_upload) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending_upload"
instance Data.Aeson.FromJSON ImageStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available")
                                          then ImageStatusEnumString_available
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "creating")
                                                then ImageStatusEnumString_creating
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending_upload")
                                                      then ImageStatusEnumString_pending_upload
                                                      else ImageStatusEnumOther val)
-- | Defines the enum schema ImageType
-- 
-- How the Image was created.
-- 
-- \"Manual\" Images can be created at any time.
-- 
-- \"Automatic\" Images are created automatically from a deleted Linode.
data ImageType
    = ImageTypeEnumOther Data.Aeson.Types.Internal.Value
    | ImageTypeEnumTyped Data.Text.Internal.Text
    | ImageTypeEnumString_automatic
    | ImageTypeEnumString_manual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ImageType
    where toJSON (ImageTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ImageTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ImageTypeEnumString_automatic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic"
          toJSON (ImageTypeEnumString_manual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual"
instance Data.Aeson.FromJSON ImageType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic")
                                          then ImageTypeEnumString_automatic
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual")
                                                then ImageTypeEnumString_manual
                                                else ImageTypeEnumOther val)