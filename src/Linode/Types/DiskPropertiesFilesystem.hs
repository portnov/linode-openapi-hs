-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema DiskPropertiesFilesystem
module Linode.Types.DiskPropertiesFilesystem where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the enum schema located at @components.schemas.DiskPropertiesFilesystem@ in the specification.
-- 
-- The Disk filesystem can be one of:
-- 
--   * raw - No filesystem, just a raw binary stream.
--   * swap - Linux swap area.
--   * ext3 - The ext3 journaling filesystem for Linux.
--   * ext4 - The ext4 journaling filesystem for Linux.
--   * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
data DiskPropertiesFilesystem =
   DiskPropertiesFilesystemOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DiskPropertiesFilesystemTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DiskPropertiesFilesystemEnumRaw -- ^ Represents the JSON value @"raw"@
  | DiskPropertiesFilesystemEnumSwap -- ^ Represents the JSON value @"swap"@
  | DiskPropertiesFilesystemEnumExt3 -- ^ Represents the JSON value @"ext3"@
  | DiskPropertiesFilesystemEnumExt4 -- ^ Represents the JSON value @"ext4"@
  | DiskPropertiesFilesystemEnumInitrd -- ^ Represents the JSON value @"initrd"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DiskPropertiesFilesystem
    where toJSON (DiskPropertiesFilesystemOther val) = val
          toJSON (DiskPropertiesFilesystemTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DiskPropertiesFilesystemEnumRaw) = "raw"
          toJSON (DiskPropertiesFilesystemEnumSwap) = "swap"
          toJSON (DiskPropertiesFilesystemEnumExt3) = "ext3"
          toJSON (DiskPropertiesFilesystemEnumExt4) = "ext4"
          toJSON (DiskPropertiesFilesystemEnumInitrd) = "initrd"
instance Data.Aeson.Types.FromJSON.FromJSON DiskPropertiesFilesystem
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "raw" -> DiskPropertiesFilesystemEnumRaw
                                            | val GHC.Classes.== "swap" -> DiskPropertiesFilesystemEnumSwap
                                            | val GHC.Classes.== "ext3" -> DiskPropertiesFilesystemEnumExt3
                                            | val GHC.Classes.== "ext4" -> DiskPropertiesFilesystemEnumExt4
                                            | val GHC.Classes.== "initrd" -> DiskPropertiesFilesystemEnumInitrd
                                            | GHC.Base.otherwise -> DiskPropertiesFilesystemOther val)
