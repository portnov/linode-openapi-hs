-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Region
module Linode.Types.Region where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Region
-- 
-- An area where Linode services are available.
data Region = Region {
  -- | capabilities: A list of capabilities of this region.
  regionCapabilities :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | country: The country where this Region resides.
  , regionCountry :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID of this Region.
  , regionId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | resolvers
  , regionResolvers :: (GHC.Base.Maybe RegionResolvers)
  -- | status: This region\'s current operational status.
  , regionStatus :: (GHC.Base.Maybe RegionStatus)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Region
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "capabilities" (regionCapabilities obj) : (Data.Aeson..=) "country" (regionCountry obj) : (Data.Aeson..=) "id" (regionId obj) : (Data.Aeson..=) "resolvers" (regionResolvers obj) : (Data.Aeson..=) "status" (regionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "capabilities" (regionCapabilities obj) GHC.Base.<> ((Data.Aeson..=) "country" (regionCountry obj) GHC.Base.<> ((Data.Aeson..=) "id" (regionId obj) GHC.Base.<> ((Data.Aeson..=) "resolvers" (regionResolvers obj) GHC.Base.<> (Data.Aeson..=) "status" (regionStatus obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON Region
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Region" (\obj -> ((((GHC.Base.pure Region GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "resolvers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema RegionResolvers
-- 
-- 
data RegionResolvers = RegionResolvers {
  -- | ipv4: The IPv4 addresses for this region\'s DNS resolvers, separated by commas.
  regionResolversIpv4 :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ipv6: The IPv6 addresses for this region\'s DNS resolvers, separated by commas.
  , regionResolversIpv6 :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RegionResolvers
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ipv4" (regionResolversIpv4 obj) : (Data.Aeson..=) "ipv6" (regionResolversIpv6 obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ipv4" (regionResolversIpv4 obj) GHC.Base.<> (Data.Aeson..=) "ipv6" (regionResolversIpv6 obj))
instance Data.Aeson.Types.FromJSON.FromJSON RegionResolvers
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RegionResolvers" (\obj -> (GHC.Base.pure RegionResolvers GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv6"))
-- | Defines the enum schema RegionStatus
-- 
-- This region\'s current operational status.
data RegionStatus
    = RegionStatusEnumOther Data.Aeson.Types.Internal.Value
    | RegionStatusEnumTyped Data.Text.Internal.Text
    | RegionStatusEnumString_ok
    | RegionStatusEnumString_outage
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RegionStatus
    where toJSON (RegionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RegionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RegionStatusEnumString_ok) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ok"
          toJSON (RegionStatusEnumString_outage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "outage"
instance Data.Aeson.FromJSON RegionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ok")
                                          then RegionStatusEnumString_ok
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "outage")
                                                then RegionStatusEnumString_outage
                                                else RegionStatusEnumOther val)