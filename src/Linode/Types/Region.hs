-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Region
module Linode.Types.Region where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Region@ in the specification.
-- 
-- An area where Linode services are available.
data Region = Region {
  -- | capabilities: A list of capabilities of this region.
  regionCapabilities :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | country: The country where this Region resides.
  , regionCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID of this Region.
  , regionId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | resolvers
  , regionResolvers :: (GHC.Maybe.Maybe RegionResolvers')
  -- | status: This region\'s current operational status.
  , regionStatus :: (GHC.Maybe.Maybe RegionStatus')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Region
    where toJSON obj = Data.Aeson.Types.Internal.object ("capabilities" Data.Aeson.Types.ToJSON..= regionCapabilities obj : "country" Data.Aeson.Types.ToJSON..= regionCountry obj : "id" Data.Aeson.Types.ToJSON..= regionId obj : "resolvers" Data.Aeson.Types.ToJSON..= regionResolvers obj : "status" Data.Aeson.Types.ToJSON..= regionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("capabilities" Data.Aeson.Types.ToJSON..= regionCapabilities obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= regionCountry obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= regionId obj) GHC.Base.<> (("resolvers" Data.Aeson.Types.ToJSON..= regionResolvers obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= regionStatus obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON Region
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Region" (\obj -> ((((GHC.Base.pure Region GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "resolvers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Create a new 'Region' with all required fields.
mkRegion :: Region
mkRegion = Region{regionCapabilities = GHC.Maybe.Nothing,
                  regionCountry = GHC.Maybe.Nothing,
                  regionId = GHC.Maybe.Nothing,
                  regionResolvers = GHC.Maybe.Nothing,
                  regionStatus = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.Region.properties.resolvers@ in the specification.
-- 
-- 
data RegionResolvers' = RegionResolvers' {
  -- | ipv4: The IPv4 addresses for this region\'s DNS resolvers, separated by commas.
  regionResolvers'Ipv4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ipv6: The IPv6 addresses for this region\'s DNS resolvers, separated by commas.
  , regionResolvers'Ipv6 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RegionResolvers'
    where toJSON obj = Data.Aeson.Types.Internal.object ("ipv4" Data.Aeson.Types.ToJSON..= regionResolvers'Ipv4 obj : "ipv6" Data.Aeson.Types.ToJSON..= regionResolvers'Ipv6 obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ipv4" Data.Aeson.Types.ToJSON..= regionResolvers'Ipv4 obj) GHC.Base.<> ("ipv6" Data.Aeson.Types.ToJSON..= regionResolvers'Ipv6 obj))
instance Data.Aeson.Types.FromJSON.FromJSON RegionResolvers'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RegionResolvers'" (\obj -> (GHC.Base.pure RegionResolvers' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv6"))
-- | Create a new 'RegionResolvers'' with all required fields.
mkRegionResolvers' :: RegionResolvers'
mkRegionResolvers' = RegionResolvers'{regionResolvers'Ipv4 = GHC.Maybe.Nothing,
                                      regionResolvers'Ipv6 = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Region.properties.status@ in the specification.
-- 
-- This region\'s current operational status.
data RegionStatus' =
   RegionStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RegionStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RegionStatus'EnumOk -- ^ Represents the JSON value @"ok"@
  | RegionStatus'EnumOutage -- ^ Represents the JSON value @"outage"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RegionStatus'
    where toJSON (RegionStatus'Other val) = val
          toJSON (RegionStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RegionStatus'EnumOk) = "ok"
          toJSON (RegionStatus'EnumOutage) = "outage"
instance Data.Aeson.Types.FromJSON.FromJSON RegionStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ok" -> RegionStatus'EnumOk
                                            | val GHC.Classes.== "outage" -> RegionStatus'EnumOutage
                                            | GHC.Base.otherwise -> RegionStatus'Other val)
