-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ManagedLinodeSettings
module Linode.Types.ManagedLinodeSettings where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.ManagedLinodeSettings@ in the specification.
-- 
-- Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.
data ManagedLinodeSettings = ManagedLinodeSettings {
  -- | group: The group of the Linode these Settings are for. This is for display purposes only.
  managedLinodeSettingsGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The ID of the Linode these Settings are for.
  , managedLinodeSettingsId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The label of the Linode these Settings are for.
  , managedLinodeSettingsLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssh: The SSH settings for this Linode.
  , managedLinodeSettingsSsh :: (GHC.Maybe.Maybe ManagedLinodeSettingsSsh')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ManagedLinodeSettings
    where toJSON obj = Data.Aeson.Types.Internal.object ("group" Data.Aeson.Types.ToJSON..= managedLinodeSettingsGroup obj : "id" Data.Aeson.Types.ToJSON..= managedLinodeSettingsId obj : "label" Data.Aeson.Types.ToJSON..= managedLinodeSettingsLabel obj : "ssh" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("group" Data.Aeson.Types.ToJSON..= managedLinodeSettingsGroup obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= managedLinodeSettingsId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= managedLinodeSettingsLabel obj) GHC.Base.<> ("ssh" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedLinodeSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedLinodeSettings" (\obj -> (((GHC.Base.pure ManagedLinodeSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssh"))
-- | Create a new 'ManagedLinodeSettings' with all required fields.
mkManagedLinodeSettings :: ManagedLinodeSettings
mkManagedLinodeSettings = ManagedLinodeSettings{managedLinodeSettingsGroup = GHC.Maybe.Nothing,
                                                managedLinodeSettingsId = GHC.Maybe.Nothing,
                                                managedLinodeSettingsLabel = GHC.Maybe.Nothing,
                                                managedLinodeSettingsSsh = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.ManagedLinodeSettings.properties.ssh@ in the specification.
-- 
-- The SSH settings for this Linode.
data ManagedLinodeSettingsSsh' = ManagedLinodeSettingsSsh' {
  -- | access: If true, Linode special forces may access this Linode over ssh to respond to Issues.
  managedLinodeSettingsSsh'Access :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | ip: The IP Linode special forces should use to access this Linode when responding to an Issue.
  , managedLinodeSettingsSsh'Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | port: The port Linode special forces should use to access this Linode over ssh to respond to an Issue.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 1.0
  , managedLinodeSettingsSsh'Port :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | user: The user Linode\'s special forces should use when accessing this Linode to respond to an issue.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 0
  , managedLinodeSettingsSsh'User :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ManagedLinodeSettingsSsh'
    where toJSON obj = Data.Aeson.Types.Internal.object ("access" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'Access obj : "ip" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'Ip obj : "port" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'Port obj : "user" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'User obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("access" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'Access obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'Ip obj) GHC.Base.<> (("port" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'Port obj) GHC.Base.<> ("user" Data.Aeson.Types.ToJSON..= managedLinodeSettingsSsh'User obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedLinodeSettingsSsh'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedLinodeSettingsSsh'" (\obj -> (((GHC.Base.pure ManagedLinodeSettingsSsh' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "access")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user"))
-- | Create a new 'ManagedLinodeSettingsSsh'' with all required fields.
mkManagedLinodeSettingsSsh' :: ManagedLinodeSettingsSsh'
mkManagedLinodeSettingsSsh' = ManagedLinodeSettingsSsh'{managedLinodeSettingsSsh'Access = GHC.Maybe.Nothing,
                                                        managedLinodeSettingsSsh'Ip = GHC.Maybe.Nothing,
                                                        managedLinodeSettingsSsh'Port = GHC.Maybe.Nothing,
                                                        managedLinodeSettingsSsh'User = GHC.Maybe.Nothing}
