-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PaymentMethod
module Linode.Types.PaymentMethod where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias
import {-# SOURCE #-} Linode.Types.CreditCardData
import {-# SOURCE #-} Linode.Types.GooglePayData
import {-# SOURCE #-} Linode.Types.PayPalData

-- | Defines the object schema located at @components.schemas.PaymentMethod@ in the specification.
-- 
-- Payment Method Response Object.
data PaymentMethod = PaymentMethod {
  -- | created: When the Payment Method was added to the Account.
  paymentMethodCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | data
  , paymentMethodData :: (GHC.Maybe.Maybe PaymentMethodData'Variants)
  -- | id: The unique ID of this Payment Method.
  , paymentMethodId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | is_default: Whether this Payment Method is the default method for automatically processing service charges.
  , paymentMethodIsDefault :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | type: The type of Payment Method.
  , paymentMethodType :: (GHC.Maybe.Maybe PaymentMethodType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethod
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= paymentMethodCreated obj : "data" Data.Aeson.Types.ToJSON..= paymentMethodData obj : "id" Data.Aeson.Types.ToJSON..= paymentMethodId obj : "is_default" Data.Aeson.Types.ToJSON..= paymentMethodIsDefault obj : "type" Data.Aeson.Types.ToJSON..= paymentMethodType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= paymentMethodCreated obj) GHC.Base.<> (("data" Data.Aeson.Types.ToJSON..= paymentMethodData obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= paymentMethodId obj) GHC.Base.<> (("is_default" Data.Aeson.Types.ToJSON..= paymentMethodIsDefault obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= paymentMethodType obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethod
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethod" (\obj -> ((((GHC.Base.pure PaymentMethod GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Create a new 'PaymentMethod' with all required fields.
mkPaymentMethod :: PaymentMethod
mkPaymentMethod = PaymentMethod{paymentMethodCreated = GHC.Maybe.Nothing,
                                paymentMethodData = GHC.Maybe.Nothing,
                                paymentMethodId = GHC.Maybe.Nothing,
                                paymentMethodIsDefault = GHC.Maybe.Nothing,
                                paymentMethodType = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.PaymentMethod.properties.data.oneOf@ in the specification.
-- 
-- 
data PaymentMethodData'Variants =
   PaymentMethodData'CreditCardData CreditCardData
  | PaymentMethodData'GooglePayData GooglePayData
  | PaymentMethodData'PayPalData PayPalData
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodData'Variants
    where toJSON (PaymentMethodData'CreditCardData a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PaymentMethodData'GooglePayData a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PaymentMethodData'PayPalData a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodData'Variants
    where parseJSON val = case (PaymentMethodData'CreditCardData Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodData'GooglePayData Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodData'PayPalData Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @components.schemas.PaymentMethod.properties.type@ in the specification.
-- 
-- The type of Payment Method.
data PaymentMethodType' =
   PaymentMethodType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PaymentMethodType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PaymentMethodType'EnumCreditCard -- ^ Represents the JSON value @"credit_card"@
  | PaymentMethodType'EnumGooglePay -- ^ Represents the JSON value @"google_pay"@
  | PaymentMethodType'EnumPaypal -- ^ Represents the JSON value @"paypal"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodType'
    where toJSON (PaymentMethodType'Other val) = val
          toJSON (PaymentMethodType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PaymentMethodType'EnumCreditCard) = "credit_card"
          toJSON (PaymentMethodType'EnumGooglePay) = "google_pay"
          toJSON (PaymentMethodType'EnumPaypal) = "paypal"
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "credit_card" -> PaymentMethodType'EnumCreditCard
                                            | val GHC.Classes.== "google_pay" -> PaymentMethodType'EnumGooglePay
                                            | val GHC.Classes.== "paypal" -> PaymentMethodType'EnumPaypal
                                            | GHC.Base.otherwise -> PaymentMethodType'Other val)
