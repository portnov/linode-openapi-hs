-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema PaymentMethod
module Linode.Types.PaymentMethod where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.CreditCardData
import Linode.Types.GooglePayData
import Linode.Types.PayPalData

-- | Defines the data type for the schema PaymentMethod
-- 
-- Payment Method Response Object.
data PaymentMethod = PaymentMethod {
  -- | created: When the Payment Method was added to the Account.
  paymentMethodCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | data
  , paymentMethodData :: (GHC.Base.Maybe PaymentMethodDataVariants)
  -- | id: The unique ID of this Payment Method.
  , paymentMethodId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | is_default: Whether this Payment Method is the default method for automatically processing service charges.
  , paymentMethodIs_default :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | type: The type of Payment Method.
  , paymentMethodType :: (GHC.Base.Maybe PaymentMethodType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethod
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (paymentMethodCreated obj) : (Data.Aeson..=) "data" (paymentMethodData obj) : (Data.Aeson..=) "id" (paymentMethodId obj) : (Data.Aeson..=) "is_default" (paymentMethodIs_default obj) : (Data.Aeson..=) "type" (paymentMethodType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (paymentMethodCreated obj) GHC.Base.<> ((Data.Aeson..=) "data" (paymentMethodData obj) GHC.Base.<> ((Data.Aeson..=) "id" (paymentMethodId obj) GHC.Base.<> ((Data.Aeson..=) "is_default" (paymentMethodIs_default obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentMethodType obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethod
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethod" (\obj -> ((((GHC.Base.pure PaymentMethod GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Define the one-of schema PaymentMethodData
-- 
-- 
data PaymentMethodDataVariants
    = PaymentMethodDataCreditCardData CreditCardData
    | PaymentMethodDataGooglePayData GooglePayData
    | PaymentMethodDataPayPalData PayPalData
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentMethodDataVariants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentMethodDataVariants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
-- | Defines the enum schema PaymentMethodType
-- 
-- The type of Payment Method.
data PaymentMethodType
    = PaymentMethodTypeEnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodTypeEnumTyped Data.Text.Internal.Text
    | PaymentMethodTypeEnumString_credit_card
    | PaymentMethodTypeEnumString_google_pay
    | PaymentMethodTypeEnumString_paypal
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodType
    where toJSON (PaymentMethodTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodTypeEnumString_credit_card) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_card"
          toJSON (PaymentMethodTypeEnumString_google_pay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay"
          toJSON (PaymentMethodTypeEnumString_paypal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paypal"
instance Data.Aeson.FromJSON PaymentMethodType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_card")
                                          then PaymentMethodTypeEnumString_credit_card
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay")
                                                then PaymentMethodTypeEnumString_google_pay
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paypal")
                                                      then PaymentMethodTypeEnumString_paypal
                                                      else PaymentMethodTypeEnumOther val)