-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LongviewPlan
module Linode.Types.LongviewPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LongviewPlan@ in the specification.
-- 
-- Longview Plan object.
data LongviewPlan = LongviewPlan {
  -- | longview_subscription: The subscription ID for a particular Longview plan. A value of \`null\` corresponds to Longview Free.
  -- 
  -- You can send a request to the [List Longview Subscriptions](\/docs\/api\/longview\/\#longview-subscriptions-list) endpoint to receive the details of each plan.
  longviewPlanLongviewSubscription :: (GHC.Maybe.Maybe LongviewPlanLongviewSubscription')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewPlan
    where toJSON obj = Data.Aeson.Types.Internal.object ("longview_subscription" Data.Aeson.Types.ToJSON..= longviewPlanLongviewSubscription obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("longview_subscription" Data.Aeson.Types.ToJSON..= longviewPlanLongviewSubscription obj)
instance Data.Aeson.Types.FromJSON.FromJSON LongviewPlan
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewPlan" (\obj -> GHC.Base.pure LongviewPlan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longview_subscription"))
-- | Create a new 'LongviewPlan' with all required fields.
mkLongviewPlan :: LongviewPlan
mkLongviewPlan = LongviewPlan{longviewPlanLongviewSubscription = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.LongviewPlan.properties.longview_subscription@ in the specification.
-- 
-- The subscription ID for a particular Longview plan. A value of \`null\` corresponds to Longview Free.
-- 
-- You can send a request to the [List Longview Subscriptions](\/docs\/api\/longview\/\#longview-subscriptions-list) endpoint to receive the details of each plan.
data LongviewPlanLongviewSubscription' =
   LongviewPlanLongviewSubscription'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LongviewPlanLongviewSubscription'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LongviewPlanLongviewSubscription'EnumLongview_3 -- ^ Represents the JSON value @"longview-3"@
  | LongviewPlanLongviewSubscription'EnumLongview_10 -- ^ Represents the JSON value @"longview-10"@
  | LongviewPlanLongviewSubscription'EnumLongview_40 -- ^ Represents the JSON value @"longview-40"@
  | LongviewPlanLongviewSubscription'EnumLongview_100 -- ^ Represents the JSON value @"longview-100"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewPlanLongviewSubscription'
    where toJSON (LongviewPlanLongviewSubscription'Other val) = val
          toJSON (LongviewPlanLongviewSubscription'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LongviewPlanLongviewSubscription'EnumLongview_3) = "longview-3"
          toJSON (LongviewPlanLongviewSubscription'EnumLongview_10) = "longview-10"
          toJSON (LongviewPlanLongviewSubscription'EnumLongview_40) = "longview-40"
          toJSON (LongviewPlanLongviewSubscription'EnumLongview_100) = "longview-100"
instance Data.Aeson.Types.FromJSON.FromJSON LongviewPlanLongviewSubscription'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "longview-3" -> LongviewPlanLongviewSubscription'EnumLongview_3
                                            | val GHC.Classes.== "longview-10" -> LongviewPlanLongviewSubscription'EnumLongview_10
                                            | val GHC.Classes.== "longview-40" -> LongviewPlanLongviewSubscription'EnumLongview_40
                                            | val GHC.Classes.== "longview-100" -> LongviewPlanLongviewSubscription'EnumLongview_100
                                            | GHC.Base.otherwise -> LongviewPlanLongviewSubscription'Other val)
