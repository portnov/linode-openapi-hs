-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LongviewPlan
module Linode.Types.LongviewPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema LongviewPlan
-- 
-- Longview Plan object.
data LongviewPlan = LongviewPlan {
  -- | longview_subscription: The subscription ID for a particular Longview plan. A value of \`null\` corresponds to Longview Free.
  -- 
  -- You can send a request to the [List Longview Subscriptions](\/docs\/api\/longview\/\#longview-subscriptions-list) endpoint to receive the details of each plan.
  longviewPlanLongview_subscription :: (GHC.Base.Maybe LongviewPlanLongview_subscription)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LongviewPlan
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "longview_subscription" (longviewPlanLongview_subscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "longview_subscription" (longviewPlanLongview_subscription obj))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewPlan
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewPlan" (\obj -> GHC.Base.pure LongviewPlan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longview_subscription"))
-- | Defines the enum schema LongviewPlanLongview_subscription
-- 
-- The subscription ID for a particular Longview plan. A value of \`null\` corresponds to Longview Free.
-- 
-- You can send a request to the [List Longview Subscriptions](\/docs\/api\/longview\/\#longview-subscriptions-list) endpoint to receive the details of each plan.
data LongviewPlanLongview_subscription
    = LongviewPlanLongview_subscriptionEnumOther Data.Aeson.Types.Internal.Value
    | LongviewPlanLongview_subscriptionEnumTyped Data.Text.Internal.Text
    | LongviewPlanLongview_subscriptionEnumString_longview_10
    | LongviewPlanLongview_subscriptionEnumString_longview_100
    | LongviewPlanLongview_subscriptionEnumString_longview_3
    | LongviewPlanLongview_subscriptionEnumString_longview_40
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LongviewPlanLongview_subscription
    where toJSON (LongviewPlanLongview_subscriptionEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LongviewPlanLongview_subscriptionEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LongviewPlanLongview_subscriptionEnumString_longview_10) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-10"
          toJSON (LongviewPlanLongview_subscriptionEnumString_longview_100) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-100"
          toJSON (LongviewPlanLongview_subscriptionEnumString_longview_3) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-3"
          toJSON (LongviewPlanLongview_subscriptionEnumString_longview_40) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-40"
instance Data.Aeson.FromJSON LongviewPlanLongview_subscription
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-10")
                                          then LongviewPlanLongview_subscriptionEnumString_longview_10
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-100")
                                                then LongviewPlanLongview_subscriptionEnumString_longview_100
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-3")
                                                      then LongviewPlanLongview_subscriptionEnumString_longview_3
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-40")
                                                            then LongviewPlanLongview_subscriptionEnumString_longview_40
                                                            else LongviewPlanLongview_subscriptionEnumOther val)