-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema NodeBalancerStats
module Linode.Types.NodeBalancerStats where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema NodeBalancerStats
-- 
-- Stats for this NodeBalancer.
data NodeBalancerStats = NodeBalancerStats {
  -- | data: The data returned about this NodeBalancers.
  nodeBalancerStatsData :: (GHC.Base.Maybe NodeBalancerStatsData)
  -- | title: The title for the statistics generated in this response.
  , nodeBalancerStatsTitle :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerStats
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (nodeBalancerStatsData obj) : (Data.Aeson..=) "title" (nodeBalancerStatsTitle obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (nodeBalancerStatsData obj) GHC.Base.<> (Data.Aeson..=) "title" (nodeBalancerStatsTitle obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerStats
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerStats" (\obj -> (GHC.Base.pure NodeBalancerStats GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title"))
-- | Defines the data type for the schema NodeBalancerStatsData
-- 
-- The data returned about this NodeBalancers.
data NodeBalancerStatsData = NodeBalancerStatsData {
  -- | connections: An array of key\/value pairs representing unix timestamp and reading for connections to this NodeBalancer.
  nodeBalancerStatsDataConnections :: (GHC.Base.Maybe ([] GHC.Types.Double))
  -- | traffic: Traffic statistics for this NodeBalancer.
  , nodeBalancerStatsDataTraffic :: (GHC.Base.Maybe NodeBalancerStatsDataTraffic)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerStatsData
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "connections" (nodeBalancerStatsDataConnections obj) : (Data.Aeson..=) "traffic" (nodeBalancerStatsDataTraffic obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "connections" (nodeBalancerStatsDataConnections obj) GHC.Base.<> (Data.Aeson..=) "traffic" (nodeBalancerStatsDataTraffic obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerStatsData
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerStatsData" (\obj -> (GHC.Base.pure NodeBalancerStatsData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "traffic"))
-- | Defines the data type for the schema NodeBalancerStatsDataTraffic
-- 
-- Traffic statistics for this NodeBalancer.
data NodeBalancerStatsDataTraffic = NodeBalancerStatsDataTraffic {
  -- | in: An array of key\/value pairs representing unix timestamp and reading for inbound traffic.
  nodeBalancerStatsDataTrafficIn :: (GHC.Base.Maybe ([] GHC.Types.Double))
  -- | out: An array of key\/value pairs representing unix timestamp and reading for outbound traffic.
  , nodeBalancerStatsDataTrafficOut :: (GHC.Base.Maybe ([] GHC.Types.Double))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerStatsDataTraffic
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "in" (nodeBalancerStatsDataTrafficIn obj) : (Data.Aeson..=) "out" (nodeBalancerStatsDataTrafficOut obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "in" (nodeBalancerStatsDataTrafficIn obj) GHC.Base.<> (Data.Aeson..=) "out" (nodeBalancerStatsDataTrafficOut obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerStatsDataTraffic
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerStatsDataTraffic" (\obj -> (GHC.Base.pure NodeBalancerStatsDataTraffic GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out"))