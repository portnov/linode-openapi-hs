-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema NodeBalancerStats
module Linode.Types.NodeBalancerStats where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.NodeBalancerStats@ in the specification.
-- 
-- Stats for this NodeBalancer.
data NodeBalancerStats = NodeBalancerStats {
  -- | data: The data returned about this NodeBalancers.
  nodeBalancerStatsData :: (GHC.Maybe.Maybe NodeBalancerStatsData')
  -- | title: The title for the statistics generated in this response.
  , nodeBalancerStatsTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerStats
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData obj : "title" Data.Aeson.Types.ToJSON..= nodeBalancerStatsTitle obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData obj) GHC.Base.<> ("title" Data.Aeson.Types.ToJSON..= nodeBalancerStatsTitle obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerStats
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerStats" (\obj -> (GHC.Base.pure NodeBalancerStats GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title"))
-- | Create a new 'NodeBalancerStats' with all required fields.
mkNodeBalancerStats :: NodeBalancerStats
mkNodeBalancerStats = NodeBalancerStats{nodeBalancerStatsData = GHC.Maybe.Nothing,
                                        nodeBalancerStatsTitle = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.NodeBalancerStats.properties.data@ in the specification.
-- 
-- The data returned about this NodeBalancers.
data NodeBalancerStatsData' = NodeBalancerStatsData' {
  -- | connections: An array of key\/value pairs representing unix timestamp and reading for connections to this NodeBalancer.
  nodeBalancerStatsData'Connections :: (GHC.Maybe.Maybe ([GHC.Types.Double]))
  -- | traffic: Traffic statistics for this NodeBalancer.
  , nodeBalancerStatsData'Traffic :: (GHC.Maybe.Maybe NodeBalancerStatsData'Traffic')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerStatsData'
    where toJSON obj = Data.Aeson.Types.Internal.object ("connections" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Connections obj : "traffic" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Traffic obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("connections" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Connections obj) GHC.Base.<> ("traffic" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Traffic obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerStatsData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerStatsData'" (\obj -> (GHC.Base.pure NodeBalancerStatsData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "traffic"))
-- | Create a new 'NodeBalancerStatsData'' with all required fields.
mkNodeBalancerStatsData' :: NodeBalancerStatsData'
mkNodeBalancerStatsData' = NodeBalancerStatsData'{nodeBalancerStatsData'Connections = GHC.Maybe.Nothing,
                                                  nodeBalancerStatsData'Traffic = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.NodeBalancerStats.properties.data.properties.traffic@ in the specification.
-- 
-- Traffic statistics for this NodeBalancer.
data NodeBalancerStatsData'Traffic' = NodeBalancerStatsData'Traffic' {
  -- | in: An array of key\/value pairs representing unix timestamp and reading for inbound traffic.
  nodeBalancerStatsData'Traffic'In :: (GHC.Maybe.Maybe ([GHC.Types.Double]))
  -- | out: An array of key\/value pairs representing unix timestamp and reading for outbound traffic.
  , nodeBalancerStatsData'Traffic'Out :: (GHC.Maybe.Maybe ([GHC.Types.Double]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerStatsData'Traffic'
    where toJSON obj = Data.Aeson.Types.Internal.object ("in" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Traffic'In obj : "out" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Traffic'Out obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("in" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Traffic'In obj) GHC.Base.<> ("out" Data.Aeson.Types.ToJSON..= nodeBalancerStatsData'Traffic'Out obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerStatsData'Traffic'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerStatsData'Traffic'" (\obj -> (GHC.Base.pure NodeBalancerStatsData'Traffic' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out"))
-- | Create a new 'NodeBalancerStatsData'Traffic'' with all required fields.
mkNodeBalancerStatsData'Traffic' :: NodeBalancerStatsData'Traffic'
mkNodeBalancerStatsData'Traffic' = NodeBalancerStatsData'Traffic'{nodeBalancerStatsData'Traffic'In = GHC.Maybe.Nothing,
                                                                  nodeBalancerStatsData'Traffic'Out = GHC.Maybe.Nothing}
