-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema DiskRequest
module Linode.Types.DiskRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias
import {-# SOURCE #-} Linode.Types.DiskPropertiesFilesystem

-- | Defines the object schema located at @components.schemas.DiskRequest@ in the specification.
-- 
-- Disk object request.
data DiskRequest = DiskRequest {
  -- | authorized_keys: A list of public SSH keys that will be automatically appended
  -- to the root user\'s \`~\/.ssh\/authorized_keys\` file when deploying from an Image.
  diskRequestAuthorizedKeys :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | authorized_users: A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users \`~\/.ssh\/authorized_keys\` file automatically when deploying from an Image.
  , diskRequestAuthorizedUsers :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | filesystem: The Disk filesystem can be one of:
  -- 
  --   * raw - No filesystem, just a raw binary stream.
  --   * swap - Linux swap area.
  --   * ext3 - The ext3 journaling filesystem for Linux.
  --   * ext4 - The ext4 journaling filesystem for Linux.
  --   * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
  , diskRequestFilesystem :: (GHC.Maybe.Maybe DiskPropertiesFilesystem)
  -- | image: An Image ID to deploy the Linode Disk from.
  -- 
  -- Access the Images List ([GET \/images](\/docs\/api\/images\/\#images-list)) endpoint with authentication to view
  -- all available Images. Official Linode Images start with \`linode\/\`, while your Account\'s Images start with \`private\/\`. Creating
  -- a disk from a Private Image requires \`read_only\` or \`read_write\` permissions for that Image. Access the User\'s
  -- Grant Update ([PUT \/account\/users\/{username}\/grants](\/docs\/api\/account\/\#users-grants-update)) endpoint to
  -- adjust permissions for an Account Image.
  , diskRequestImage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | label: The Disk\'s label is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 48
  -- * Minimum length of 1
  , diskRequestLabel :: (GHC.Maybe.Maybe DiskPropertiesLabel)
  -- | root_pass: This sets the root user\'s password on a newly-created Linode Disk when deploying from an Image.
  -- 
  -- * **Required** when creating a Linode Disk from an Image, including when using a StackScript.
  -- 
  -- * Must meet a password strength score requirement that is calculated internally by the API.
  -- If the strength requirement is not met, you will receive a \`Password does not meet strength requirement\` error.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 128
  -- * Minimum length of 7
  , diskRequestRootPass :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | size: The size of the Disk in MB.
  -- 
  -- Images require a minimum size. Access the Image View ([GET \/images\/{imageID}](\/docs\/api\/images\/\#image-view)) endpoint to view its size.
  , diskRequestSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | stackscript_data: This field is required only if the StackScript being deployed requires input
  -- data from the User for successful completion. See
  -- [User Defined Fields (UDFs)](\/docs\/guides\/writing-scripts-for-use-with-linode-stackscripts-a-tutorial\/\#user-defined-fields-udfs)
  -- for more details. This field is required to be valid JSON.
  , diskRequestStackscriptData :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | stackscript_id: A StackScript ID that will cause the referenced StackScript to be run during
  -- deployment of this Linode. A compatible \`image\` is required to use a
  -- StackScript. To get a list of available StackScript and their permitted Images
  -- see [\/stackscripts](\/docs\/api\/stackscripts\/\#stackscripts-list).
  -- This field cannot be used when deploying from a Backup or a Private Image.
  , diskRequestStackscriptId :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DiskRequest
    where toJSON obj = Data.Aeson.Types.Internal.object ("authorized_keys" Data.Aeson.Types.ToJSON..= diskRequestAuthorizedKeys obj : "authorized_users" Data.Aeson.Types.ToJSON..= diskRequestAuthorizedUsers obj : "filesystem" Data.Aeson.Types.ToJSON..= diskRequestFilesystem obj : "image" Data.Aeson.Types.ToJSON..= diskRequestImage obj : "label" Data.Aeson.Types.ToJSON..= diskRequestLabel obj : "root_pass" Data.Aeson.Types.ToJSON..= diskRequestRootPass obj : "size" Data.Aeson.Types.ToJSON..= diskRequestSize obj : "stackscript_data" Data.Aeson.Types.ToJSON..= diskRequestStackscriptData obj : "stackscript_id" Data.Aeson.Types.ToJSON..= diskRequestStackscriptId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("authorized_keys" Data.Aeson.Types.ToJSON..= diskRequestAuthorizedKeys obj) GHC.Base.<> (("authorized_users" Data.Aeson.Types.ToJSON..= diskRequestAuthorizedUsers obj) GHC.Base.<> (("filesystem" Data.Aeson.Types.ToJSON..= diskRequestFilesystem obj) GHC.Base.<> (("image" Data.Aeson.Types.ToJSON..= diskRequestImage obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= diskRequestLabel obj) GHC.Base.<> (("root_pass" Data.Aeson.Types.ToJSON..= diskRequestRootPass obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= diskRequestSize obj) GHC.Base.<> (("stackscript_data" Data.Aeson.Types.ToJSON..= diskRequestStackscriptData obj) GHC.Base.<> ("stackscript_id" Data.Aeson.Types.ToJSON..= diskRequestStackscriptId obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON DiskRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DiskRequest" (\obj -> ((((((((GHC.Base.pure DiskRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filesystem")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_pass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_id"))
-- | Create a new 'DiskRequest' with all required fields.
mkDiskRequest :: DiskRequest
mkDiskRequest = DiskRequest{diskRequestAuthorizedKeys = GHC.Maybe.Nothing,
                            diskRequestAuthorizedUsers = GHC.Maybe.Nothing,
                            diskRequestFilesystem = GHC.Maybe.Nothing,
                            diskRequestImage = GHC.Maybe.Nothing,
                            diskRequestLabel = GHC.Maybe.Nothing,
                            diskRequestRootPass = GHC.Maybe.Nothing,
                            diskRequestSize = GHC.Maybe.Nothing,
                            diskRequestStackscriptData = GHC.Maybe.Nothing,
                            diskRequestStackscriptId = GHC.Maybe.Nothing}
