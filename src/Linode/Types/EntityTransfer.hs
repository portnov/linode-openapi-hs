-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema EntityTransfer
module Linode.Types.EntityTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema EntityTransfer
-- 
-- An object representing an Entity Transfer.
data EntityTransfer = EntityTransfer {
  -- | created: When this transfer was created.
  entityTransferCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | entities: A collection of the entities to include in this transfer request, separated by type.
  , entityTransferEntities :: (GHC.Base.Maybe EntityTransferEntities)
  -- | expiry: When this transfer expires. Transfers will automatically expire 24 hours after creation.
  , entityTransferExpiry :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | is_sender: If the requesting account created this transfer.
  , entityTransferIs_sender :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | status: The status of the transfer request.
  -- 
  -- \`accepted\`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.
  -- 
  -- \`cancelled\`: The transfer has been cancelled by the sender.
  -- 
  -- \`completed\`: The transfer has completed successfully.
  -- 
  -- \`failed\`: The transfer has failed after initiation.
  -- 
  -- \`pending\`: The transfer is ready to be accepted.
  -- 
  -- \`stale\`: The transfer has exceeded its expiration date. It can no longer be accepted or cancelled.
  , entityTransferStatus :: (GHC.Base.Maybe EntityTransferStatus)
  -- | token: The token used to identify and accept or cancel this transfer.
  , entityTransferToken :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | updated: When this transfer was last updated.
  , entityTransferUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON EntityTransfer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (entityTransferCreated obj) : (Data.Aeson..=) "entities" (entityTransferEntities obj) : (Data.Aeson..=) "expiry" (entityTransferExpiry obj) : (Data.Aeson..=) "is_sender" (entityTransferIs_sender obj) : (Data.Aeson..=) "status" (entityTransferStatus obj) : (Data.Aeson..=) "token" (entityTransferToken obj) : (Data.Aeson..=) "updated" (entityTransferUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (entityTransferCreated obj) GHC.Base.<> ((Data.Aeson..=) "entities" (entityTransferEntities obj) GHC.Base.<> ((Data.Aeson..=) "expiry" (entityTransferExpiry obj) GHC.Base.<> ((Data.Aeson..=) "is_sender" (entityTransferIs_sender obj) GHC.Base.<> ((Data.Aeson..=) "status" (entityTransferStatus obj) GHC.Base.<> ((Data.Aeson..=) "token" (entityTransferToken obj) GHC.Base.<> (Data.Aeson..=) "updated" (entityTransferUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON EntityTransfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EntityTransfer" (\obj -> ((((((GHC.Base.pure EntityTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_sender")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema EntityTransferEntities
-- 
-- A collection of the entities to include in this transfer request, separated by type.
data EntityTransferEntities = EntityTransferEntities {
  -- | linodes: An array containing the IDs of each of the Linodes included in this transfer.
  entityTransferEntitiesLinodes :: (GHC.Base.Maybe ([] GHC.Integer.Type.Integer))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON EntityTransferEntities
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "linodes" (entityTransferEntitiesLinodes obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "linodes" (entityTransferEntitiesLinodes obj))
instance Data.Aeson.Types.FromJSON.FromJSON EntityTransferEntities
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EntityTransferEntities" (\obj -> GHC.Base.pure EntityTransferEntities GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linodes"))
-- | Defines the enum schema EntityTransferStatus
-- 
-- The status of the transfer request.
-- 
-- \`accepted\`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.
-- 
-- \`cancelled\`: The transfer has been cancelled by the sender.
-- 
-- \`completed\`: The transfer has completed successfully.
-- 
-- \`failed\`: The transfer has failed after initiation.
-- 
-- \`pending\`: The transfer is ready to be accepted.
-- 
-- \`stale\`: The transfer has exceeded its expiration date. It can no longer be accepted or cancelled.
data EntityTransferStatus
    = EntityTransferStatusEnumOther Data.Aeson.Types.Internal.Value
    | EntityTransferStatusEnumTyped Data.Text.Internal.Text
    | EntityTransferStatusEnumString_accepted
    | EntityTransferStatusEnumString_cancelled
    | EntityTransferStatusEnumString_completed
    | EntityTransferStatusEnumString_failed
    | EntityTransferStatusEnumString_pending
    | EntityTransferStatusEnumString_stale
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON EntityTransferStatus
    where toJSON (EntityTransferStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EntityTransferStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EntityTransferStatusEnumString_accepted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accepted"
          toJSON (EntityTransferStatusEnumString_cancelled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cancelled"
          toJSON (EntityTransferStatusEnumString_completed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed"
          toJSON (EntityTransferStatusEnumString_failed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (EntityTransferStatusEnumString_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (EntityTransferStatusEnumString_stale) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stale"
instance Data.Aeson.FromJSON EntityTransferStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accepted")
                                          then EntityTransferStatusEnumString_accepted
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cancelled")
                                                then EntityTransferStatusEnumString_cancelled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed")
                                                      then EntityTransferStatusEnumString_completed
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                                            then EntityTransferStatusEnumString_failed
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                                  then EntityTransferStatusEnumString_pending
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stale")
                                                                        then EntityTransferStatusEnumString_stale
                                                                        else EntityTransferStatusEnumOther val)