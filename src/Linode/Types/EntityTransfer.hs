-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema EntityTransfer
module Linode.Types.EntityTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.EntityTransfer@ in the specification.
-- 
-- An object representing an Entity Transfer.
data EntityTransfer = EntityTransfer {
  -- | created: When this transfer was created.
  entityTransferCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | entities: A collection of the entities to include in this transfer request, separated by type.
  , entityTransferEntities :: (GHC.Maybe.Maybe EntityTransferEntities')
  -- | expiry: When this transfer expires. Transfers will automatically expire 24 hours after creation.
  , entityTransferExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | is_sender: If the requesting account created this transfer.
  , entityTransferIsSender :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | status: The status of the transfer request.
  -- 
  -- \`accepted\`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.
  -- 
  -- \`cancelled\`: The transfer has been cancelled by the sender.
  -- 
  -- \`completed\`: The transfer has completed successfully.
  -- 
  -- \`failed\`: The transfer has failed after initiation.
  -- 
  -- \`pending\`: The transfer is ready to be accepted.
  -- 
  -- \`stale\`: The transfer has exceeded its expiration date. It can no longer be accepted or cancelled.
  , entityTransferStatus :: (GHC.Maybe.Maybe EntityTransferStatus')
  -- | token: The token used to identify and accept or cancel this transfer.
  , entityTransferToken :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | updated: When this transfer was last updated.
  , entityTransferUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EntityTransfer
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= entityTransferCreated obj : "entities" Data.Aeson.Types.ToJSON..= entityTransferEntities obj : "expiry" Data.Aeson.Types.ToJSON..= entityTransferExpiry obj : "is_sender" Data.Aeson.Types.ToJSON..= entityTransferIsSender obj : "status" Data.Aeson.Types.ToJSON..= entityTransferStatus obj : "token" Data.Aeson.Types.ToJSON..= entityTransferToken obj : "updated" Data.Aeson.Types.ToJSON..= entityTransferUpdated obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= entityTransferCreated obj) GHC.Base.<> (("entities" Data.Aeson.Types.ToJSON..= entityTransferEntities obj) GHC.Base.<> (("expiry" Data.Aeson.Types.ToJSON..= entityTransferExpiry obj) GHC.Base.<> (("is_sender" Data.Aeson.Types.ToJSON..= entityTransferIsSender obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= entityTransferStatus obj) GHC.Base.<> (("token" Data.Aeson.Types.ToJSON..= entityTransferToken obj) GHC.Base.<> ("updated" Data.Aeson.Types.ToJSON..= entityTransferUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON EntityTransfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EntityTransfer" (\obj -> ((((((GHC.Base.pure EntityTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_sender")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Create a new 'EntityTransfer' with all required fields.
mkEntityTransfer :: EntityTransfer
mkEntityTransfer = EntityTransfer{entityTransferCreated = GHC.Maybe.Nothing,
                                  entityTransferEntities = GHC.Maybe.Nothing,
                                  entityTransferExpiry = GHC.Maybe.Nothing,
                                  entityTransferIsSender = GHC.Maybe.Nothing,
                                  entityTransferStatus = GHC.Maybe.Nothing,
                                  entityTransferToken = GHC.Maybe.Nothing,
                                  entityTransferUpdated = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.EntityTransfer.properties.entities@ in the specification.
-- 
-- A collection of the entities to include in this transfer request, separated by type.
data EntityTransferEntities' = EntityTransferEntities' {
  -- | linodes: An array containing the IDs of each of the Linodes included in this transfer.
  entityTransferEntities'Linodes :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EntityTransferEntities'
    where toJSON obj = Data.Aeson.Types.Internal.object ("linodes" Data.Aeson.Types.ToJSON..= entityTransferEntities'Linodes obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("linodes" Data.Aeson.Types.ToJSON..= entityTransferEntities'Linodes obj)
instance Data.Aeson.Types.FromJSON.FromJSON EntityTransferEntities'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EntityTransferEntities'" (\obj -> GHC.Base.pure EntityTransferEntities' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linodes"))
-- | Create a new 'EntityTransferEntities'' with all required fields.
mkEntityTransferEntities' :: EntityTransferEntities'
mkEntityTransferEntities' = EntityTransferEntities'{entityTransferEntities'Linodes = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.EntityTransfer.properties.status@ in the specification.
-- 
-- The status of the transfer request.
-- 
-- \`accepted\`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.
-- 
-- \`cancelled\`: The transfer has been cancelled by the sender.
-- 
-- \`completed\`: The transfer has completed successfully.
-- 
-- \`failed\`: The transfer has failed after initiation.
-- 
-- \`pending\`: The transfer is ready to be accepted.
-- 
-- \`stale\`: The transfer has exceeded its expiration date. It can no longer be accepted or cancelled.
data EntityTransferStatus' =
   EntityTransferStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | EntityTransferStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | EntityTransferStatus'EnumAccepted -- ^ Represents the JSON value @"accepted"@
  | EntityTransferStatus'EnumCancelled -- ^ Represents the JSON value @"cancelled"@
  | EntityTransferStatus'EnumCompleted -- ^ Represents the JSON value @"completed"@
  | EntityTransferStatus'EnumFailed -- ^ Represents the JSON value @"failed"@
  | EntityTransferStatus'EnumPending -- ^ Represents the JSON value @"pending"@
  | EntityTransferStatus'EnumStale -- ^ Represents the JSON value @"stale"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EntityTransferStatus'
    where toJSON (EntityTransferStatus'Other val) = val
          toJSON (EntityTransferStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (EntityTransferStatus'EnumAccepted) = "accepted"
          toJSON (EntityTransferStatus'EnumCancelled) = "cancelled"
          toJSON (EntityTransferStatus'EnumCompleted) = "completed"
          toJSON (EntityTransferStatus'EnumFailed) = "failed"
          toJSON (EntityTransferStatus'EnumPending) = "pending"
          toJSON (EntityTransferStatus'EnumStale) = "stale"
instance Data.Aeson.Types.FromJSON.FromJSON EntityTransferStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "accepted" -> EntityTransferStatus'EnumAccepted
                                            | val GHC.Classes.== "cancelled" -> EntityTransferStatus'EnumCancelled
                                            | val GHC.Classes.== "completed" -> EntityTransferStatus'EnumCompleted
                                            | val GHC.Classes.== "failed" -> EntityTransferStatus'EnumFailed
                                            | val GHC.Classes.== "pending" -> EntityTransferStatus'EnumPending
                                            | val GHC.Classes.== "stale" -> EntityTransferStatus'EnumStale
                                            | GHC.Base.otherwise -> EntityTransferStatus'Other val)
