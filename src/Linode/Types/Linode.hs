-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Linode
module Linode.Types.Linode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Linode@ in the specification.
-- 
-- 
data Linode = Linode {
  -- | alerts
  linodeAlerts :: (GHC.Maybe.Maybe LinodeAlerts')
  -- | backups: Information about this Linode\'s backups status. For information about available backups, see [\/linode\/instances\/{linodeId}\/backups](\/docs\/api\/linode-instances\/\#backups-list).
  , linodeBackups :: (GHC.Maybe.Maybe LinodeBackups')
  -- | created: When this Linode was created.
  , linodeCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | group: A deprecated property denoting a group label for this Linode.
  , linodeGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | hypervisor: The virtualization software powering this Linode.
  , linodeHypervisor :: (GHC.Maybe.Maybe LinodeHypervisor')
  -- | id: This Linode\'s ID which must be provided for all operations impacting this Linode.
  , linodeId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | image
  , linodeImage :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | ipv4: This Linode\'s IPv4 Addresses. Each Linode is assigned a single public IPv4 address
  -- upon creation, and may get a single private IPv4 address if needed. You may need to
  -- [open a support ticket](\/docs\/api\/support\/\#support-ticket-open)
  -- to get additional IPv4 addresses.
  -- 
  -- IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
  -- See the [\/networking](\/docs\/api\/networking\/) endpoints for details.
  , linodeIpv4 :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | ipv6: This Linode\'s IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be \`null\`.
  , linodeIpv6 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | label: The Linode\'s label is for display purposes only. If no label is provided for a Linode,
  -- a default will be assigned.
  -- 
  -- Linode labels have the following constraints:
  -- 
  --   * Must begin and end with an alphanumeric character.
  --   * May only consist of alphanumeric characters, dashes (\`-\`), underscores (\`_\`) or periods (\`.\`).
  --   * Cannot have two dashes (\`--\`), underscores (\`__\`) or periods (\`..\`) in a row.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 3
  -- * Must match pattern \'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+\$\'
  , linodeLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | region: This is the [Region](\/docs\/api\/regions\/\#regions-list) where the Linode was deployed. A Linode\'s region can only be changed by initiating a [cross data center migration](\/docs\/api\/linode-instances\/\#dc-migrationpending-host-migration-initiate).
  , linodeRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | specs: Information about the resources available to this Linode.
  , linodeSpecs :: (GHC.Maybe.Maybe LinodeSpecs')
  -- | status: A brief description of this Linode\'s current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display \"stopped\".
  , linodeStatus :: (GHC.Maybe.Maybe LinodeStatus')
  -- | tags: An array of tags applied to this object.  Tags are for organizational purposes only.
  , linodeTags :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | type: This is the [Linode Type](\/docs\/api\/linode-types\/\#types-list) that this Linode was deployed with.
  -- To change a Linode\'s Type, use [POST \/linode\/instances\/{linodeId}\/resize](\/docs\/api\/linode-instances\/\#linode-resize).
  , linodeType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | updated: When this Linode was last updated.
  , linodeUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | watchdog_enabled: The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
  -- To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
  , linodeWatchdogEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Linode
    where toJSON obj = Data.Aeson.Types.Internal.object ("alerts" Data.Aeson.Types.ToJSON..= linodeAlerts obj : "backups" Data.Aeson.Types.ToJSON..= linodeBackups obj : "created" Data.Aeson.Types.ToJSON..= linodeCreated obj : "group" Data.Aeson.Types.ToJSON..= linodeGroup obj : "hypervisor" Data.Aeson.Types.ToJSON..= linodeHypervisor obj : "id" Data.Aeson.Types.ToJSON..= linodeId obj : "image" Data.Aeson.Types.ToJSON..= linodeImage obj : "ipv4" Data.Aeson.Types.ToJSON..= linodeIpv4 obj : "ipv6" Data.Aeson.Types.ToJSON..= linodeIpv6 obj : "label" Data.Aeson.Types.ToJSON..= linodeLabel obj : "region" Data.Aeson.Types.ToJSON..= linodeRegion obj : "specs" Data.Aeson.Types.ToJSON..= linodeSpecs obj : "status" Data.Aeson.Types.ToJSON..= linodeStatus obj : "tags" Data.Aeson.Types.ToJSON..= linodeTags obj : "type" Data.Aeson.Types.ToJSON..= linodeType obj : "updated" Data.Aeson.Types.ToJSON..= linodeUpdated obj : "watchdog_enabled" Data.Aeson.Types.ToJSON..= linodeWatchdogEnabled obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("alerts" Data.Aeson.Types.ToJSON..= linodeAlerts obj) GHC.Base.<> (("backups" Data.Aeson.Types.ToJSON..= linodeBackups obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= linodeCreated obj) GHC.Base.<> (("group" Data.Aeson.Types.ToJSON..= linodeGroup obj) GHC.Base.<> (("hypervisor" Data.Aeson.Types.ToJSON..= linodeHypervisor obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= linodeId obj) GHC.Base.<> (("image" Data.Aeson.Types.ToJSON..= linodeImage obj) GHC.Base.<> (("ipv4" Data.Aeson.Types.ToJSON..= linodeIpv4 obj) GHC.Base.<> (("ipv6" Data.Aeson.Types.ToJSON..= linodeIpv6 obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= linodeLabel obj) GHC.Base.<> (("region" Data.Aeson.Types.ToJSON..= linodeRegion obj) GHC.Base.<> (("specs" Data.Aeson.Types.ToJSON..= linodeSpecs obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= linodeStatus obj) GHC.Base.<> (("tags" Data.Aeson.Types.ToJSON..= linodeTags obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= linodeType obj) GHC.Base.<> (("updated" Data.Aeson.Types.ToJSON..= linodeUpdated obj) GHC.Base.<> ("watchdog_enabled" Data.Aeson.Types.ToJSON..= linodeWatchdogEnabled obj)))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Linode
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Linode" (\obj -> ((((((((((((((((GHC.Base.pure Linode GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alerts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "backups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hypervisor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv6")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "specs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "watchdog_enabled"))
-- | Create a new 'Linode' with all required fields.
mkLinode :: Linode
mkLinode = Linode{linodeAlerts = GHC.Maybe.Nothing,
                  linodeBackups = GHC.Maybe.Nothing,
                  linodeCreated = GHC.Maybe.Nothing,
                  linodeGroup = GHC.Maybe.Nothing,
                  linodeHypervisor = GHC.Maybe.Nothing,
                  linodeId = GHC.Maybe.Nothing,
                  linodeImage = GHC.Maybe.Nothing,
                  linodeIpv4 = GHC.Maybe.Nothing,
                  linodeIpv6 = GHC.Maybe.Nothing,
                  linodeLabel = GHC.Maybe.Nothing,
                  linodeRegion = GHC.Maybe.Nothing,
                  linodeSpecs = GHC.Maybe.Nothing,
                  linodeStatus = GHC.Maybe.Nothing,
                  linodeTags = GHC.Maybe.Nothing,
                  linodeType = GHC.Maybe.Nothing,
                  linodeUpdated = GHC.Maybe.Nothing,
                  linodeWatchdogEnabled = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.Linode.properties.alerts@ in the specification.
-- 
-- 
data LinodeAlerts' = LinodeAlerts' {
  -- | cpu: The percentage of CPU usage required to trigger an alert.
  -- If the average CPU usage over two hours exceeds this value, we\'ll send you an alert.
  -- Your Linode\'s total CPU capacity is represented as 100%, multiplied by its number of
  -- cores.
  -- 
  -- For example, a two core Linode\'s CPU capacity is represented as 200%. If you want
  -- to be alerted at 90% of a two core Linode\'s CPU capacity, set the alert value to \`180\`.
  -- 
  -- The default value is 90% multiplied by the number of cores.
  -- 
  -- If the value is set to \`0\` (zero), the alert is disabled.
  linodeAlerts'Cpu :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | io: The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we\'ll send you an alert. If set to \`0\` (zero), this alert is disabled.
  , linodeAlerts'Io :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | network_in: The amount of incoming traffic, in Mbit\/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we\'ll send you an alert. If this is set to \`0\` (zero), the alert is disabled.
  , linodeAlerts'NetworkIn :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | network_out: The amount of outbound traffic, in Mbit\/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we\'ll send you an alert. If this is set to \`0\` (zero), the alert is disabled.
  , linodeAlerts'NetworkOut :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | transfer_quota: The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we\'ll alert you. If this is set to \`0\` (zero), the alert is disabled.
  , linodeAlerts'TransferQuota :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeAlerts'
    where toJSON obj = Data.Aeson.Types.Internal.object ("cpu" Data.Aeson.Types.ToJSON..= linodeAlerts'Cpu obj : "io" Data.Aeson.Types.ToJSON..= linodeAlerts'Io obj : "network_in" Data.Aeson.Types.ToJSON..= linodeAlerts'NetworkIn obj : "network_out" Data.Aeson.Types.ToJSON..= linodeAlerts'NetworkOut obj : "transfer_quota" Data.Aeson.Types.ToJSON..= linodeAlerts'TransferQuota obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cpu" Data.Aeson.Types.ToJSON..= linodeAlerts'Cpu obj) GHC.Base.<> (("io" Data.Aeson.Types.ToJSON..= linodeAlerts'Io obj) GHC.Base.<> (("network_in" Data.Aeson.Types.ToJSON..= linodeAlerts'NetworkIn obj) GHC.Base.<> (("network_out" Data.Aeson.Types.ToJSON..= linodeAlerts'NetworkOut obj) GHC.Base.<> ("transfer_quota" Data.Aeson.Types.ToJSON..= linodeAlerts'TransferQuota obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeAlerts'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeAlerts'" (\obj -> ((((GHC.Base.pure LinodeAlerts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cpu")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "io")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network_out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_quota"))
-- | Create a new 'LinodeAlerts'' with all required fields.
mkLinodeAlerts' :: LinodeAlerts'
mkLinodeAlerts' = LinodeAlerts'{linodeAlerts'Cpu = GHC.Maybe.Nothing,
                                linodeAlerts'Io = GHC.Maybe.Nothing,
                                linodeAlerts'NetworkIn = GHC.Maybe.Nothing,
                                linodeAlerts'NetworkOut = GHC.Maybe.Nothing,
                                linodeAlerts'TransferQuota = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.Linode.properties.backups@ in the specification.
-- 
-- Information about this Linode\'s backups status. For information about available backups, see [\/linode\/instances\/{linodeId}\/backups](\/docs\/api\/linode-instances\/\#backups-list).
data LinodeBackups' = LinodeBackups' {
  -- | enabled: If this Linode has the Backup service enabled. To enable backups, see [POST \/linode\/instances\/{linodeId}\/backups\/enable](\/docs\/api\/linode-instances\/\#backups-enable).
  linodeBackups'Enabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | last_successful: The last successful backup date. \'null\' if there was no previous backup.
  , linodeBackups'LastSuccessful :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | schedule
  , linodeBackups'Schedule :: (GHC.Maybe.Maybe LinodeBackups'Schedule')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeBackups'
    where toJSON obj = Data.Aeson.Types.Internal.object ("enabled" Data.Aeson.Types.ToJSON..= linodeBackups'Enabled obj : "last_successful" Data.Aeson.Types.ToJSON..= linodeBackups'LastSuccessful obj : "schedule" Data.Aeson.Types.ToJSON..= linodeBackups'Schedule obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("enabled" Data.Aeson.Types.ToJSON..= linodeBackups'Enabled obj) GHC.Base.<> (("last_successful" Data.Aeson.Types.ToJSON..= linodeBackups'LastSuccessful obj) GHC.Base.<> ("schedule" Data.Aeson.Types.ToJSON..= linodeBackups'Schedule obj)))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeBackups'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeBackups'" (\obj -> ((GHC.Base.pure LinodeBackups' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_successful")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "schedule"))
-- | Create a new 'LinodeBackups'' with all required fields.
mkLinodeBackups' :: LinodeBackups'
mkLinodeBackups' = LinodeBackups'{linodeBackups'Enabled = GHC.Maybe.Nothing,
                                  linodeBackups'LastSuccessful = GHC.Maybe.Nothing,
                                  linodeBackups'Schedule = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.Linode.properties.backups.properties.schedule@ in the specification.
-- 
-- 
data LinodeBackups'Schedule' = LinodeBackups'Schedule' {
  -- | day: The day of the week that your Linode\'s weekly Backup is taken.
  -- If not set manually, a day will be chosen for you. Backups
  -- are taken every day, but backups taken on this day are
  -- preferred when selecting backups to retain for a longer period.
  -- 
  -- 
  -- If not set manually, then when backups are initially enabled, this
  -- may come back as \`Scheduling\` until the \`day\` is automatically selected.
  linodeBackups'Schedule'Day :: (GHC.Maybe.Maybe LinodeBackups'Schedule'Day')
  -- | window: The window in which your backups will be taken, in UTC. A
  -- backups window is a two-hour span of time in which the backup
  -- may occur.
  -- 
  -- 
  -- For example, \`W10\` indicates that your backups should be
  -- taken between 10:00 and 12:00. If you do not choose a backup
  -- window, one will be selected for you automatically.
  -- 
  -- 
  -- If not set manually, when backups are initially enabled this
  -- may come back as \`Scheduling\` until the \`window\` is automatically selected.
  , linodeBackups'Schedule'Window :: (GHC.Maybe.Maybe LinodeBackups'Schedule'Window')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeBackups'Schedule'
    where toJSON obj = Data.Aeson.Types.Internal.object ("day" Data.Aeson.Types.ToJSON..= linodeBackups'Schedule'Day obj : "window" Data.Aeson.Types.ToJSON..= linodeBackups'Schedule'Window obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("day" Data.Aeson.Types.ToJSON..= linodeBackups'Schedule'Day obj) GHC.Base.<> ("window" Data.Aeson.Types.ToJSON..= linodeBackups'Schedule'Window obj))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeBackups'Schedule'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeBackups'Schedule'" (\obj -> (GHC.Base.pure LinodeBackups'Schedule' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "window"))
-- | Create a new 'LinodeBackups'Schedule'' with all required fields.
mkLinodeBackups'Schedule' :: LinodeBackups'Schedule'
mkLinodeBackups'Schedule' = LinodeBackups'Schedule'{linodeBackups'Schedule'Day = GHC.Maybe.Nothing,
                                                    linodeBackups'Schedule'Window = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Linode.properties.backups.properties.schedule.properties.day@ in the specification.
-- 
-- The day of the week that your Linode\'s weekly Backup is taken.
-- If not set manually, a day will be chosen for you. Backups
-- are taken every day, but backups taken on this day are
-- preferred when selecting backups to retain for a longer period.
-- 
-- 
-- If not set manually, then when backups are initially enabled, this
-- may come back as \`Scheduling\` until the \`day\` is automatically selected.
data LinodeBackups'Schedule'Day' =
   LinodeBackups'Schedule'Day'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LinodeBackups'Schedule'Day'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LinodeBackups'Schedule'Day'EnumScheduling -- ^ Represents the JSON value @"Scheduling"@
  | LinodeBackups'Schedule'Day'EnumSunday -- ^ Represents the JSON value @"Sunday"@
  | LinodeBackups'Schedule'Day'EnumMonday -- ^ Represents the JSON value @"Monday"@
  | LinodeBackups'Schedule'Day'EnumTuesday -- ^ Represents the JSON value @"Tuesday"@
  | LinodeBackups'Schedule'Day'EnumWednesday -- ^ Represents the JSON value @"Wednesday"@
  | LinodeBackups'Schedule'Day'EnumThursday -- ^ Represents the JSON value @"Thursday"@
  | LinodeBackups'Schedule'Day'EnumFriday -- ^ Represents the JSON value @"Friday"@
  | LinodeBackups'Schedule'Day'EnumSaturday -- ^ Represents the JSON value @"Saturday"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeBackups'Schedule'Day'
    where toJSON (LinodeBackups'Schedule'Day'Other val) = val
          toJSON (LinodeBackups'Schedule'Day'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LinodeBackups'Schedule'Day'EnumScheduling) = "Scheduling"
          toJSON (LinodeBackups'Schedule'Day'EnumSunday) = "Sunday"
          toJSON (LinodeBackups'Schedule'Day'EnumMonday) = "Monday"
          toJSON (LinodeBackups'Schedule'Day'EnumTuesday) = "Tuesday"
          toJSON (LinodeBackups'Schedule'Day'EnumWednesday) = "Wednesday"
          toJSON (LinodeBackups'Schedule'Day'EnumThursday) = "Thursday"
          toJSON (LinodeBackups'Schedule'Day'EnumFriday) = "Friday"
          toJSON (LinodeBackups'Schedule'Day'EnumSaturday) = "Saturday"
instance Data.Aeson.Types.FromJSON.FromJSON LinodeBackups'Schedule'Day'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "Scheduling" -> LinodeBackups'Schedule'Day'EnumScheduling
                                            | val GHC.Classes.== "Sunday" -> LinodeBackups'Schedule'Day'EnumSunday
                                            | val GHC.Classes.== "Monday" -> LinodeBackups'Schedule'Day'EnumMonday
                                            | val GHC.Classes.== "Tuesday" -> LinodeBackups'Schedule'Day'EnumTuesday
                                            | val GHC.Classes.== "Wednesday" -> LinodeBackups'Schedule'Day'EnumWednesday
                                            | val GHC.Classes.== "Thursday" -> LinodeBackups'Schedule'Day'EnumThursday
                                            | val GHC.Classes.== "Friday" -> LinodeBackups'Schedule'Day'EnumFriday
                                            | val GHC.Classes.== "Saturday" -> LinodeBackups'Schedule'Day'EnumSaturday
                                            | GHC.Base.otherwise -> LinodeBackups'Schedule'Day'Other val)
-- | Defines the enum schema located at @components.schemas.Linode.properties.backups.properties.schedule.properties.window@ in the specification.
-- 
-- The window in which your backups will be taken, in UTC. A
-- backups window is a two-hour span of time in which the backup
-- may occur.
-- 
-- 
-- For example, \`W10\` indicates that your backups should be
-- taken between 10:00 and 12:00. If you do not choose a backup
-- window, one will be selected for you automatically.
-- 
-- 
-- If not set manually, when backups are initially enabled this
-- may come back as \`Scheduling\` until the \`window\` is automatically selected.
data LinodeBackups'Schedule'Window' =
   LinodeBackups'Schedule'Window'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LinodeBackups'Schedule'Window'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LinodeBackups'Schedule'Window'EnumScheduling -- ^ Represents the JSON value @"Scheduling"@
  | LinodeBackups'Schedule'Window'EnumW0 -- ^ Represents the JSON value @"W0"@
  | LinodeBackups'Schedule'Window'EnumW2 -- ^ Represents the JSON value @"W2"@
  | LinodeBackups'Schedule'Window'EnumW4 -- ^ Represents the JSON value @"W4"@
  | LinodeBackups'Schedule'Window'EnumW6 -- ^ Represents the JSON value @"W6"@
  | LinodeBackups'Schedule'Window'EnumW8 -- ^ Represents the JSON value @"W8"@
  | LinodeBackups'Schedule'Window'EnumW10 -- ^ Represents the JSON value @"W10"@
  | LinodeBackups'Schedule'Window'EnumW12 -- ^ Represents the JSON value @"W12"@
  | LinodeBackups'Schedule'Window'EnumW14 -- ^ Represents the JSON value @"W14"@
  | LinodeBackups'Schedule'Window'EnumW16 -- ^ Represents the JSON value @"W16"@
  | LinodeBackups'Schedule'Window'EnumW18 -- ^ Represents the JSON value @"W18"@
  | LinodeBackups'Schedule'Window'EnumW20 -- ^ Represents the JSON value @"W20"@
  | LinodeBackups'Schedule'Window'EnumW22 -- ^ Represents the JSON value @"W22"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeBackups'Schedule'Window'
    where toJSON (LinodeBackups'Schedule'Window'Other val) = val
          toJSON (LinodeBackups'Schedule'Window'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LinodeBackups'Schedule'Window'EnumScheduling) = "Scheduling"
          toJSON (LinodeBackups'Schedule'Window'EnumW0) = "W0"
          toJSON (LinodeBackups'Schedule'Window'EnumW2) = "W2"
          toJSON (LinodeBackups'Schedule'Window'EnumW4) = "W4"
          toJSON (LinodeBackups'Schedule'Window'EnumW6) = "W6"
          toJSON (LinodeBackups'Schedule'Window'EnumW8) = "W8"
          toJSON (LinodeBackups'Schedule'Window'EnumW10) = "W10"
          toJSON (LinodeBackups'Schedule'Window'EnumW12) = "W12"
          toJSON (LinodeBackups'Schedule'Window'EnumW14) = "W14"
          toJSON (LinodeBackups'Schedule'Window'EnumW16) = "W16"
          toJSON (LinodeBackups'Schedule'Window'EnumW18) = "W18"
          toJSON (LinodeBackups'Schedule'Window'EnumW20) = "W20"
          toJSON (LinodeBackups'Schedule'Window'EnumW22) = "W22"
instance Data.Aeson.Types.FromJSON.FromJSON LinodeBackups'Schedule'Window'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "Scheduling" -> LinodeBackups'Schedule'Window'EnumScheduling
                                            | val GHC.Classes.== "W0" -> LinodeBackups'Schedule'Window'EnumW0
                                            | val GHC.Classes.== "W2" -> LinodeBackups'Schedule'Window'EnumW2
                                            | val GHC.Classes.== "W4" -> LinodeBackups'Schedule'Window'EnumW4
                                            | val GHC.Classes.== "W6" -> LinodeBackups'Schedule'Window'EnumW6
                                            | val GHC.Classes.== "W8" -> LinodeBackups'Schedule'Window'EnumW8
                                            | val GHC.Classes.== "W10" -> LinodeBackups'Schedule'Window'EnumW10
                                            | val GHC.Classes.== "W12" -> LinodeBackups'Schedule'Window'EnumW12
                                            | val GHC.Classes.== "W14" -> LinodeBackups'Schedule'Window'EnumW14
                                            | val GHC.Classes.== "W16" -> LinodeBackups'Schedule'Window'EnumW16
                                            | val GHC.Classes.== "W18" -> LinodeBackups'Schedule'Window'EnumW18
                                            | val GHC.Classes.== "W20" -> LinodeBackups'Schedule'Window'EnumW20
                                            | val GHC.Classes.== "W22" -> LinodeBackups'Schedule'Window'EnumW22
                                            | GHC.Base.otherwise -> LinodeBackups'Schedule'Window'Other val)
-- | Defines the enum schema located at @components.schemas.Linode.properties.hypervisor@ in the specification.
-- 
-- The virtualization software powering this Linode.
data LinodeHypervisor' =
   LinodeHypervisor'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LinodeHypervisor'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LinodeHypervisor'EnumKvm -- ^ Represents the JSON value @"kvm"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeHypervisor'
    where toJSON (LinodeHypervisor'Other val) = val
          toJSON (LinodeHypervisor'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LinodeHypervisor'EnumKvm) = "kvm"
instance Data.Aeson.Types.FromJSON.FromJSON LinodeHypervisor'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "kvm" -> LinodeHypervisor'EnumKvm
                                            | GHC.Base.otherwise -> LinodeHypervisor'Other val)
-- | Defines the object schema located at @components.schemas.Linode.properties.specs@ in the specification.
-- 
-- Information about the resources available to this Linode.
data LinodeSpecs' = LinodeSpecs' {
  -- | disk: The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an \`image\` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an \`image\` through [POST \/linode\/instances](\/docs\/api\/linode-instances\/\#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode\'s disks, see the [\/linode\/instances\/{linodeId}\/disks](\/docs\/api\/linode-instances\/\#disks-list) endpoints.
  linodeSpecs'Disk :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | memory: The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile, see the [\/linode\/instances\/{linodeId}\/configs](\/docs\/api\/linode-instances\/\#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
  , linodeSpecs'Memory :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | transfer: The amount of network transfer this Linode is allotted each month.
  , linodeSpecs'Transfer :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | vcpus: The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile, see the [\/linode\/instances\/{linodeId}\/configs](\/docs\/api\/linode-instances\/\#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
  , linodeSpecs'Vcpus :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeSpecs'
    where toJSON obj = Data.Aeson.Types.Internal.object ("disk" Data.Aeson.Types.ToJSON..= linodeSpecs'Disk obj : "memory" Data.Aeson.Types.ToJSON..= linodeSpecs'Memory obj : "transfer" Data.Aeson.Types.ToJSON..= linodeSpecs'Transfer obj : "vcpus" Data.Aeson.Types.ToJSON..= linodeSpecs'Vcpus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("disk" Data.Aeson.Types.ToJSON..= linodeSpecs'Disk obj) GHC.Base.<> (("memory" Data.Aeson.Types.ToJSON..= linodeSpecs'Memory obj) GHC.Base.<> (("transfer" Data.Aeson.Types.ToJSON..= linodeSpecs'Transfer obj) GHC.Base.<> ("vcpus" Data.Aeson.Types.ToJSON..= linodeSpecs'Vcpus obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeSpecs'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeSpecs'" (\obj -> (((GHC.Base.pure LinodeSpecs' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "memory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vcpus"))
-- | Create a new 'LinodeSpecs'' with all required fields.
mkLinodeSpecs' :: LinodeSpecs'
mkLinodeSpecs' = LinodeSpecs'{linodeSpecs'Disk = GHC.Maybe.Nothing,
                              linodeSpecs'Memory = GHC.Maybe.Nothing,
                              linodeSpecs'Transfer = GHC.Maybe.Nothing,
                              linodeSpecs'Vcpus = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Linode.properties.status@ in the specification.
-- 
-- A brief description of this Linode\'s current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display \"stopped\".
data LinodeStatus' =
   LinodeStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LinodeStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LinodeStatus'EnumRunning -- ^ Represents the JSON value @"running"@
  | LinodeStatus'EnumOffline -- ^ Represents the JSON value @"offline"@
  | LinodeStatus'EnumBooting -- ^ Represents the JSON value @"booting"@
  | LinodeStatus'EnumRebooting -- ^ Represents the JSON value @"rebooting"@
  | LinodeStatus'EnumShuttingDown -- ^ Represents the JSON value @"shutting_down"@
  | LinodeStatus'EnumProvisioning -- ^ Represents the JSON value @"provisioning"@
  | LinodeStatus'EnumDeleting -- ^ Represents the JSON value @"deleting"@
  | LinodeStatus'EnumMigrating -- ^ Represents the JSON value @"migrating"@
  | LinodeStatus'EnumRebuilding -- ^ Represents the JSON value @"rebuilding"@
  | LinodeStatus'EnumCloning -- ^ Represents the JSON value @"cloning"@
  | LinodeStatus'EnumRestoring -- ^ Represents the JSON value @"restoring"@
  | LinodeStatus'EnumStopped -- ^ Represents the JSON value @"stopped"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeStatus'
    where toJSON (LinodeStatus'Other val) = val
          toJSON (LinodeStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LinodeStatus'EnumRunning) = "running"
          toJSON (LinodeStatus'EnumOffline) = "offline"
          toJSON (LinodeStatus'EnumBooting) = "booting"
          toJSON (LinodeStatus'EnumRebooting) = "rebooting"
          toJSON (LinodeStatus'EnumShuttingDown) = "shutting_down"
          toJSON (LinodeStatus'EnumProvisioning) = "provisioning"
          toJSON (LinodeStatus'EnumDeleting) = "deleting"
          toJSON (LinodeStatus'EnumMigrating) = "migrating"
          toJSON (LinodeStatus'EnumRebuilding) = "rebuilding"
          toJSON (LinodeStatus'EnumCloning) = "cloning"
          toJSON (LinodeStatus'EnumRestoring) = "restoring"
          toJSON (LinodeStatus'EnumStopped) = "stopped"
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "running" -> LinodeStatus'EnumRunning
                                            | val GHC.Classes.== "offline" -> LinodeStatus'EnumOffline
                                            | val GHC.Classes.== "booting" -> LinodeStatus'EnumBooting
                                            | val GHC.Classes.== "rebooting" -> LinodeStatus'EnumRebooting
                                            | val GHC.Classes.== "shutting_down" -> LinodeStatus'EnumShuttingDown
                                            | val GHC.Classes.== "provisioning" -> LinodeStatus'EnumProvisioning
                                            | val GHC.Classes.== "deleting" -> LinodeStatus'EnumDeleting
                                            | val GHC.Classes.== "migrating" -> LinodeStatus'EnumMigrating
                                            | val GHC.Classes.== "rebuilding" -> LinodeStatus'EnumRebuilding
                                            | val GHC.Classes.== "cloning" -> LinodeStatus'EnumCloning
                                            | val GHC.Classes.== "restoring" -> LinodeStatus'EnumRestoring
                                            | val GHC.Classes.== "stopped" -> LinodeStatus'EnumStopped
                                            | GHC.Base.otherwise -> LinodeStatus'Other val)
