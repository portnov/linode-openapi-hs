-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ObjectStorageKey
module Linode.Types.ObjectStorageKey where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.ObjectStorageKey@ in the specification.
-- 
-- A keypair used to communicate with the Object Storage S3 API.
data ObjectStorageKey = ObjectStorageKey {
  -- | access_key: This keypair\'s access key. This is not secret.
  objectStorageKeyAccessKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | bucket_access: Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key\'s access to only the bucket(s) declared in this array and define their bucket-level permissions.
  -- 
  -- 
  --   Limited Access Keys can:
  -- 
  --   * [list all buckets](\/docs\/api\/object-storage\/\#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.
  -- 
  -- 
  --   * [create new buckets](\/docs\/api\/object-storage\/\#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.
  -- 
  -- 
  --   **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  --   This is achieved by sending a request with an empty \`bucket_access\` array.
  -- 
  -- 
  --   **Note:** If this field is omitted, a regular unlimited access key is issued.
  , objectStorageKeyBucketAccess :: (GHC.Maybe.Maybe ([ObjectStorageKeyBucketAccess']))
  -- | id: This keypair\'s unique ID
  , objectStorageKeyId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The label given to this key. For display purposes only.
  , objectStorageKeyLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | limited: Whether or not this key is a limited access key. Will return \`false\` if this key grants full access to all buckets on the user\'s account.
  , objectStorageKeyLimited :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | secret_key: This keypair\'s secret key. Only returned on key creation.
  , objectStorageKeySecretKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ObjectStorageKey
    where toJSON obj = Data.Aeson.Types.Internal.object ("access_key" Data.Aeson.Types.ToJSON..= objectStorageKeyAccessKey obj : "bucket_access" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess obj : "id" Data.Aeson.Types.ToJSON..= objectStorageKeyId obj : "label" Data.Aeson.Types.ToJSON..= objectStorageKeyLabel obj : "limited" Data.Aeson.Types.ToJSON..= objectStorageKeyLimited obj : "secret_key" Data.Aeson.Types.ToJSON..= objectStorageKeySecretKey obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("access_key" Data.Aeson.Types.ToJSON..= objectStorageKeyAccessKey obj) GHC.Base.<> (("bucket_access" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= objectStorageKeyId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= objectStorageKeyLabel obj) GHC.Base.<> (("limited" Data.Aeson.Types.ToJSON..= objectStorageKeyLimited obj) GHC.Base.<> ("secret_key" Data.Aeson.Types.ToJSON..= objectStorageKeySecretKey obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ObjectStorageKey
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ObjectStorageKey" (\obj -> (((((GHC.Base.pure ObjectStorageKey GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "access_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bucket_access")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "limited")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "secret_key"))
-- | Create a new 'ObjectStorageKey' with all required fields.
mkObjectStorageKey :: ObjectStorageKey
mkObjectStorageKey = ObjectStorageKey{objectStorageKeyAccessKey = GHC.Maybe.Nothing,
                                      objectStorageKeyBucketAccess = GHC.Maybe.Nothing,
                                      objectStorageKeyId = GHC.Maybe.Nothing,
                                      objectStorageKeyLabel = GHC.Maybe.Nothing,
                                      objectStorageKeyLimited = GHC.Maybe.Nothing,
                                      objectStorageKeySecretKey = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.ObjectStorageKey.properties.bucket_access.items@ in the specification.
-- 
-- 
data ObjectStorageKeyBucketAccess' = ObjectStorageKeyBucketAccess' {
  -- | bucket_name: The unique label of the bucket to which the key will grant limited access.
  objectStorageKeyBucketAccess'BucketName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | cluster: The Object Storage cluster where a bucket to which the key is granting access is hosted.
  , objectStorageKeyBucketAccess'Cluster :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | permissions: This Limited Access Key\'s permissions for the selected bucket.
  , objectStorageKeyBucketAccess'Permissions :: (GHC.Maybe.Maybe ObjectStorageKeyBucketAccess'Permissions')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ObjectStorageKeyBucketAccess'
    where toJSON obj = Data.Aeson.Types.Internal.object ("bucket_name" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess'BucketName obj : "cluster" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess'Cluster obj : "permissions" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess'Permissions obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bucket_name" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess'BucketName obj) GHC.Base.<> (("cluster" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess'Cluster obj) GHC.Base.<> ("permissions" Data.Aeson.Types.ToJSON..= objectStorageKeyBucketAccess'Permissions obj)))
instance Data.Aeson.Types.FromJSON.FromJSON ObjectStorageKeyBucketAccess'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ObjectStorageKeyBucketAccess'" (\obj -> ((GHC.Base.pure ObjectStorageKeyBucketAccess' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bucket_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cluster")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "permissions"))
-- | Create a new 'ObjectStorageKeyBucketAccess'' with all required fields.
mkObjectStorageKeyBucketAccess' :: ObjectStorageKeyBucketAccess'
mkObjectStorageKeyBucketAccess' = ObjectStorageKeyBucketAccess'{objectStorageKeyBucketAccess'BucketName = GHC.Maybe.Nothing,
                                                                objectStorageKeyBucketAccess'Cluster = GHC.Maybe.Nothing,
                                                                objectStorageKeyBucketAccess'Permissions = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.ObjectStorageKey.properties.bucket_access.items.properties.permissions@ in the specification.
-- 
-- This Limited Access Key\'s permissions for the selected bucket.
data ObjectStorageKeyBucketAccess'Permissions' =
   ObjectStorageKeyBucketAccess'Permissions'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ObjectStorageKeyBucketAccess'Permissions'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ObjectStorageKeyBucketAccess'Permissions'EnumReadWrite -- ^ Represents the JSON value @"read_write"@
  | ObjectStorageKeyBucketAccess'Permissions'EnumReadOnly -- ^ Represents the JSON value @"read_only"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ObjectStorageKeyBucketAccess'Permissions'
    where toJSON (ObjectStorageKeyBucketAccess'Permissions'Other val) = val
          toJSON (ObjectStorageKeyBucketAccess'Permissions'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ObjectStorageKeyBucketAccess'Permissions'EnumReadWrite) = "read_write"
          toJSON (ObjectStorageKeyBucketAccess'Permissions'EnumReadOnly) = "read_only"
instance Data.Aeson.Types.FromJSON.FromJSON ObjectStorageKeyBucketAccess'Permissions'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "read_write" -> ObjectStorageKeyBucketAccess'Permissions'EnumReadWrite
                                            | val GHC.Classes.== "read_only" -> ObjectStorageKeyBucketAccess'Permissions'EnumReadOnly
                                            | GHC.Base.otherwise -> ObjectStorageKeyBucketAccess'Permissions'Other val)
