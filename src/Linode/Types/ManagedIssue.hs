-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ManagedIssue
module Linode.Types.ManagedIssue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.ManagedIssue@ in the specification.
-- 
-- An Issue that was detected with a service Linode is managing.
data ManagedIssue = ManagedIssue {
  -- | created: When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.
  managedIssueCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | entity: The ticket this Managed Issue opened.
  , managedIssueEntity :: (GHC.Maybe.Maybe ManagedIssueEntity')
  -- | id: This Issue\'s unique ID.
  , managedIssueId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | services: An array of Managed Service IDs that were affected by this Issue.
  , managedIssueServices :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ManagedIssue
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= managedIssueCreated obj : "entity" Data.Aeson.Types.ToJSON..= managedIssueEntity obj : "id" Data.Aeson.Types.ToJSON..= managedIssueId obj : "services" Data.Aeson.Types.ToJSON..= managedIssueServices obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= managedIssueCreated obj) GHC.Base.<> (("entity" Data.Aeson.Types.ToJSON..= managedIssueEntity obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= managedIssueId obj) GHC.Base.<> ("services" Data.Aeson.Types.ToJSON..= managedIssueServices obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedIssue
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedIssue" (\obj -> (((GHC.Base.pure ManagedIssue GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "services"))
-- | Create a new 'ManagedIssue' with all required fields.
mkManagedIssue :: ManagedIssue
mkManagedIssue = ManagedIssue{managedIssueCreated = GHC.Maybe.Nothing,
                              managedIssueEntity = GHC.Maybe.Nothing,
                              managedIssueId = GHC.Maybe.Nothing,
                              managedIssueServices = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.ManagedIssue.properties.entity@ in the specification.
-- 
-- The ticket this Managed Issue opened.
data ManagedIssueEntity' = ManagedIssueEntity' {
  -- | id: This ticket\'s ID
  managedIssueEntity'Id :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The summary for this Ticket.
  , managedIssueEntity'Label :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity this is. In this case, it is always a Ticket.
  , managedIssueEntity'Type :: (GHC.Maybe.Maybe ManagedIssueEntity'Type')
  -- | url: The relative URL where you can access this Ticket.
  , managedIssueEntity'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ManagedIssueEntity'
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= managedIssueEntity'Id obj : "label" Data.Aeson.Types.ToJSON..= managedIssueEntity'Label obj : "type" Data.Aeson.Types.ToJSON..= managedIssueEntity'Type obj : "url" Data.Aeson.Types.ToJSON..= managedIssueEntity'Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= managedIssueEntity'Id obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= managedIssueEntity'Label obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= managedIssueEntity'Type obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= managedIssueEntity'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedIssueEntity'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedIssueEntity'" (\obj -> (((GHC.Base.pure ManagedIssueEntity' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'ManagedIssueEntity'' with all required fields.
mkManagedIssueEntity' :: ManagedIssueEntity'
mkManagedIssueEntity' = ManagedIssueEntity'{managedIssueEntity'Id = GHC.Maybe.Nothing,
                                            managedIssueEntity'Label = GHC.Maybe.Nothing,
                                            managedIssueEntity'Type = GHC.Maybe.Nothing,
                                            managedIssueEntity'Url = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.ManagedIssue.properties.entity.properties.type@ in the specification.
-- 
-- The type of entity this is. In this case, it is always a Ticket.
data ManagedIssueEntity'Type' =
   ManagedIssueEntity'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ManagedIssueEntity'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ManagedIssueEntity'Type'EnumTicket -- ^ Represents the JSON value @"ticket"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ManagedIssueEntity'Type'
    where toJSON (ManagedIssueEntity'Type'Other val) = val
          toJSON (ManagedIssueEntity'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ManagedIssueEntity'Type'EnumTicket) = "ticket"
instance Data.Aeson.Types.FromJSON.FromJSON ManagedIssueEntity'Type'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ticket" -> ManagedIssueEntity'Type'EnumTicket
                                            | GHC.Base.otherwise -> ManagedIssueEntity'Type'Other val)
