-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema ManagedIssue
module Linode.Types.ManagedIssue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema ManagedIssue
-- 
-- An Issue that was detected with a service Linode is managing.
data ManagedIssue = ManagedIssue {
  -- | created: When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.
  managedIssueCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | entity: The ticket this Managed Issue opened.
  , managedIssueEntity :: (GHC.Base.Maybe ManagedIssueEntity)
  -- | id: This Issue\'s unique ID.
  , managedIssueId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | services: An array of Managed Service IDs that were affected by this Issue.
  , managedIssueServices :: (GHC.Base.Maybe ([] GHC.Integer.Type.Integer))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedIssue
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (managedIssueCreated obj) : (Data.Aeson..=) "entity" (managedIssueEntity obj) : (Data.Aeson..=) "id" (managedIssueId obj) : (Data.Aeson..=) "services" (managedIssueServices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (managedIssueCreated obj) GHC.Base.<> ((Data.Aeson..=) "entity" (managedIssueEntity obj) GHC.Base.<> ((Data.Aeson..=) "id" (managedIssueId obj) GHC.Base.<> (Data.Aeson..=) "services" (managedIssueServices obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedIssue
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedIssue" (\obj -> (((GHC.Base.pure ManagedIssue GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "services"))
-- | Defines the data type for the schema ManagedIssueEntity
-- 
-- The ticket this Managed Issue opened.
data ManagedIssueEntity = ManagedIssueEntity {
  -- | id: This ticket\'s ID
  managedIssueEntityId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The summary for this Ticket.
  , managedIssueEntityLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity this is. In this case, it is always a Ticket.
  , managedIssueEntityType :: (GHC.Base.Maybe ManagedIssueEntityType)
  -- | url: The relative URL where you can access this Ticket.
  , managedIssueEntityUrl :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedIssueEntity
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (managedIssueEntityId obj) : (Data.Aeson..=) "label" (managedIssueEntityLabel obj) : (Data.Aeson..=) "type" (managedIssueEntityType obj) : (Data.Aeson..=) "url" (managedIssueEntityUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (managedIssueEntityId obj) GHC.Base.<> ((Data.Aeson..=) "label" (managedIssueEntityLabel obj) GHC.Base.<> ((Data.Aeson..=) "type" (managedIssueEntityType obj) GHC.Base.<> (Data.Aeson..=) "url" (managedIssueEntityUrl obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedIssueEntity
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedIssueEntity" (\obj -> (((GHC.Base.pure ManagedIssueEntity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Defines the enum schema ManagedIssueEntityType
-- 
-- The type of entity this is. In this case, it is always a Ticket.
data ManagedIssueEntityType
    = ManagedIssueEntityTypeEnumOther Data.Aeson.Types.Internal.Value
    | ManagedIssueEntityTypeEnumTyped Data.Text.Internal.Text
    | ManagedIssueEntityTypeEnumString_ticket
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedIssueEntityType
    where toJSON (ManagedIssueEntityTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ManagedIssueEntityTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ManagedIssueEntityTypeEnumString_ticket) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket"
instance Data.Aeson.FromJSON ManagedIssueEntityType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket")
                                          then ManagedIssueEntityTypeEnumString_ticket
                                          else ManagedIssueEntityTypeEnumOther val)