-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Kernel
module Linode.Types.Kernel where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Kernel@ in the specification.
-- 
-- Linux kernel object
data Kernel = Kernel {
  -- | architecture: The architecture of this Kernel.
  kernelArchitecture :: (GHC.Maybe.Maybe KernelArchitecture')
  -- | built: The date on which this Kernel was built.
  , kernelBuilt :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | deprecated: If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false.
  , kernelDeprecated :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | id: The unique ID of this Kernel.
  , kernelId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | kvm: If this Kernel is suitable for KVM Linodes.
  , kernelKvm :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | label: The friendly name of this Kernel.
  , kernelLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | pvops: If this Kernel is suitable for paravirtualized operations.
  , kernelPvops :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | version: Linux Kernel version.
  , kernelVersion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | xen: If this Kernel is suitable for Xen Linodes.
  , kernelXen :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Kernel
    where toJSON obj = Data.Aeson.Types.Internal.object ("architecture" Data.Aeson.Types.ToJSON..= kernelArchitecture obj : "built" Data.Aeson.Types.ToJSON..= kernelBuilt obj : "deprecated" Data.Aeson.Types.ToJSON..= kernelDeprecated obj : "id" Data.Aeson.Types.ToJSON..= kernelId obj : "kvm" Data.Aeson.Types.ToJSON..= kernelKvm obj : "label" Data.Aeson.Types.ToJSON..= kernelLabel obj : "pvops" Data.Aeson.Types.ToJSON..= kernelPvops obj : "version" Data.Aeson.Types.ToJSON..= kernelVersion obj : "xen" Data.Aeson.Types.ToJSON..= kernelXen obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("architecture" Data.Aeson.Types.ToJSON..= kernelArchitecture obj) GHC.Base.<> (("built" Data.Aeson.Types.ToJSON..= kernelBuilt obj) GHC.Base.<> (("deprecated" Data.Aeson.Types.ToJSON..= kernelDeprecated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= kernelId obj) GHC.Base.<> (("kvm" Data.Aeson.Types.ToJSON..= kernelKvm obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= kernelLabel obj) GHC.Base.<> (("pvops" Data.Aeson.Types.ToJSON..= kernelPvops obj) GHC.Base.<> (("version" Data.Aeson.Types.ToJSON..= kernelVersion obj) GHC.Base.<> ("xen" Data.Aeson.Types.ToJSON..= kernelXen obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Kernel
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Kernel" (\obj -> ((((((((GHC.Base.pure Kernel GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "architecture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "built")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "kvm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pvops")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "xen"))
-- | Create a new 'Kernel' with all required fields.
mkKernel :: Kernel
mkKernel = Kernel{kernelArchitecture = GHC.Maybe.Nothing,
                  kernelBuilt = GHC.Maybe.Nothing,
                  kernelDeprecated = GHC.Maybe.Nothing,
                  kernelId = GHC.Maybe.Nothing,
                  kernelKvm = GHC.Maybe.Nothing,
                  kernelLabel = GHC.Maybe.Nothing,
                  kernelPvops = GHC.Maybe.Nothing,
                  kernelVersion = GHC.Maybe.Nothing,
                  kernelXen = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Kernel.properties.architecture@ in the specification.
-- 
-- The architecture of this Kernel.
data KernelArchitecture' =
   KernelArchitecture'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | KernelArchitecture'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | KernelArchitecture'EnumX86_64 -- ^ Represents the JSON value @"x86_64"@
  | KernelArchitecture'EnumI386 -- ^ Represents the JSON value @"i386"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KernelArchitecture'
    where toJSON (KernelArchitecture'Other val) = val
          toJSON (KernelArchitecture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (KernelArchitecture'EnumX86_64) = "x86_64"
          toJSON (KernelArchitecture'EnumI386) = "i386"
instance Data.Aeson.Types.FromJSON.FromJSON KernelArchitecture'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "x86_64" -> KernelArchitecture'EnumX86_64
                                            | val GHC.Classes.== "i386" -> KernelArchitecture'EnumI386
                                            | GHC.Base.otherwise -> KernelArchitecture'Other val)
