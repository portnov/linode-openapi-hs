-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Kernel
module Linode.Types.Kernel where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Kernel
-- 
-- Linux kernel object
data Kernel = Kernel {
  -- | architecture: The architecture of this Kernel.
  kernelArchitecture :: (GHC.Base.Maybe KernelArchitecture)
  -- | built: The date on which this Kernel was built.
  , kernelBuilt :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | deprecated: If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false.
  , kernelDeprecated :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | id: The unique ID of this Kernel.
  , kernelId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | kvm: If this Kernel is suitable for KVM Linodes.
  , kernelKvm :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | label: The friendly name of this Kernel.
  , kernelLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | pvops: If this Kernel is suitable for paravirtualized operations.
  , kernelPvops :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | version: Linux Kernel version.
  , kernelVersion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | xen: If this Kernel is suitable for Xen Linodes.
  , kernelXen :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Kernel
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "architecture" (kernelArchitecture obj) : (Data.Aeson..=) "built" (kernelBuilt obj) : (Data.Aeson..=) "deprecated" (kernelDeprecated obj) : (Data.Aeson..=) "id" (kernelId obj) : (Data.Aeson..=) "kvm" (kernelKvm obj) : (Data.Aeson..=) "label" (kernelLabel obj) : (Data.Aeson..=) "pvops" (kernelPvops obj) : (Data.Aeson..=) "version" (kernelVersion obj) : (Data.Aeson..=) "xen" (kernelXen obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "architecture" (kernelArchitecture obj) GHC.Base.<> ((Data.Aeson..=) "built" (kernelBuilt obj) GHC.Base.<> ((Data.Aeson..=) "deprecated" (kernelDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "id" (kernelId obj) GHC.Base.<> ((Data.Aeson..=) "kvm" (kernelKvm obj) GHC.Base.<> ((Data.Aeson..=) "label" (kernelLabel obj) GHC.Base.<> ((Data.Aeson..=) "pvops" (kernelPvops obj) GHC.Base.<> ((Data.Aeson..=) "version" (kernelVersion obj) GHC.Base.<> (Data.Aeson..=) "xen" (kernelXen obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Kernel
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Kernel" (\obj -> ((((((((GHC.Base.pure Kernel GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "architecture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "built")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "kvm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pvops")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "xen"))
-- | Defines the enum schema KernelArchitecture
-- 
-- The architecture of this Kernel.
data KernelArchitecture
    = KernelArchitectureEnumOther Data.Aeson.Types.Internal.Value
    | KernelArchitectureEnumTyped Data.Text.Internal.Text
    | KernelArchitectureEnumString_i386
    | KernelArchitectureEnumString_x86_64
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON KernelArchitecture
    where toJSON (KernelArchitectureEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (KernelArchitectureEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (KernelArchitectureEnumString_i386) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "i386"
          toJSON (KernelArchitectureEnumString_x86_64) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "x86_64"
instance Data.Aeson.FromJSON KernelArchitecture
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "i386")
                                          then KernelArchitectureEnumString_i386
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "x86_64")
                                                then KernelArchitectureEnumString_x86_64
                                                else KernelArchitectureEnumOther val)