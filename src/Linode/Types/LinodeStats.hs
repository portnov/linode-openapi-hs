-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LinodeStats
module Linode.Types.LinodeStats where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema LinodeStats
-- 
-- CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in \"[timestamp, reading]\" array format. Timestamp is a UNIX timestamp in EST.
data LinodeStats = LinodeStats {
  -- | cpu: Percentage of CPU used.
  linodeStatsCpu :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | io: Input\/Output statistics.
  , linodeStatsIo :: (GHC.Base.Maybe LinodeStatsIo)
  -- | netv4: IPv4 statistics.
  , linodeStatsNetv4 :: (GHC.Base.Maybe LinodeStatsNetv4)
  -- | netv6: IPv6 statistics.
  , linodeStatsNetv6 :: (GHC.Base.Maybe LinodeStatsNetv6)
  -- | title: The title for this data set.
  , linodeStatsTitle :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeStats
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "cpu" (linodeStatsCpu obj) : (Data.Aeson..=) "io" (linodeStatsIo obj) : (Data.Aeson..=) "netv4" (linodeStatsNetv4 obj) : (Data.Aeson..=) "netv6" (linodeStatsNetv6 obj) : (Data.Aeson..=) "title" (linodeStatsTitle obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "cpu" (linodeStatsCpu obj) GHC.Base.<> ((Data.Aeson..=) "io" (linodeStatsIo obj) GHC.Base.<> ((Data.Aeson..=) "netv4" (linodeStatsNetv4 obj) GHC.Base.<> ((Data.Aeson..=) "netv6" (linodeStatsNetv6 obj) GHC.Base.<> (Data.Aeson..=) "title" (linodeStatsTitle obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStats
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStats" (\obj -> ((((GHC.Base.pure LinodeStats GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cpu")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "io")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "netv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "netv6")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title"))
-- | Defines the data type for the schema LinodeStatsIo
-- 
-- Input\/Output statistics.
data LinodeStatsIo = LinodeStatsIo {
  -- | io: Block\/s written.
  linodeStatsIoIo :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | swap: Block\/s written.
  , linodeStatsIoSwap :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeStatsIo
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "io" (linodeStatsIoIo obj) : (Data.Aeson..=) "swap" (linodeStatsIoSwap obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "io" (linodeStatsIoIo obj) GHC.Base.<> (Data.Aeson..=) "swap" (linodeStatsIoSwap obj))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatsIo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStatsIo" (\obj -> (GHC.Base.pure LinodeStatsIo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "io")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "swap"))
-- | Defines the data type for the schema LinodeStatsNetv4
-- 
-- IPv4 statistics.
data LinodeStatsNetv4 = LinodeStatsNetv4 {
  -- | in: Input stats for IPv4, measured in bits\/s (bits\/second).
  linodeStatsNetv4In :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | out: Output stats for IPv4, measured in bits\/s (bits\/second).
  , linodeStatsNetv4Out :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | private_in: Private IPv4 input statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv4Private_in :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | private_out: Private IPv4 output statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv4Private_out :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeStatsNetv4
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "in" (linodeStatsNetv4In obj) : (Data.Aeson..=) "out" (linodeStatsNetv4Out obj) : (Data.Aeson..=) "private_in" (linodeStatsNetv4Private_in obj) : (Data.Aeson..=) "private_out" (linodeStatsNetv4Private_out obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "in" (linodeStatsNetv4In obj) GHC.Base.<> ((Data.Aeson..=) "out" (linodeStatsNetv4Out obj) GHC.Base.<> ((Data.Aeson..=) "private_in" (linodeStatsNetv4Private_in obj) GHC.Base.<> (Data.Aeson..=) "private_out" (linodeStatsNetv4Private_out obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatsNetv4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStatsNetv4" (\obj -> (((GHC.Base.pure LinodeStatsNetv4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_out"))
-- | Defines the data type for the schema LinodeStatsNetv6
-- 
-- IPv6 statistics.
data LinodeStatsNetv6 = LinodeStatsNetv6 {
  -- | in: Input stats for IPv6, measured in bits\/s (bits\/second).
  linodeStatsNetv6In :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | out: Output stats for IPv6, measured in bits\/s (bits\/second).
  , linodeStatsNetv6Out :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | private_in: Private IPv6 input statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv6Private_in :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  -- | private_out: Private IPv6 output statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv6Private_out :: (GHC.Base.Maybe ([] ([] GHC.Types.Double)))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeStatsNetv6
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "in" (linodeStatsNetv6In obj) : (Data.Aeson..=) "out" (linodeStatsNetv6Out obj) : (Data.Aeson..=) "private_in" (linodeStatsNetv6Private_in obj) : (Data.Aeson..=) "private_out" (linodeStatsNetv6Private_out obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "in" (linodeStatsNetv6In obj) GHC.Base.<> ((Data.Aeson..=) "out" (linodeStatsNetv6Out obj) GHC.Base.<> ((Data.Aeson..=) "private_in" (linodeStatsNetv6Private_in obj) GHC.Base.<> (Data.Aeson..=) "private_out" (linodeStatsNetv6Private_out obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatsNetv6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStatsNetv6" (\obj -> (((GHC.Base.pure LinodeStatsNetv6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_out"))