-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LinodeStats
module Linode.Types.LinodeStats where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LinodeStats@ in the specification.
-- 
-- CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in \"[timestamp, reading]\" array format. Timestamp is a UNIX timestamp in EST.
data LinodeStats = LinodeStats {
  -- | cpu: Percentage of CPU used.
  linodeStatsCpu :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | io: Input\/Output statistics.
  , linodeStatsIo :: (GHC.Maybe.Maybe LinodeStatsIo')
  -- | netv4: IPv4 statistics.
  , linodeStatsNetv4 :: (GHC.Maybe.Maybe LinodeStatsNetv4')
  -- | netv6: IPv6 statistics.
  , linodeStatsNetv6 :: (GHC.Maybe.Maybe LinodeStatsNetv6')
  -- | title: The title for this data set.
  , linodeStatsTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeStats
    where toJSON obj = Data.Aeson.Types.Internal.object ("cpu" Data.Aeson.Types.ToJSON..= linodeStatsCpu obj : "io" Data.Aeson.Types.ToJSON..= linodeStatsIo obj : "netv4" Data.Aeson.Types.ToJSON..= linodeStatsNetv4 obj : "netv6" Data.Aeson.Types.ToJSON..= linodeStatsNetv6 obj : "title" Data.Aeson.Types.ToJSON..= linodeStatsTitle obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cpu" Data.Aeson.Types.ToJSON..= linodeStatsCpu obj) GHC.Base.<> (("io" Data.Aeson.Types.ToJSON..= linodeStatsIo obj) GHC.Base.<> (("netv4" Data.Aeson.Types.ToJSON..= linodeStatsNetv4 obj) GHC.Base.<> (("netv6" Data.Aeson.Types.ToJSON..= linodeStatsNetv6 obj) GHC.Base.<> ("title" Data.Aeson.Types.ToJSON..= linodeStatsTitle obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStats
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStats" (\obj -> ((((GHC.Base.pure LinodeStats GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cpu")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "io")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "netv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "netv6")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title"))
-- | Create a new 'LinodeStats' with all required fields.
mkLinodeStats :: LinodeStats
mkLinodeStats = LinodeStats{linodeStatsCpu = GHC.Maybe.Nothing,
                            linodeStatsIo = GHC.Maybe.Nothing,
                            linodeStatsNetv4 = GHC.Maybe.Nothing,
                            linodeStatsNetv6 = GHC.Maybe.Nothing,
                            linodeStatsTitle = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.LinodeStats.properties.io@ in the specification.
-- 
-- Input\/Output statistics.
data LinodeStatsIo' = LinodeStatsIo' {
  -- | io: Block\/s written.
  linodeStatsIo'Io :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | swap: Block\/s written.
  , linodeStatsIo'Swap :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeStatsIo'
    where toJSON obj = Data.Aeson.Types.Internal.object ("io" Data.Aeson.Types.ToJSON..= linodeStatsIo'Io obj : "swap" Data.Aeson.Types.ToJSON..= linodeStatsIo'Swap obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("io" Data.Aeson.Types.ToJSON..= linodeStatsIo'Io obj) GHC.Base.<> ("swap" Data.Aeson.Types.ToJSON..= linodeStatsIo'Swap obj))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatsIo'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStatsIo'" (\obj -> (GHC.Base.pure LinodeStatsIo' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "io")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "swap"))
-- | Create a new 'LinodeStatsIo'' with all required fields.
mkLinodeStatsIo' :: LinodeStatsIo'
mkLinodeStatsIo' = LinodeStatsIo'{linodeStatsIo'Io = GHC.Maybe.Nothing,
                                  linodeStatsIo'Swap = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.LinodeStats.properties.netv4@ in the specification.
-- 
-- IPv4 statistics.
data LinodeStatsNetv4' = LinodeStatsNetv4' {
  -- | in: Input stats for IPv4, measured in bits\/s (bits\/second).
  linodeStatsNetv4'In :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | out: Output stats for IPv4, measured in bits\/s (bits\/second).
  , linodeStatsNetv4'Out :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | private_in: Private IPv4 input statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv4'PrivateIn :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | private_out: Private IPv4 output statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv4'PrivateOut :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeStatsNetv4'
    where toJSON obj = Data.Aeson.Types.Internal.object ("in" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'In obj : "out" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'Out obj : "private_in" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'PrivateIn obj : "private_out" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'PrivateOut obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("in" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'In obj) GHC.Base.<> (("out" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'Out obj) GHC.Base.<> (("private_in" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'PrivateIn obj) GHC.Base.<> ("private_out" Data.Aeson.Types.ToJSON..= linodeStatsNetv4'PrivateOut obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatsNetv4'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStatsNetv4'" (\obj -> (((GHC.Base.pure LinodeStatsNetv4' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_out"))
-- | Create a new 'LinodeStatsNetv4'' with all required fields.
mkLinodeStatsNetv4' :: LinodeStatsNetv4'
mkLinodeStatsNetv4' = LinodeStatsNetv4'{linodeStatsNetv4'In = GHC.Maybe.Nothing,
                                        linodeStatsNetv4'Out = GHC.Maybe.Nothing,
                                        linodeStatsNetv4'PrivateIn = GHC.Maybe.Nothing,
                                        linodeStatsNetv4'PrivateOut = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.LinodeStats.properties.netv6@ in the specification.
-- 
-- IPv6 statistics.
data LinodeStatsNetv6' = LinodeStatsNetv6' {
  -- | in: Input stats for IPv6, measured in bits\/s (bits\/second).
  linodeStatsNetv6'In :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | out: Output stats for IPv6, measured in bits\/s (bits\/second).
  , linodeStatsNetv6'Out :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | private_in: Private IPv6 input statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv6'PrivateIn :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  -- | private_out: Private IPv6 output statistics, measured in bits\/s (bits\/second).
  , linodeStatsNetv6'PrivateOut :: (GHC.Maybe.Maybe ([[GHC.Types.Double]]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeStatsNetv6'
    where toJSON obj = Data.Aeson.Types.Internal.object ("in" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'In obj : "out" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'Out obj : "private_in" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'PrivateIn obj : "private_out" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'PrivateOut obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("in" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'In obj) GHC.Base.<> (("out" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'Out obj) GHC.Base.<> (("private_in" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'PrivateIn obj) GHC.Base.<> ("private_out" Data.Aeson.Types.ToJSON..= linodeStatsNetv6'PrivateOut obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeStatsNetv6'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeStatsNetv6'" (\obj -> (((GHC.Base.pure LinodeStatsNetv6' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "private_out"))
-- | Create a new 'LinodeStatsNetv6'' with all required fields.
mkLinodeStatsNetv6' :: LinodeStatsNetv6'
mkLinodeStatsNetv6' = LinodeStatsNetv6'{linodeStatsNetv6'In = GHC.Maybe.Nothing,
                                        linodeStatsNetv6'Out = GHC.Maybe.Nothing,
                                        linodeStatsNetv6'PrivateIn = GHC.Maybe.Nothing,
                                        linodeStatsNetv6'PrivateOut = GHC.Maybe.Nothing}
