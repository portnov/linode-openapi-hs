-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema InvoiceItem
module Linode.Types.InvoiceItem where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema InvoiceItem
-- 
-- An InvoiceItem object.
data InvoiceItem = InvoiceItem {
  -- | amount: The price, in US dollars, of the Invoice Item. Equal to the unit price multiplied by quantity.
  invoiceItemAmount :: (GHC.Base.Maybe GHC.Types.Double)
  -- | from: The date the Invoice Item started, based on month.
  , invoiceItemFrom :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: The Invoice Item\'s display label.
  , invoiceItemLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | quantity: The quantity of this Item for the specified Invoice.
  , invoiceItemQuantity :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | tax: The amount of tax levied on this Item in US Dollars.
  , invoiceItemTax :: (GHC.Base.Maybe GHC.Types.Double)
  -- | to: The date the Invoice Item ended, based on month.
  , invoiceItemTo :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | total: The price of this Item after taxes in US Dollars.
  , invoiceItemTotal :: (GHC.Base.Maybe GHC.Types.Double)
  -- | type: The type of service, ether \`hourly\` or \`misc\`.
  , invoiceItemType :: (GHC.Base.Maybe InvoiceItemType)
  -- | unit_price: The monthly service fee in US Dollars for this Item.
  , invoiceItemUnit_price :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceItem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (invoiceItemAmount obj) : (Data.Aeson..=) "from" (invoiceItemFrom obj) : (Data.Aeson..=) "label" (invoiceItemLabel obj) : (Data.Aeson..=) "quantity" (invoiceItemQuantity obj) : (Data.Aeson..=) "tax" (invoiceItemTax obj) : (Data.Aeson..=) "to" (invoiceItemTo obj) : (Data.Aeson..=) "total" (invoiceItemTotal obj) : (Data.Aeson..=) "type" (invoiceItemType obj) : (Data.Aeson..=) "unit_price" (invoiceItemUnit_price obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (invoiceItemAmount obj) GHC.Base.<> ((Data.Aeson..=) "from" (invoiceItemFrom obj) GHC.Base.<> ((Data.Aeson..=) "label" (invoiceItemLabel obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (invoiceItemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "tax" (invoiceItemTax obj) GHC.Base.<> ((Data.Aeson..=) "to" (invoiceItemTo obj) GHC.Base.<> ((Data.Aeson..=) "total" (invoiceItemTotal obj) GHC.Base.<> ((Data.Aeson..=) "type" (invoiceItemType obj) GHC.Base.<> (Data.Aeson..=) "unit_price" (invoiceItemUnit_price obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceItem" (\obj -> ((((((((GHC.Base.pure InvoiceItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_price"))
-- | Defines the enum schema InvoiceItemType
-- 
-- The type of service, ether \`hourly\` or \`misc\`.
data InvoiceItemType
    = InvoiceItemTypeEnumOther Data.Aeson.Types.Internal.Value
    | InvoiceItemTypeEnumTyped Data.Text.Internal.Text
    | InvoiceItemTypeEnumString_hourly
    | InvoiceItemTypeEnumString_misc
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceItemType
    where toJSON (InvoiceItemTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceItemTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceItemTypeEnumString_hourly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hourly"
          toJSON (InvoiceItemTypeEnumString_misc) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "misc"
instance Data.Aeson.FromJSON InvoiceItemType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hourly")
                                          then InvoiceItemTypeEnumString_hourly
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "misc")
                                                then InvoiceItemTypeEnumString_misc
                                                else InvoiceItemTypeEnumOther val)