-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema InvoiceItem
module Linode.Types.InvoiceItem where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.InvoiceItem@ in the specification.
-- 
-- An InvoiceItem object.
data InvoiceItem = InvoiceItem {
  -- | amount: The price, in US dollars, of the Invoice Item. Equal to the unit price multiplied by quantity.
  invoiceItemAmount :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | from: The date the Invoice Item started, based on month.
  , invoiceItemFrom :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | label: The Invoice Item\'s display label.
  , invoiceItemLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | quantity: The quantity of this Item for the specified Invoice.
  , invoiceItemQuantity :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | tax: The amount of tax levied on this Item in US Dollars.
  , invoiceItemTax :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | to: The date the Invoice Item ended, based on month.
  , invoiceItemTo :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | total: The price of this Item after taxes in US Dollars.
  , invoiceItemTotal :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | type: The type of service, ether \`hourly\` or \`misc\`.
  , invoiceItemType :: (GHC.Maybe.Maybe InvoiceItemType')
  -- | unit_price: The monthly service fee in US Dollars for this Item.
  , invoiceItemUnitPrice :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceItem
    where toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= invoiceItemAmount obj : "from" Data.Aeson.Types.ToJSON..= invoiceItemFrom obj : "label" Data.Aeson.Types.ToJSON..= invoiceItemLabel obj : "quantity" Data.Aeson.Types.ToJSON..= invoiceItemQuantity obj : "tax" Data.Aeson.Types.ToJSON..= invoiceItemTax obj : "to" Data.Aeson.Types.ToJSON..= invoiceItemTo obj : "total" Data.Aeson.Types.ToJSON..= invoiceItemTotal obj : "type" Data.Aeson.Types.ToJSON..= invoiceItemType obj : "unit_price" Data.Aeson.Types.ToJSON..= invoiceItemUnitPrice obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= invoiceItemAmount obj) GHC.Base.<> (("from" Data.Aeson.Types.ToJSON..= invoiceItemFrom obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= invoiceItemLabel obj) GHC.Base.<> (("quantity" Data.Aeson.Types.ToJSON..= invoiceItemQuantity obj) GHC.Base.<> (("tax" Data.Aeson.Types.ToJSON..= invoiceItemTax obj) GHC.Base.<> (("to" Data.Aeson.Types.ToJSON..= invoiceItemTo obj) GHC.Base.<> (("total" Data.Aeson.Types.ToJSON..= invoiceItemTotal obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= invoiceItemType obj) GHC.Base.<> ("unit_price" Data.Aeson.Types.ToJSON..= invoiceItemUnitPrice obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceItem" (\obj -> ((((((((GHC.Base.pure InvoiceItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_price"))
-- | Create a new 'InvoiceItem' with all required fields.
mkInvoiceItem :: InvoiceItem
mkInvoiceItem = InvoiceItem{invoiceItemAmount = GHC.Maybe.Nothing,
                            invoiceItemFrom = GHC.Maybe.Nothing,
                            invoiceItemLabel = GHC.Maybe.Nothing,
                            invoiceItemQuantity = GHC.Maybe.Nothing,
                            invoiceItemTax = GHC.Maybe.Nothing,
                            invoiceItemTo = GHC.Maybe.Nothing,
                            invoiceItemTotal = GHC.Maybe.Nothing,
                            invoiceItemType = GHC.Maybe.Nothing,
                            invoiceItemUnitPrice = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.InvoiceItem.properties.type@ in the specification.
-- 
-- The type of service, ether \`hourly\` or \`misc\`.
data InvoiceItemType' =
   InvoiceItemType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | InvoiceItemType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | InvoiceItemType'EnumHourly -- ^ Represents the JSON value @"hourly"@
  | InvoiceItemType'EnumMisc -- ^ Represents the JSON value @"misc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceItemType'
    where toJSON (InvoiceItemType'Other val) = val
          toJSON (InvoiceItemType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (InvoiceItemType'EnumHourly) = "hourly"
          toJSON (InvoiceItemType'EnumMisc) = "misc"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceItemType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "hourly" -> InvoiceItemType'EnumHourly
                                            | val GHC.Classes.== "misc" -> InvoiceItemType'EnumMisc
                                            | GHC.Base.otherwise -> InvoiceItemType'Other val)
