-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Firewall
module Linode.Types.Firewall where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.FirewallRuleConfig

-- | Defines the data type for the schema Firewall
-- 
-- A resource that controls incoming and outgoing network traffic to a Linode service. Only one Firewall can be attached to a Linode at any given time. [Create a Firewall Device](\/docs\/api\/networking\/\#firewall-create) to assign a Firewall to a Linode service. Currently, Firewalls can only be assigned to Linode instances.
data Firewall = Firewall {
  -- | created: When this Firewall was created.
  firewallCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The Firewall\'s unique ID.
  , firewallId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The Firewall\'s label, for display purposes only.
  -- 
  -- Firewall labels have the following constraints:
  -- 
  --   * Must begin and end with an alphanumeric character.
  --   * May only consist of alphanumeric characters, dashes (\`-\`), underscores (\`_\`) or periods (\`.\`).
  --   * Cannot have two dashes (\`--\`), underscores (\`__\`) or periods (\`..\`) in a row.
  --   * Must be between 3 and 32 characters.
  --   * Must be unique.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+\$\'
  , firewallLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | rules: The inbound and outbound access rules to apply to the Firewall.
  -- 
  -- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
  , firewallRules :: (GHC.Base.Maybe FirewallRules)
  -- | status: The status of this Firewall.
  -- 
  --   * When a Firewall is first created its status is \`enabled\`.
  --   * Use the [Update Firewall](\/docs\/api\/networking\/\#firewall-update) endpoint to set a Firewall\'s status to \`enabled\` or \`disabled\`.
  --   * Use the [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete) endpoint to delete a Firewall.
  , firewallStatus :: (GHC.Base.Maybe FirewallStatus)
  -- | tags: An array of tags applied to this object. Tags are for organizational purposes only.
  , firewallTags :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | updated: When this Firewall was last updated.
  , firewallUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Firewall
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (firewallCreated obj) : (Data.Aeson..=) "id" (firewallId obj) : (Data.Aeson..=) "label" (firewallLabel obj) : (Data.Aeson..=) "rules" (firewallRules obj) : (Data.Aeson..=) "status" (firewallStatus obj) : (Data.Aeson..=) "tags" (firewallTags obj) : (Data.Aeson..=) "updated" (firewallUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (firewallCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (firewallId obj) GHC.Base.<> ((Data.Aeson..=) "label" (firewallLabel obj) GHC.Base.<> ((Data.Aeson..=) "rules" (firewallRules obj) GHC.Base.<> ((Data.Aeson..=) "status" (firewallStatus obj) GHC.Base.<> ((Data.Aeson..=) "tags" (firewallTags obj) GHC.Base.<> (Data.Aeson..=) "updated" (firewallUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON Firewall
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Firewall" (\obj -> ((((((GHC.Base.pure Firewall GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema FirewallRules
-- 
-- The inbound and outbound access rules to apply to the Firewall.
-- 
-- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
data FirewallRules = FirewallRules {
  -- | inbound: The inbound rules for the firewall, as a JSON array.
  firewallRulesInbound :: (GHC.Base.Maybe ([] FirewallRuleConfig))
  -- | inbound_policy: The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
  , firewallRulesInbound_policy :: (GHC.Base.Maybe FirewallRulesInbound_policy)
  -- | outbound: The outbound rules for the firewall, as a JSON array.
  , firewallRulesOutbound :: (GHC.Base.Maybe ([] FirewallRuleConfig))
  -- | outbound_policy: The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
  , firewallRulesOutbound_policy :: (GHC.Base.Maybe FirewallRulesOutbound_policy)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON FirewallRules
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "inbound" (firewallRulesInbound obj) : (Data.Aeson..=) "inbound_policy" (firewallRulesInbound_policy obj) : (Data.Aeson..=) "outbound" (firewallRulesOutbound obj) : (Data.Aeson..=) "outbound_policy" (firewallRulesOutbound_policy obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "inbound" (firewallRulesInbound obj) GHC.Base.<> ((Data.Aeson..=) "inbound_policy" (firewallRulesInbound_policy obj) GHC.Base.<> ((Data.Aeson..=) "outbound" (firewallRulesOutbound obj) GHC.Base.<> (Data.Aeson..=) "outbound_policy" (firewallRulesOutbound_policy obj))))
instance Data.Aeson.Types.FromJSON.FromJSON FirewallRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FirewallRules" (\obj -> (((GHC.Base.pure FirewallRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound_policy"))
-- | Defines the enum schema FirewallRulesInbound_policy
-- 
-- The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
data FirewallRulesInbound_policy
    = FirewallRulesInbound_policyEnumOther Data.Aeson.Types.Internal.Value
    | FirewallRulesInbound_policyEnumTyped Data.Text.Internal.Text
    | FirewallRulesInbound_policyEnumString_ACCEPT
    | FirewallRulesInbound_policyEnumString_DROP
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FirewallRulesInbound_policy
    where toJSON (FirewallRulesInbound_policyEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FirewallRulesInbound_policyEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FirewallRulesInbound_policyEnumString_ACCEPT) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT"
          toJSON (FirewallRulesInbound_policyEnumString_DROP) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP"
instance Data.Aeson.FromJSON FirewallRulesInbound_policy
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT")
                                          then FirewallRulesInbound_policyEnumString_ACCEPT
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP")
                                                then FirewallRulesInbound_policyEnumString_DROP
                                                else FirewallRulesInbound_policyEnumOther val)
-- | Defines the enum schema FirewallRulesOutbound_policy
-- 
-- The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
data FirewallRulesOutbound_policy
    = FirewallRulesOutbound_policyEnumOther Data.Aeson.Types.Internal.Value
    | FirewallRulesOutbound_policyEnumTyped Data.Text.Internal.Text
    | FirewallRulesOutbound_policyEnumString_ACCEPT
    | FirewallRulesOutbound_policyEnumString_DROP
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FirewallRulesOutbound_policy
    where toJSON (FirewallRulesOutbound_policyEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FirewallRulesOutbound_policyEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FirewallRulesOutbound_policyEnumString_ACCEPT) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT"
          toJSON (FirewallRulesOutbound_policyEnumString_DROP) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP"
instance Data.Aeson.FromJSON FirewallRulesOutbound_policy
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ACCEPT")
                                          then FirewallRulesOutbound_policyEnumString_ACCEPT
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DROP")
                                                then FirewallRulesOutbound_policyEnumString_DROP
                                                else FirewallRulesOutbound_policyEnumOther val)
-- | Defines the enum schema FirewallStatus
-- 
-- The status of this Firewall.
-- 
--   * When a Firewall is first created its status is \`enabled\`.
--   * Use the [Update Firewall](\/docs\/api\/networking\/\#firewall-update) endpoint to set a Firewall\'s status to \`enabled\` or \`disabled\`.
--   * Use the [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete) endpoint to delete a Firewall.
data FirewallStatus
    = FirewallStatusEnumOther Data.Aeson.Types.Internal.Value
    | FirewallStatusEnumTyped Data.Text.Internal.Text
    | FirewallStatusEnumString_deleted
    | FirewallStatusEnumString_disabled
    | FirewallStatusEnumString_enabled
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FirewallStatus
    where toJSON (FirewallStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FirewallStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FirewallStatusEnumString_deleted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "deleted"
          toJSON (FirewallStatusEnumString_disabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled"
          toJSON (FirewallStatusEnumString_enabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "enabled"
instance Data.Aeson.FromJSON FirewallStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "deleted")
                                          then FirewallStatusEnumString_deleted
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled")
                                                then FirewallStatusEnumString_disabled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "enabled")
                                                      then FirewallStatusEnumString_enabled
                                                      else FirewallStatusEnumOther val)