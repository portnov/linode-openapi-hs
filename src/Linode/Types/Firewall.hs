-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Firewall
module Linode.Types.Firewall where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias
import {-# SOURCE #-} Linode.Types.FirewallRuleConfig

-- | Defines the object schema located at @components.schemas.Firewall@ in the specification.
-- 
-- A resource that controls incoming and outgoing network traffic to a Linode service. Only one Firewall can be attached to a Linode at any given time. [Create a Firewall Device](\/docs\/api\/networking\/\#firewall-create) to assign a Firewall to a Linode service. Currently, Firewalls can only be assigned to Linode instances.
data Firewall = Firewall {
  -- | created: When this Firewall was created.
  firewallCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The Firewall\'s unique ID.
  , firewallId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The Firewall\'s label, for display purposes only.
  -- 
  -- Firewall labels have the following constraints:
  -- 
  --   * Must begin and end with an alphanumeric character.
  --   * May only consist of alphanumeric characters, dashes (\`-\`), underscores (\`_\`) or periods (\`.\`).
  --   * Cannot have two dashes (\`--\`), underscores (\`__\`) or periods (\`..\`) in a row.
  --   * Must be between 3 and 32 characters.
  --   * Must be unique.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+\$\'
  , firewallLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | rules: The inbound and outbound access rules to apply to the Firewall.
  -- 
  -- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
  , firewallRules :: (GHC.Maybe.Maybe FirewallRules')
  -- | status: The status of this Firewall.
  -- 
  --   * When a Firewall is first created its status is \`enabled\`.
  --   * Use the [Update Firewall](\/docs\/api\/networking\/\#firewall-update) endpoint to set a Firewall\'s status to \`enabled\` or \`disabled\`.
  --   * Use the [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete) endpoint to delete a Firewall.
  , firewallStatus :: (GHC.Maybe.Maybe FirewallStatus')
  -- | tags: An array of tags applied to this object. Tags are for organizational purposes only.
  , firewallTags :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | updated: When this Firewall was last updated.
  , firewallUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Firewall
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= firewallCreated obj : "id" Data.Aeson.Types.ToJSON..= firewallId obj : "label" Data.Aeson.Types.ToJSON..= firewallLabel obj : "rules" Data.Aeson.Types.ToJSON..= firewallRules obj : "status" Data.Aeson.Types.ToJSON..= firewallStatus obj : "tags" Data.Aeson.Types.ToJSON..= firewallTags obj : "updated" Data.Aeson.Types.ToJSON..= firewallUpdated obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= firewallCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= firewallId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= firewallLabel obj) GHC.Base.<> (("rules" Data.Aeson.Types.ToJSON..= firewallRules obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= firewallStatus obj) GHC.Base.<> (("tags" Data.Aeson.Types.ToJSON..= firewallTags obj) GHC.Base.<> ("updated" Data.Aeson.Types.ToJSON..= firewallUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON Firewall
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Firewall" (\obj -> ((((((GHC.Base.pure Firewall GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Create a new 'Firewall' with all required fields.
mkFirewall :: Firewall
mkFirewall = Firewall{firewallCreated = GHC.Maybe.Nothing,
                      firewallId = GHC.Maybe.Nothing,
                      firewallLabel = GHC.Maybe.Nothing,
                      firewallRules = GHC.Maybe.Nothing,
                      firewallStatus = GHC.Maybe.Nothing,
                      firewallTags = GHC.Maybe.Nothing,
                      firewallUpdated = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.Firewall.properties.rules@ in the specification.
-- 
-- The inbound and outbound access rules to apply to the Firewall.
-- 
-- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
data FirewallRules' = FirewallRules' {
  -- | inbound: The inbound rules for the firewall, as a JSON array.
  firewallRules'Inbound :: (GHC.Maybe.Maybe ([FirewallRuleConfig]))
  -- | inbound_policy: The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
  , firewallRules'InboundPolicy :: (GHC.Maybe.Maybe FirewallRules'InboundPolicy')
  -- | outbound: The outbound rules for the firewall, as a JSON array.
  , firewallRules'Outbound :: (GHC.Maybe.Maybe ([FirewallRuleConfig]))
  -- | outbound_policy: The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
  , firewallRules'OutboundPolicy :: (GHC.Maybe.Maybe FirewallRules'OutboundPolicy')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallRules'
    where toJSON obj = Data.Aeson.Types.Internal.object ("inbound" Data.Aeson.Types.ToJSON..= firewallRules'Inbound obj : "inbound_policy" Data.Aeson.Types.ToJSON..= firewallRules'InboundPolicy obj : "outbound" Data.Aeson.Types.ToJSON..= firewallRules'Outbound obj : "outbound_policy" Data.Aeson.Types.ToJSON..= firewallRules'OutboundPolicy obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("inbound" Data.Aeson.Types.ToJSON..= firewallRules'Inbound obj) GHC.Base.<> (("inbound_policy" Data.Aeson.Types.ToJSON..= firewallRules'InboundPolicy obj) GHC.Base.<> (("outbound" Data.Aeson.Types.ToJSON..= firewallRules'Outbound obj) GHC.Base.<> ("outbound_policy" Data.Aeson.Types.ToJSON..= firewallRules'OutboundPolicy obj))))
instance Data.Aeson.Types.FromJSON.FromJSON FirewallRules'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FirewallRules'" (\obj -> (((GHC.Base.pure FirewallRules' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound_policy"))
-- | Create a new 'FirewallRules'' with all required fields.
mkFirewallRules' :: FirewallRules'
mkFirewallRules' = FirewallRules'{firewallRules'Inbound = GHC.Maybe.Nothing,
                                  firewallRules'InboundPolicy = GHC.Maybe.Nothing,
                                  firewallRules'Outbound = GHC.Maybe.Nothing,
                                  firewallRules'OutboundPolicy = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Firewall.properties.rules.properties.inbound_policy@ in the specification.
-- 
-- The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
data FirewallRules'InboundPolicy' =
   FirewallRules'InboundPolicy'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | FirewallRules'InboundPolicy'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | FirewallRules'InboundPolicy'EnumACCEPT -- ^ Represents the JSON value @"ACCEPT"@
  | FirewallRules'InboundPolicy'EnumDROP -- ^ Represents the JSON value @"DROP"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallRules'InboundPolicy'
    where toJSON (FirewallRules'InboundPolicy'Other val) = val
          toJSON (FirewallRules'InboundPolicy'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (FirewallRules'InboundPolicy'EnumACCEPT) = "ACCEPT"
          toJSON (FirewallRules'InboundPolicy'EnumDROP) = "DROP"
instance Data.Aeson.Types.FromJSON.FromJSON FirewallRules'InboundPolicy'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ACCEPT" -> FirewallRules'InboundPolicy'EnumACCEPT
                                            | val GHC.Classes.== "DROP" -> FirewallRules'InboundPolicy'EnumDROP
                                            | GHC.Base.otherwise -> FirewallRules'InboundPolicy'Other val)
-- | Defines the enum schema located at @components.schemas.Firewall.properties.rules.properties.outbound_policy@ in the specification.
-- 
-- The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
data FirewallRules'OutboundPolicy' =
   FirewallRules'OutboundPolicy'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | FirewallRules'OutboundPolicy'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | FirewallRules'OutboundPolicy'EnumACCEPT -- ^ Represents the JSON value @"ACCEPT"@
  | FirewallRules'OutboundPolicy'EnumDROP -- ^ Represents the JSON value @"DROP"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallRules'OutboundPolicy'
    where toJSON (FirewallRules'OutboundPolicy'Other val) = val
          toJSON (FirewallRules'OutboundPolicy'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (FirewallRules'OutboundPolicy'EnumACCEPT) = "ACCEPT"
          toJSON (FirewallRules'OutboundPolicy'EnumDROP) = "DROP"
instance Data.Aeson.Types.FromJSON.FromJSON FirewallRules'OutboundPolicy'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ACCEPT" -> FirewallRules'OutboundPolicy'EnumACCEPT
                                            | val GHC.Classes.== "DROP" -> FirewallRules'OutboundPolicy'EnumDROP
                                            | GHC.Base.otherwise -> FirewallRules'OutboundPolicy'Other val)
-- | Defines the enum schema located at @components.schemas.Firewall.properties.status@ in the specification.
-- 
-- The status of this Firewall.
-- 
--   * When a Firewall is first created its status is \`enabled\`.
--   * Use the [Update Firewall](\/docs\/api\/networking\/\#firewall-update) endpoint to set a Firewall\'s status to \`enabled\` or \`disabled\`.
--   * Use the [Delete Firewall](\/docs\/api\/networking\/\#firewall-delete) endpoint to delete a Firewall.
data FirewallStatus' =
   FirewallStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | FirewallStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | FirewallStatus'EnumEnabled -- ^ Represents the JSON value @"enabled"@
  | FirewallStatus'EnumDisabled -- ^ Represents the JSON value @"disabled"@
  | FirewallStatus'EnumDeleted -- ^ Represents the JSON value @"deleted"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallStatus'
    where toJSON (FirewallStatus'Other val) = val
          toJSON (FirewallStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (FirewallStatus'EnumEnabled) = "enabled"
          toJSON (FirewallStatus'EnumDisabled) = "disabled"
          toJSON (FirewallStatus'EnumDeleted) = "deleted"
instance Data.Aeson.Types.FromJSON.FromJSON FirewallStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "enabled" -> FirewallStatus'EnumEnabled
                                            | val GHC.Classes.== "disabled" -> FirewallStatus'EnumDisabled
                                            | val GHC.Classes.== "deleted" -> FirewallStatus'EnumDeleted
                                            | GHC.Base.otherwise -> FirewallStatus'Other val)
