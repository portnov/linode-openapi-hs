-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema ManagedContact
module Linode.Types.ManagedContact where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema ManagedContact
-- 
-- Information about someone Linode\'s special forces may contact in case an issue is detected with a manager service.
data ManagedContact = ManagedContact {
  -- | email: The address to email this Contact to alert them of issues.
  managedContactEmail :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | group: A grouping for this Contact. This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  -- * Minimum length of 2
  , managedContactGroup :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: This Contact\'s unique ID.
  , managedContactId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | name: The name of this Contact.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 2
  -- * Must match pattern \'[a-zA-Z0-9-_ ]{2,64}\'
  , managedContactName :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | phone: Information about how to reach this Contact by phone.
  , managedContactPhone :: (GHC.Base.Maybe ManagedContactPhone)
  -- | updated: When this Contact was last updated.
  , managedContactUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedContact
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "email" (managedContactEmail obj) : (Data.Aeson..=) "group" (managedContactGroup obj) : (Data.Aeson..=) "id" (managedContactId obj) : (Data.Aeson..=) "name" (managedContactName obj) : (Data.Aeson..=) "phone" (managedContactPhone obj) : (Data.Aeson..=) "updated" (managedContactUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "email" (managedContactEmail obj) GHC.Base.<> ((Data.Aeson..=) "group" (managedContactGroup obj) GHC.Base.<> ((Data.Aeson..=) "id" (managedContactId obj) GHC.Base.<> ((Data.Aeson..=) "name" (managedContactName obj) GHC.Base.<> ((Data.Aeson..=) "phone" (managedContactPhone obj) GHC.Base.<> (Data.Aeson..=) "updated" (managedContactUpdated obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedContact
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedContact" (\obj -> (((((GHC.Base.pure ManagedContact GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema ManagedContactPhone
-- 
-- Information about how to reach this Contact by phone.
data ManagedContactPhone = ManagedContactPhone {
  -- | primary: This Contact\'s primary phone number.
  managedContactPhonePrimary :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | secondary: This Contact\'s secondary phone number.
  , managedContactPhoneSecondary :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedContactPhone
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "primary" (managedContactPhonePrimary obj) : (Data.Aeson..=) "secondary" (managedContactPhoneSecondary obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "primary" (managedContactPhonePrimary obj) GHC.Base.<> (Data.Aeson..=) "secondary" (managedContactPhoneSecondary obj))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedContactPhone
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedContactPhone" (\obj -> (GHC.Base.pure ManagedContactPhone GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "primary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "secondary"))