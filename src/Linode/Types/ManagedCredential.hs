-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ManagedCredential
module Linode.Types.ManagedCredential where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.ManagedCredential@ in the specification.
-- 
-- A securely-stored Credential that allows Linode\'s special forces to access a Managed server to respond to Issues.
data ManagedCredential = ManagedCredential {
  -- | id: This Credential\'s unique ID.
  managedCredentialId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The unique label for this Credential. This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 75
  -- * Minimum length of 2
  -- * Must match pattern \'[a-zA-Z0-9-_ \\.]{2,75}\'
  , managedCredentialLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | last_decrypted: The date this Credential was last decrypted by a member of Linode special forces.
  , managedCredentialLastDecrypted :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ManagedCredential
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= managedCredentialId obj : "label" Data.Aeson.Types.ToJSON..= managedCredentialLabel obj : "last_decrypted" Data.Aeson.Types.ToJSON..= managedCredentialLastDecrypted obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= managedCredentialId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= managedCredentialLabel obj) GHC.Base.<> ("last_decrypted" Data.Aeson.Types.ToJSON..= managedCredentialLastDecrypted obj)))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedCredential
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedCredential" (\obj -> ((GHC.Base.pure ManagedCredential GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_decrypted"))
-- | Create a new 'ManagedCredential' with all required fields.
mkManagedCredential :: ManagedCredential
mkManagedCredential = ManagedCredential{managedCredentialId = GHC.Maybe.Nothing,
                                        managedCredentialLabel = GHC.Maybe.Nothing,
                                        managedCredentialLastDecrypted = GHC.Maybe.Nothing}
