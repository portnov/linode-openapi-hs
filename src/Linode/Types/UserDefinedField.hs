-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema UserDefinedField
module Linode.Types.UserDefinedField where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema UserDefinedField
-- 
-- A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.
data UserDefinedField = UserDefinedField {
  -- | default: The default value.  If not specified, this value will be used.
  userDefinedFieldDefault :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | example: An example value for the field.
  , userDefinedFieldExample :: Data.Text.Internal.Text
  -- | label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
  , userDefinedFieldLabel :: Data.Text.Internal.Text
  -- | manyOf: A list of acceptable values for the field in any quantity, combination or order.
  , userDefinedFieldManyOf :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | name: The name of the field.
  , userDefinedFieldName :: Data.Text.Internal.Text
  -- | oneOf: A list of acceptable single values for the field.
  , userDefinedFieldOneOf :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON UserDefinedField
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "default" (userDefinedFieldDefault obj) : (Data.Aeson..=) "example" (userDefinedFieldExample obj) : (Data.Aeson..=) "label" (userDefinedFieldLabel obj) : (Data.Aeson..=) "manyOf" (userDefinedFieldManyOf obj) : (Data.Aeson..=) "name" (userDefinedFieldName obj) : (Data.Aeson..=) "oneOf" (userDefinedFieldOneOf obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "default" (userDefinedFieldDefault obj) GHC.Base.<> ((Data.Aeson..=) "example" (userDefinedFieldExample obj) GHC.Base.<> ((Data.Aeson..=) "label" (userDefinedFieldLabel obj) GHC.Base.<> ((Data.Aeson..=) "manyOf" (userDefinedFieldManyOf obj) GHC.Base.<> ((Data.Aeson..=) "name" (userDefinedFieldName obj) GHC.Base.<> (Data.Aeson..=) "oneOf" (userDefinedFieldOneOf obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON UserDefinedField
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "UserDefinedField" (\obj -> (((((GHC.Base.pure UserDefinedField GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "example")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "manyOf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "oneOf"))