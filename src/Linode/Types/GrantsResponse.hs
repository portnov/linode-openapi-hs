-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema GrantsResponse
module Linode.Types.GrantsResponse where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.Grant

-- | Defines the data type for the schema GrantsResponse
-- 
-- A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the \`\/profile\/grants\` endpoint, entities to which a User has no access will be omitted.
data GrantsResponse = GrantsResponse {
  -- | domain: The grants this User has pertaining to Domains on this Account. There will be one entry per Domain on the Account.
  grantsResponseDomain :: (GHC.Base.Maybe ([] Grant))
  -- | global: A structure containing the Account-level grants a User has.
  , grantsResponseGlobal :: (GHC.Base.Maybe GrantsResponseGlobal)
  -- | image: The grants this User has pertaining to Images on this Account. There will be one entry per Image on the Account.
  , grantsResponseImage :: (GHC.Base.Maybe ([] Grant))
  -- | linode: The grants this User has pertaining to Linodes on this Account. There will be one entry per Linode on the Account.
  , grantsResponseLinode :: (GHC.Base.Maybe ([] Grant))
  -- | longview: The grants this User has pertaining to Longview Clients on this Account. There will be one entry per Longview Client on the Account.
  , grantsResponseLongview :: (GHC.Base.Maybe ([] Grant))
  -- | nodebalancer: The grants this User has pertaining to NodeBalancers on this Account. There will be one entry per NodeBalancer on the Account.
  , grantsResponseNodebalancer :: (GHC.Base.Maybe ([] Grant))
  -- | stackscript: The grants this User has pertaining to StackScripts on this Account.  There will be one entry per StackScript on the Account.
  , grantsResponseStackscript :: (GHC.Base.Maybe ([] Grant))
  -- | volume: The grants this User has pertaining to Volumes on this Account. There will be one entry per Volume on the Account.
  , grantsResponseVolume :: (GHC.Base.Maybe ([] Grant))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GrantsResponse
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (grantsResponseDomain obj) : (Data.Aeson..=) "global" (grantsResponseGlobal obj) : (Data.Aeson..=) "image" (grantsResponseImage obj) : (Data.Aeson..=) "linode" (grantsResponseLinode obj) : (Data.Aeson..=) "longview" (grantsResponseLongview obj) : (Data.Aeson..=) "nodebalancer" (grantsResponseNodebalancer obj) : (Data.Aeson..=) "stackscript" (grantsResponseStackscript obj) : (Data.Aeson..=) "volume" (grantsResponseVolume obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (grantsResponseDomain obj) GHC.Base.<> ((Data.Aeson..=) "global" (grantsResponseGlobal obj) GHC.Base.<> ((Data.Aeson..=) "image" (grantsResponseImage obj) GHC.Base.<> ((Data.Aeson..=) "linode" (grantsResponseLinode obj) GHC.Base.<> ((Data.Aeson..=) "longview" (grantsResponseLongview obj) GHC.Base.<> ((Data.Aeson..=) "nodebalancer" (grantsResponseNodebalancer obj) GHC.Base.<> ((Data.Aeson..=) "stackscript" (grantsResponseStackscript obj) GHC.Base.<> (Data.Aeson..=) "volume" (grantsResponseVolume obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GrantsResponse
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GrantsResponse" (\obj -> (((((((GHC.Base.pure GrantsResponse GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "global")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longview")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "volume"))
-- | Defines the data type for the schema GrantsResponseGlobal
-- 
-- A structure containing the Account-level grants a User has.
data GrantsResponseGlobal = GrantsResponseGlobal {
  -- | account_access: The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
  grantsResponseGlobalAccount_access :: (GHC.Base.Maybe GrantsResponseGlobalAccount_access)
  -- | add_domains: If true, this User may add Domains.
  , grantsResponseGlobalAdd_domains :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_firewalls: If true, this User may add Firewalls.
  , grantsResponseGlobalAdd_firewalls :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_images: If true, this User may add Images.
  , grantsResponseGlobalAdd_images :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_linodes: If true, this User may create Linodes.
  , grantsResponseGlobalAdd_linodes :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_longview: If true, this User may create Longview clients and view the current plan.
  , grantsResponseGlobalAdd_longview :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_nodebalancers: If true, this User may add NodeBalancers.
  , grantsResponseGlobalAdd_nodebalancers :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_stackscripts: If true, this User may add StackScripts.
  , grantsResponseGlobalAdd_stackscripts :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | add_volumes: If true, this User may add Volumes.
  , grantsResponseGlobalAdd_volumes :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | cancel_account: If true, this User may cancel the entire Account.
  , grantsResponseGlobalCancel_account :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | longview_subscription: If true, this User may manage the Account\'s Longview subscription.
  , grantsResponseGlobalLongview_subscription :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GrantsResponseGlobal
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account_access" (grantsResponseGlobalAccount_access obj) : (Data.Aeson..=) "add_domains" (grantsResponseGlobalAdd_domains obj) : (Data.Aeson..=) "add_firewalls" (grantsResponseGlobalAdd_firewalls obj) : (Data.Aeson..=) "add_images" (grantsResponseGlobalAdd_images obj) : (Data.Aeson..=) "add_linodes" (grantsResponseGlobalAdd_linodes obj) : (Data.Aeson..=) "add_longview" (grantsResponseGlobalAdd_longview obj) : (Data.Aeson..=) "add_nodebalancers" (grantsResponseGlobalAdd_nodebalancers obj) : (Data.Aeson..=) "add_stackscripts" (grantsResponseGlobalAdd_stackscripts obj) : (Data.Aeson..=) "add_volumes" (grantsResponseGlobalAdd_volumes obj) : (Data.Aeson..=) "cancel_account" (grantsResponseGlobalCancel_account obj) : (Data.Aeson..=) "longview_subscription" (grantsResponseGlobalLongview_subscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account_access" (grantsResponseGlobalAccount_access obj) GHC.Base.<> ((Data.Aeson..=) "add_domains" (grantsResponseGlobalAdd_domains obj) GHC.Base.<> ((Data.Aeson..=) "add_firewalls" (grantsResponseGlobalAdd_firewalls obj) GHC.Base.<> ((Data.Aeson..=) "add_images" (grantsResponseGlobalAdd_images obj) GHC.Base.<> ((Data.Aeson..=) "add_linodes" (grantsResponseGlobalAdd_linodes obj) GHC.Base.<> ((Data.Aeson..=) "add_longview" (grantsResponseGlobalAdd_longview obj) GHC.Base.<> ((Data.Aeson..=) "add_nodebalancers" (grantsResponseGlobalAdd_nodebalancers obj) GHC.Base.<> ((Data.Aeson..=) "add_stackscripts" (grantsResponseGlobalAdd_stackscripts obj) GHC.Base.<> ((Data.Aeson..=) "add_volumes" (grantsResponseGlobalAdd_volumes obj) GHC.Base.<> ((Data.Aeson..=) "cancel_account" (grantsResponseGlobalCancel_account obj) GHC.Base.<> (Data.Aeson..=) "longview_subscription" (grantsResponseGlobalLongview_subscription obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GrantsResponseGlobal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GrantsResponseGlobal" (\obj -> ((((((((((GHC.Base.pure GrantsResponseGlobal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_access")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_domains")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_firewalls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_images")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_linodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_longview")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_nodebalancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_stackscripts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_volumes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancel_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longview_subscription"))
-- | Defines the enum schema GrantsResponseGlobalAccount_access
-- 
-- The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
data GrantsResponseGlobalAccount_access
    = GrantsResponseGlobalAccount_accessEnumOther Data.Aeson.Types.Internal.Value
    | GrantsResponseGlobalAccount_accessEnumTyped Data.Text.Internal.Text
    | GrantsResponseGlobalAccount_accessEnumString_read_only
    | GrantsResponseGlobalAccount_accessEnumString_read_write
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GrantsResponseGlobalAccount_access
    where toJSON (GrantsResponseGlobalAccount_accessEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GrantsResponseGlobalAccount_accessEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GrantsResponseGlobalAccount_accessEnumString_read_only) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "read_only"
          toJSON (GrantsResponseGlobalAccount_accessEnumString_read_write) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "read_write"
instance Data.Aeson.FromJSON GrantsResponseGlobalAccount_access
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "read_only")
                                          then GrantsResponseGlobalAccount_accessEnumString_read_only
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "read_write")
                                                then GrantsResponseGlobalAccount_accessEnumString_read_write
                                                else GrantsResponseGlobalAccount_accessEnumOther val)