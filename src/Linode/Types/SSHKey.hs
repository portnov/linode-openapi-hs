-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema SSHKey
module Linode.Types.SSHKey where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.SSHKey@ in the specification.
-- 
-- A credential object for authenticating a User\'s secure shell connection to a Linode.
data SSHKey = SSHKey {
  -- | created: The date this key was added.
  sSHKeyCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The unique identifier of an SSH Key object.
  , sSHKeyId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: A label for the SSH Key.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 0
  , sSHKeyLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssh_key: The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
  , sSHKeySshKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SSHKey
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= sSHKeyCreated obj : "id" Data.Aeson.Types.ToJSON..= sSHKeyId obj : "label" Data.Aeson.Types.ToJSON..= sSHKeyLabel obj : "ssh_key" Data.Aeson.Types.ToJSON..= sSHKeySshKey obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= sSHKeyCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= sSHKeyId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= sSHKeyLabel obj) GHC.Base.<> ("ssh_key" Data.Aeson.Types.ToJSON..= sSHKeySshKey obj))))
instance Data.Aeson.Types.FromJSON.FromJSON SSHKey
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SSHKey" (\obj -> (((GHC.Base.pure SSHKey GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssh_key"))
-- | Create a new 'SSHKey' with all required fields.
mkSSHKey :: SSHKey
mkSSHKey = SSHKey{sSHKeyCreated = GHC.Maybe.Nothing,
                  sSHKeyId = GHC.Maybe.Nothing,
                  sSHKeyLabel = GHC.Maybe.Nothing,
                  sSHKeySshKey = GHC.Maybe.Nothing}
