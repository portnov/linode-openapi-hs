-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema NodeBalancerNode
module Linode.Types.NodeBalancerNode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.NodeBalancerNode@ in the specification.
-- 
-- A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.
data NodeBalancerNode = NodeBalancerNode {
  -- | address: The private IP Address where this backend can be reached. This _must_ be a private IP address.
  nodeBalancerNodeAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | config_id: The NodeBalancer Config ID that this Node belongs to.
  , nodeBalancerNodeConfigId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | id: This node\'s unique ID.
  , nodeBalancerNodeId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The label for this node.  This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_.]{3,32}\'
  , nodeBalancerNodeLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | mode: The mode this NodeBalancer should use when sending traffic to this backend.
  -- * If set to \`accept\` this backend is accepting traffic.
  -- * If set to \`reject\` this backend will not receive traffic.
  -- * If set to \`drain\` this backend will not receive _new_ traffic, but connections already
  --   pinned to it will continue to be routed to it.
  -- 
  -- * If set to \`backup\`, this backend will only receive traffic if all \`accept\` nodes
  --   are down.
  , nodeBalancerNodeMode :: (GHC.Maybe.Maybe NodeBalancerNodeMode')
  -- | nodebalancer_id: The NodeBalancer ID that this Node belongs to.
  , nodeBalancerNodeNodebalancerId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | status: The current status of this node, based on the configured checks of its NodeBalancer Config.
  , nodeBalancerNodeStatus :: (GHC.Maybe.Maybe NodeBalancerNodeStatus')
  -- | weight: Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  , nodeBalancerNodeWeight :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerNode
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= nodeBalancerNodeAddress obj : "config_id" Data.Aeson.Types.ToJSON..= nodeBalancerNodeConfigId obj : "id" Data.Aeson.Types.ToJSON..= nodeBalancerNodeId obj : "label" Data.Aeson.Types.ToJSON..= nodeBalancerNodeLabel obj : "mode" Data.Aeson.Types.ToJSON..= nodeBalancerNodeMode obj : "nodebalancer_id" Data.Aeson.Types.ToJSON..= nodeBalancerNodeNodebalancerId obj : "status" Data.Aeson.Types.ToJSON..= nodeBalancerNodeStatus obj : "weight" Data.Aeson.Types.ToJSON..= nodeBalancerNodeWeight obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= nodeBalancerNodeAddress obj) GHC.Base.<> (("config_id" Data.Aeson.Types.ToJSON..= nodeBalancerNodeConfigId obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= nodeBalancerNodeId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= nodeBalancerNodeLabel obj) GHC.Base.<> (("mode" Data.Aeson.Types.ToJSON..= nodeBalancerNodeMode obj) GHC.Base.<> (("nodebalancer_id" Data.Aeson.Types.ToJSON..= nodeBalancerNodeNodebalancerId obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= nodeBalancerNodeStatus obj) GHC.Base.<> ("weight" Data.Aeson.Types.ToJSON..= nodeBalancerNodeWeight obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerNode
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerNode" (\obj -> (((((((GHC.Base.pure NodeBalancerNode GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "config_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weight"))
-- | Create a new 'NodeBalancerNode' with all required fields.
mkNodeBalancerNode :: NodeBalancerNode
mkNodeBalancerNode = NodeBalancerNode{nodeBalancerNodeAddress = GHC.Maybe.Nothing,
                                      nodeBalancerNodeConfigId = GHC.Maybe.Nothing,
                                      nodeBalancerNodeId = GHC.Maybe.Nothing,
                                      nodeBalancerNodeLabel = GHC.Maybe.Nothing,
                                      nodeBalancerNodeMode = GHC.Maybe.Nothing,
                                      nodeBalancerNodeNodebalancerId = GHC.Maybe.Nothing,
                                      nodeBalancerNodeStatus = GHC.Maybe.Nothing,
                                      nodeBalancerNodeWeight = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.NodeBalancerNode.properties.mode@ in the specification.
-- 
-- The mode this NodeBalancer should use when sending traffic to this backend.
-- * If set to \`accept\` this backend is accepting traffic.
-- * If set to \`reject\` this backend will not receive traffic.
-- * If set to \`drain\` this backend will not receive _new_ traffic, but connections already
--   pinned to it will continue to be routed to it.
-- 
-- * If set to \`backup\`, this backend will only receive traffic if all \`accept\` nodes
--   are down.
data NodeBalancerNodeMode' =
   NodeBalancerNodeMode'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerNodeMode'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerNodeMode'EnumAccept -- ^ Represents the JSON value @"accept"@
  | NodeBalancerNodeMode'EnumReject -- ^ Represents the JSON value @"reject"@
  | NodeBalancerNodeMode'EnumDrain -- ^ Represents the JSON value @"drain"@
  | NodeBalancerNodeMode'EnumBackup -- ^ Represents the JSON value @"backup"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerNodeMode'
    where toJSON (NodeBalancerNodeMode'Other val) = val
          toJSON (NodeBalancerNodeMode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerNodeMode'EnumAccept) = "accept"
          toJSON (NodeBalancerNodeMode'EnumReject) = "reject"
          toJSON (NodeBalancerNodeMode'EnumDrain) = "drain"
          toJSON (NodeBalancerNodeMode'EnumBackup) = "backup"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerNodeMode'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "accept" -> NodeBalancerNodeMode'EnumAccept
                                            | val GHC.Classes.== "reject" -> NodeBalancerNodeMode'EnumReject
                                            | val GHC.Classes.== "drain" -> NodeBalancerNodeMode'EnumDrain
                                            | val GHC.Classes.== "backup" -> NodeBalancerNodeMode'EnumBackup
                                            | GHC.Base.otherwise -> NodeBalancerNodeMode'Other val)
-- | Defines the enum schema located at @components.schemas.NodeBalancerNode.properties.status@ in the specification.
-- 
-- The current status of this node, based on the configured checks of its NodeBalancer Config.
data NodeBalancerNodeStatus' =
   NodeBalancerNodeStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerNodeStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerNodeStatus'EnumUnknown -- ^ Represents the JSON value @"unknown"@
  | NodeBalancerNodeStatus'EnumUP -- ^ Represents the JSON value @"UP"@
  | NodeBalancerNodeStatus'EnumDOWN -- ^ Represents the JSON value @"DOWN"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerNodeStatus'
    where toJSON (NodeBalancerNodeStatus'Other val) = val
          toJSON (NodeBalancerNodeStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerNodeStatus'EnumUnknown) = "unknown"
          toJSON (NodeBalancerNodeStatus'EnumUP) = "UP"
          toJSON (NodeBalancerNodeStatus'EnumDOWN) = "DOWN"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerNodeStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "unknown" -> NodeBalancerNodeStatus'EnumUnknown
                                            | val GHC.Classes.== "UP" -> NodeBalancerNodeStatus'EnumUP
                                            | val GHC.Classes.== "DOWN" -> NodeBalancerNodeStatus'EnumDOWN
                                            | GHC.Base.otherwise -> NodeBalancerNodeStatus'Other val)
