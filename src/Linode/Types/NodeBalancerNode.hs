-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema NodeBalancerNode
module Linode.Types.NodeBalancerNode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema NodeBalancerNode
-- 
-- A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.
data NodeBalancerNode = NodeBalancerNode {
  -- | address: The private IP Address where this backend can be reached. This _must_ be a private IP address.
  nodeBalancerNodeAddress :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | config_id: The NodeBalancer Config ID that this Node belongs to.
  , nodeBalancerNodeConfig_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | id: This node\'s unique ID.
  , nodeBalancerNodeId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The label for this node.  This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_.]{3,32}\'
  , nodeBalancerNodeLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | mode: The mode this NodeBalancer should use when sending traffic to this backend.
  -- * If set to \`accept\` this backend is accepting traffic.
  -- * If set to \`reject\` this backend will not receive traffic.
  -- * If set to \`drain\` this backend will not receive _new_ traffic, but connections already
  --   pinned to it will continue to be routed to it.
  -- 
  -- * If set to \`backup\`, this backend will only receive traffic if all \`accept\` nodes
  --   are down.
  , nodeBalancerNodeMode :: (GHC.Base.Maybe NodeBalancerNodeMode)
  -- | nodebalancer_id: The NodeBalancer ID that this Node belongs to.
  , nodeBalancerNodeNodebalancer_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | status: The current status of this node, based on the configured checks of its NodeBalancer Config.
  , nodeBalancerNodeStatus :: (GHC.Base.Maybe NodeBalancerNodeStatus)
  -- | weight: Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  , nodeBalancerNodeWeight :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerNode
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (nodeBalancerNodeAddress obj) : (Data.Aeson..=) "config_id" (nodeBalancerNodeConfig_id obj) : (Data.Aeson..=) "id" (nodeBalancerNodeId obj) : (Data.Aeson..=) "label" (nodeBalancerNodeLabel obj) : (Data.Aeson..=) "mode" (nodeBalancerNodeMode obj) : (Data.Aeson..=) "nodebalancer_id" (nodeBalancerNodeNodebalancer_id obj) : (Data.Aeson..=) "status" (nodeBalancerNodeStatus obj) : (Data.Aeson..=) "weight" (nodeBalancerNodeWeight obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (nodeBalancerNodeAddress obj) GHC.Base.<> ((Data.Aeson..=) "config_id" (nodeBalancerNodeConfig_id obj) GHC.Base.<> ((Data.Aeson..=) "id" (nodeBalancerNodeId obj) GHC.Base.<> ((Data.Aeson..=) "label" (nodeBalancerNodeLabel obj) GHC.Base.<> ((Data.Aeson..=) "mode" (nodeBalancerNodeMode obj) GHC.Base.<> ((Data.Aeson..=) "nodebalancer_id" (nodeBalancerNodeNodebalancer_id obj) GHC.Base.<> ((Data.Aeson..=) "status" (nodeBalancerNodeStatus obj) GHC.Base.<> (Data.Aeson..=) "weight" (nodeBalancerNodeWeight obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerNode
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerNode" (\obj -> (((((((GHC.Base.pure NodeBalancerNode GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "config_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weight"))
-- | Defines the enum schema NodeBalancerNodeMode
-- 
-- The mode this NodeBalancer should use when sending traffic to this backend.
-- * If set to \`accept\` this backend is accepting traffic.
-- * If set to \`reject\` this backend will not receive traffic.
-- * If set to \`drain\` this backend will not receive _new_ traffic, but connections already
--   pinned to it will continue to be routed to it.
-- 
-- * If set to \`backup\`, this backend will only receive traffic if all \`accept\` nodes
--   are down.
data NodeBalancerNodeMode
    = NodeBalancerNodeModeEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerNodeModeEnumTyped Data.Text.Internal.Text
    | NodeBalancerNodeModeEnumString_accept
    | NodeBalancerNodeModeEnumString_backup
    | NodeBalancerNodeModeEnumString_drain
    | NodeBalancerNodeModeEnumString_reject
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerNodeMode
    where toJSON (NodeBalancerNodeModeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerNodeModeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerNodeModeEnumString_accept) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accept"
          toJSON (NodeBalancerNodeModeEnumString_backup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup"
          toJSON (NodeBalancerNodeModeEnumString_drain) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drain"
          toJSON (NodeBalancerNodeModeEnumString_reject) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reject"
instance Data.Aeson.FromJSON NodeBalancerNodeMode
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accept")
                                          then NodeBalancerNodeModeEnumString_accept
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup")
                                                then NodeBalancerNodeModeEnumString_backup
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drain")
                                                      then NodeBalancerNodeModeEnumString_drain
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reject")
                                                            then NodeBalancerNodeModeEnumString_reject
                                                            else NodeBalancerNodeModeEnumOther val)
-- | Defines the enum schema NodeBalancerNodeStatus
-- 
-- The current status of this node, based on the configured checks of its NodeBalancer Config.
data NodeBalancerNodeStatus
    = NodeBalancerNodeStatusEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerNodeStatusEnumTyped Data.Text.Internal.Text
    | NodeBalancerNodeStatusEnumString_DOWN
    | NodeBalancerNodeStatusEnumString_UP
    | NodeBalancerNodeStatusEnumString_unknown
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerNodeStatus
    where toJSON (NodeBalancerNodeStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerNodeStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerNodeStatusEnumString_DOWN) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DOWN"
          toJSON (NodeBalancerNodeStatusEnumString_UP) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "UP"
          toJSON (NodeBalancerNodeStatusEnumString_unknown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown"
instance Data.Aeson.FromJSON NodeBalancerNodeStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "DOWN")
                                          then NodeBalancerNodeStatusEnumString_DOWN
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "UP")
                                                then NodeBalancerNodeStatusEnumString_UP
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown")
                                                      then NodeBalancerNodeStatusEnumString_unknown
                                                      else NodeBalancerNodeStatusEnumOther val)