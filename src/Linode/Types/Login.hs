-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Login
module Linode.Types.Login where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Login@ in the specification.
-- 
-- An object representing a previous successful login for a User.
data Login = Login {
  -- | datetime: When the login was initiated.
  loginDatetime :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID of this login object.
  , loginId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | ip: The remote IP address that requested the login.
  , loginIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | restricted: True if the User that was logged into was a restricted User, false otherwise.
  , loginRestricted :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | username: The username of the User that was logged into.
  , loginUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Login
    where toJSON obj = Data.Aeson.Types.Internal.object ("datetime" Data.Aeson.Types.ToJSON..= loginDatetime obj : "id" Data.Aeson.Types.ToJSON..= loginId obj : "ip" Data.Aeson.Types.ToJSON..= loginIp obj : "restricted" Data.Aeson.Types.ToJSON..= loginRestricted obj : "username" Data.Aeson.Types.ToJSON..= loginUsername obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("datetime" Data.Aeson.Types.ToJSON..= loginDatetime obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= loginId obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= loginIp obj) GHC.Base.<> (("restricted" Data.Aeson.Types.ToJSON..= loginRestricted obj) GHC.Base.<> ("username" Data.Aeson.Types.ToJSON..= loginUsername obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON Login
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Login" (\obj -> ((((GHC.Base.pure Login GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "datetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "restricted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))
-- | Create a new 'Login' with all required fields.
mkLogin :: Login
mkLogin = Login{loginDatetime = GHC.Maybe.Nothing,
                loginId = GHC.Maybe.Nothing,
                loginIp = GHC.Maybe.Nothing,
                loginRestricted = GHC.Maybe.Nothing,
                loginUsername = GHC.Maybe.Nothing}
