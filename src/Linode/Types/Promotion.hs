-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Promotion
module Linode.Types.Promotion where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Promotion
-- 
-- Promotions generally
-- offer a set amount of credit that can be used toward your Linode
-- services, and the promotion expires after a specified date. As well,
-- a monthly cap on the promotional offer is set.
-- 
-- Simply put, a promotion offers a certain amount of credit every
-- month, until either the expiration date is passed, or until the total
-- promotional credit is used, whichever comes first.
data Promotion = Promotion {
  -- | credit_monthly_cap: The amount available to spend per month.
  promotionCredit_monthly_cap :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | credit_remaining: The total amount of credit left for this promotion.
  , promotionCredit_remaining :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | description: A detailed description of this promotion.
  , promotionDescription :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | expire_dt: When this promotion\'s credits expire.
  , promotionExpire_dt :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | image_url: The location of an image for this promotion.
  , promotionImage_url :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | service_type: The service to which this promotion applies.
  , promotionService_type :: (GHC.Base.Maybe PromotionService_type)
  -- | summary: Short details of this promotion.
  , promotionSummary :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | this_month_credit_remaining: The amount of credit left for this month for this promotion.
  , promotionThis_month_credit_remaining :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Promotion
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "credit_monthly_cap" (promotionCredit_monthly_cap obj) : (Data.Aeson..=) "credit_remaining" (promotionCredit_remaining obj) : (Data.Aeson..=) "description" (promotionDescription obj) : (Data.Aeson..=) "expire_dt" (promotionExpire_dt obj) : (Data.Aeson..=) "image_url" (promotionImage_url obj) : (Data.Aeson..=) "service_type" (promotionService_type obj) : (Data.Aeson..=) "summary" (promotionSummary obj) : (Data.Aeson..=) "this_month_credit_remaining" (promotionThis_month_credit_remaining obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "credit_monthly_cap" (promotionCredit_monthly_cap obj) GHC.Base.<> ((Data.Aeson..=) "credit_remaining" (promotionCredit_remaining obj) GHC.Base.<> ((Data.Aeson..=) "description" (promotionDescription obj) GHC.Base.<> ((Data.Aeson..=) "expire_dt" (promotionExpire_dt obj) GHC.Base.<> ((Data.Aeson..=) "image_url" (promotionImage_url obj) GHC.Base.<> ((Data.Aeson..=) "service_type" (promotionService_type obj) GHC.Base.<> ((Data.Aeson..=) "summary" (promotionSummary obj) GHC.Base.<> (Data.Aeson..=) "this_month_credit_remaining" (promotionThis_month_credit_remaining obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Promotion
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Promotion" (\obj -> (((((((GHC.Base.pure Promotion GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_monthly_cap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_remaining")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expire_dt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "summary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "this_month_credit_remaining"))
-- | Defines the enum schema PromotionService_type
-- 
-- The service to which this promotion applies.
data PromotionService_type
    = PromotionService_typeEnumOther Data.Aeson.Types.Internal.Value
    | PromotionService_typeEnumTyped Data.Text.Internal.Text
    | PromotionService_typeEnumString_all
    | PromotionService_typeEnumString_backup
    | PromotionService_typeEnumString_blockstorage
    | PromotionService_typeEnumString_db_mysql
    | PromotionService_typeEnumString_ip_v4
    | PromotionService_typeEnumString_linode
    | PromotionService_typeEnumString_linode_disk
    | PromotionService_typeEnumString_linode_memory
    | PromotionService_typeEnumString_longview
    | PromotionService_typeEnumString_managed
    | PromotionService_typeEnumString_nodebalancer
    | PromotionService_typeEnumString_objectstorage
    | PromotionService_typeEnumString_transfer_tx
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PromotionService_type
    where toJSON (PromotionService_typeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PromotionService_typeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PromotionService_typeEnumString_all) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "all"
          toJSON (PromotionService_typeEnumString_backup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup"
          toJSON (PromotionService_typeEnumString_blockstorage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blockstorage"
          toJSON (PromotionService_typeEnumString_db_mysql) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "db_mysql"
          toJSON (PromotionService_typeEnumString_ip_v4) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip_v4"
          toJSON (PromotionService_typeEnumString_linode) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode"
          toJSON (PromotionService_typeEnumString_linode_disk) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_disk"
          toJSON (PromotionService_typeEnumString_linode_memory) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_memory"
          toJSON (PromotionService_typeEnumString_longview) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview"
          toJSON (PromotionService_typeEnumString_managed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed"
          toJSON (PromotionService_typeEnumString_nodebalancer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer"
          toJSON (PromotionService_typeEnumString_objectstorage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "objectstorage"
          toJSON (PromotionService_typeEnumString_transfer_tx) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_tx"
instance Data.Aeson.FromJSON PromotionService_type
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "all")
                                          then PromotionService_typeEnumString_all
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup")
                                                then PromotionService_typeEnumString_backup
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blockstorage")
                                                      then PromotionService_typeEnumString_blockstorage
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "db_mysql")
                                                            then PromotionService_typeEnumString_db_mysql
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip_v4")
                                                                  then PromotionService_typeEnumString_ip_v4
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode")
                                                                        then PromotionService_typeEnumString_linode
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_disk")
                                                                              then PromotionService_typeEnumString_linode_disk
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_memory")
                                                                                    then PromotionService_typeEnumString_linode_memory
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview")
                                                                                          then PromotionService_typeEnumString_longview
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed")
                                                                                                then PromotionService_typeEnumString_managed
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer")
                                                                                                      then PromotionService_typeEnumString_nodebalancer
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "objectstorage")
                                                                                                            then PromotionService_typeEnumString_objectstorage
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_tx")
                                                                                                                  then PromotionService_typeEnumString_transfer_tx
                                                                                                                  else PromotionService_typeEnumOther val)