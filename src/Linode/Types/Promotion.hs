-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Promotion
module Linode.Types.Promotion where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Promotion@ in the specification.
-- 
-- Promotions generally
-- offer a set amount of credit that can be used toward your Linode
-- services, and the promotion expires after a specified date. As well,
-- a monthly cap on the promotional offer is set.
-- 
-- Simply put, a promotion offers a certain amount of credit every
-- month, until either the expiration date is passed, or until the total
-- promotional credit is used, whichever comes first.
data Promotion = Promotion {
  -- | credit_monthly_cap: The amount available to spend per month.
  promotionCreditMonthlyCap :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | credit_remaining: The total amount of credit left for this promotion.
  , promotionCreditRemaining :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | description: A detailed description of this promotion.
  , promotionDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expire_dt: When this promotion\'s credits expire.
  , promotionExpireDt :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | image_url: The location of an image for this promotion.
  , promotionImageUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | service_type: The service to which this promotion applies.
  , promotionServiceType :: (GHC.Maybe.Maybe PromotionServiceType')
  -- | summary: Short details of this promotion.
  , promotionSummary :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | this_month_credit_remaining: The amount of credit left for this month for this promotion.
  , promotionThisMonthCreditRemaining :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Promotion
    where toJSON obj = Data.Aeson.Types.Internal.object ("credit_monthly_cap" Data.Aeson.Types.ToJSON..= promotionCreditMonthlyCap obj : "credit_remaining" Data.Aeson.Types.ToJSON..= promotionCreditRemaining obj : "description" Data.Aeson.Types.ToJSON..= promotionDescription obj : "expire_dt" Data.Aeson.Types.ToJSON..= promotionExpireDt obj : "image_url" Data.Aeson.Types.ToJSON..= promotionImageUrl obj : "service_type" Data.Aeson.Types.ToJSON..= promotionServiceType obj : "summary" Data.Aeson.Types.ToJSON..= promotionSummary obj : "this_month_credit_remaining" Data.Aeson.Types.ToJSON..= promotionThisMonthCreditRemaining obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("credit_monthly_cap" Data.Aeson.Types.ToJSON..= promotionCreditMonthlyCap obj) GHC.Base.<> (("credit_remaining" Data.Aeson.Types.ToJSON..= promotionCreditRemaining obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= promotionDescription obj) GHC.Base.<> (("expire_dt" Data.Aeson.Types.ToJSON..= promotionExpireDt obj) GHC.Base.<> (("image_url" Data.Aeson.Types.ToJSON..= promotionImageUrl obj) GHC.Base.<> (("service_type" Data.Aeson.Types.ToJSON..= promotionServiceType obj) GHC.Base.<> (("summary" Data.Aeson.Types.ToJSON..= promotionSummary obj) GHC.Base.<> ("this_month_credit_remaining" Data.Aeson.Types.ToJSON..= promotionThisMonthCreditRemaining obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Promotion
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Promotion" (\obj -> (((((((GHC.Base.pure Promotion GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_monthly_cap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_remaining")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expire_dt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "summary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "this_month_credit_remaining"))
-- | Create a new 'Promotion' with all required fields.
mkPromotion :: Promotion
mkPromotion = Promotion{promotionCreditMonthlyCap = GHC.Maybe.Nothing,
                        promotionCreditRemaining = GHC.Maybe.Nothing,
                        promotionDescription = GHC.Maybe.Nothing,
                        promotionExpireDt = GHC.Maybe.Nothing,
                        promotionImageUrl = GHC.Maybe.Nothing,
                        promotionServiceType = GHC.Maybe.Nothing,
                        promotionSummary = GHC.Maybe.Nothing,
                        promotionThisMonthCreditRemaining = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Promotion.properties.service_type@ in the specification.
-- 
-- The service to which this promotion applies.
data PromotionServiceType' =
   PromotionServiceType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PromotionServiceType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PromotionServiceType'EnumAll -- ^ Represents the JSON value @"all"@
  | PromotionServiceType'EnumBackup -- ^ Represents the JSON value @"backup"@
  | PromotionServiceType'EnumBlockstorage -- ^ Represents the JSON value @"blockstorage"@
  | PromotionServiceType'EnumDbMysql -- ^ Represents the JSON value @"db_mysql"@
  | PromotionServiceType'EnumIpV4 -- ^ Represents the JSON value @"ip_v4"@
  | PromotionServiceType'EnumLinode -- ^ Represents the JSON value @"linode"@
  | PromotionServiceType'EnumLinodeDisk -- ^ Represents the JSON value @"linode_disk"@
  | PromotionServiceType'EnumLinodeMemory -- ^ Represents the JSON value @"linode_memory"@
  | PromotionServiceType'EnumLongview -- ^ Represents the JSON value @"longview"@
  | PromotionServiceType'EnumManaged -- ^ Represents the JSON value @"managed"@
  | PromotionServiceType'EnumNodebalancer -- ^ Represents the JSON value @"nodebalancer"@
  | PromotionServiceType'EnumObjectstorage -- ^ Represents the JSON value @"objectstorage"@
  | PromotionServiceType'EnumTransferTx -- ^ Represents the JSON value @"transfer_tx"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PromotionServiceType'
    where toJSON (PromotionServiceType'Other val) = val
          toJSON (PromotionServiceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PromotionServiceType'EnumAll) = "all"
          toJSON (PromotionServiceType'EnumBackup) = "backup"
          toJSON (PromotionServiceType'EnumBlockstorage) = "blockstorage"
          toJSON (PromotionServiceType'EnumDbMysql) = "db_mysql"
          toJSON (PromotionServiceType'EnumIpV4) = "ip_v4"
          toJSON (PromotionServiceType'EnumLinode) = "linode"
          toJSON (PromotionServiceType'EnumLinodeDisk) = "linode_disk"
          toJSON (PromotionServiceType'EnumLinodeMemory) = "linode_memory"
          toJSON (PromotionServiceType'EnumLongview) = "longview"
          toJSON (PromotionServiceType'EnumManaged) = "managed"
          toJSON (PromotionServiceType'EnumNodebalancer) = "nodebalancer"
          toJSON (PromotionServiceType'EnumObjectstorage) = "objectstorage"
          toJSON (PromotionServiceType'EnumTransferTx) = "transfer_tx"
instance Data.Aeson.Types.FromJSON.FromJSON PromotionServiceType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "all" -> PromotionServiceType'EnumAll
                                            | val GHC.Classes.== "backup" -> PromotionServiceType'EnumBackup
                                            | val GHC.Classes.== "blockstorage" -> PromotionServiceType'EnumBlockstorage
                                            | val GHC.Classes.== "db_mysql" -> PromotionServiceType'EnumDbMysql
                                            | val GHC.Classes.== "ip_v4" -> PromotionServiceType'EnumIpV4
                                            | val GHC.Classes.== "linode" -> PromotionServiceType'EnumLinode
                                            | val GHC.Classes.== "linode_disk" -> PromotionServiceType'EnumLinodeDisk
                                            | val GHC.Classes.== "linode_memory" -> PromotionServiceType'EnumLinodeMemory
                                            | val GHC.Classes.== "longview" -> PromotionServiceType'EnumLongview
                                            | val GHC.Classes.== "managed" -> PromotionServiceType'EnumManaged
                                            | val GHC.Classes.== "nodebalancer" -> PromotionServiceType'EnumNodebalancer
                                            | val GHC.Classes.== "objectstorage" -> PromotionServiceType'EnumObjectstorage
                                            | val GHC.Classes.== "transfer_tx" -> PromotionServiceType'EnumTransferTx
                                            | GHC.Base.otherwise -> PromotionServiceType'Other val)
