-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema RescueDevices
module Linode.Types.RescueDevices where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.Device

-- | Defines the data type for the schema RescueDevices
-- 
-- 
data RescueDevices = RescueDevices {
  -- | sda: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  rescueDevicesSda :: (GHC.Base.Maybe Device)
  -- | sdb: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , rescueDevicesSdb :: (GHC.Base.Maybe Device)
  -- | sdc: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , rescueDevicesSdc :: (GHC.Base.Maybe Device)
  -- | sdd: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , rescueDevicesSdd :: (GHC.Base.Maybe Device)
  -- | sde: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , rescueDevicesSde :: (GHC.Base.Maybe Device)
  -- | sdf: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , rescueDevicesSdf :: (GHC.Base.Maybe Device)
  -- | sdg: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , rescueDevicesSdg :: (GHC.Base.Maybe Device)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON RescueDevices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "sda" (rescueDevicesSda obj) : (Data.Aeson..=) "sdb" (rescueDevicesSdb obj) : (Data.Aeson..=) "sdc" (rescueDevicesSdc obj) : (Data.Aeson..=) "sdd" (rescueDevicesSdd obj) : (Data.Aeson..=) "sde" (rescueDevicesSde obj) : (Data.Aeson..=) "sdf" (rescueDevicesSdf obj) : (Data.Aeson..=) "sdg" (rescueDevicesSdg obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "sda" (rescueDevicesSda obj) GHC.Base.<> ((Data.Aeson..=) "sdb" (rescueDevicesSdb obj) GHC.Base.<> ((Data.Aeson..=) "sdc" (rescueDevicesSdc obj) GHC.Base.<> ((Data.Aeson..=) "sdd" (rescueDevicesSdd obj) GHC.Base.<> ((Data.Aeson..=) "sde" (rescueDevicesSde obj) GHC.Base.<> ((Data.Aeson..=) "sdf" (rescueDevicesSdf obj) GHC.Base.<> (Data.Aeson..=) "sdg" (rescueDevicesSdg obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON RescueDevices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RescueDevices" (\obj -> ((((((GHC.Base.pure RescueDevices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sda")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sde")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdg"))