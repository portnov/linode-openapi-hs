-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema NodeBalancer
module Linode.Types.NodeBalancer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema NodeBalancer
-- 
-- Linode\'s load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer\'s ip address, the NodeBalancer will handle routing individual requests to backends.
data NodeBalancer = NodeBalancer {
  -- | client_conn_throttle: Throttle connections per second.  Set to 0 (zero) to disable throttling.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 20.0
  -- * Minimum  of 0.0
  nodeBalancerClient_conn_throttle :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | created: When this NodeBalancer was created.
  , nodeBalancerCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | hostname: This NodeBalancer\'s hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
  , nodeBalancerHostname :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: This NodeBalancer\'s unique ID.
  , nodeBalancerId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | ipv4: This NodeBalancer\'s public IPv4 address.
  , nodeBalancerIpv4 :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ipv6: This NodeBalancer\'s public IPv6 address.
  , nodeBalancerIpv6 :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: This NodeBalancer\'s label. These must be unique on your Account.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_]{3,32}\'
  , nodeBalancerLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
  , nodeBalancerRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | tags: An array of Tags applied to this object.  Tags are for organizational purposes only.
  , nodeBalancerTags :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | transfer: Information about the amount of transfer this NodeBalancer has had so far this month.
  , nodeBalancerTransfer :: (GHC.Base.Maybe NodeBalancerTransfer)
  -- | updated: When this NodeBalancer was last updated.
  , nodeBalancerUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "client_conn_throttle" (nodeBalancerClient_conn_throttle obj) : (Data.Aeson..=) "created" (nodeBalancerCreated obj) : (Data.Aeson..=) "hostname" (nodeBalancerHostname obj) : (Data.Aeson..=) "id" (nodeBalancerId obj) : (Data.Aeson..=) "ipv4" (nodeBalancerIpv4 obj) : (Data.Aeson..=) "ipv6" (nodeBalancerIpv6 obj) : (Data.Aeson..=) "label" (nodeBalancerLabel obj) : (Data.Aeson..=) "region" (nodeBalancerRegion obj) : (Data.Aeson..=) "tags" (nodeBalancerTags obj) : (Data.Aeson..=) "transfer" (nodeBalancerTransfer obj) : (Data.Aeson..=) "updated" (nodeBalancerUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "client_conn_throttle" (nodeBalancerClient_conn_throttle obj) GHC.Base.<> ((Data.Aeson..=) "created" (nodeBalancerCreated obj) GHC.Base.<> ((Data.Aeson..=) "hostname" (nodeBalancerHostname obj) GHC.Base.<> ((Data.Aeson..=) "id" (nodeBalancerId obj) GHC.Base.<> ((Data.Aeson..=) "ipv4" (nodeBalancerIpv4 obj) GHC.Base.<> ((Data.Aeson..=) "ipv6" (nodeBalancerIpv6 obj) GHC.Base.<> ((Data.Aeson..=) "label" (nodeBalancerLabel obj) GHC.Base.<> ((Data.Aeson..=) "region" (nodeBalancerRegion obj) GHC.Base.<> ((Data.Aeson..=) "tags" (nodeBalancerTags obj) GHC.Base.<> ((Data.Aeson..=) "transfer" (nodeBalancerTransfer obj) GHC.Base.<> (Data.Aeson..=) "updated" (nodeBalancerUpdated obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancer" (\obj -> ((((((((((GHC.Base.pure NodeBalancer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_conn_throttle")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hostname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ipv6")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema NodeBalancerTransfer
-- 
-- Information about the amount of transfer this NodeBalancer has had so far this month.
data NodeBalancerTransfer = NodeBalancerTransfer {
  -- | in: The total outbound transfer, in MB, used for this NodeBalancer this month.
  nodeBalancerTransferIn :: (GHC.Base.Maybe GHC.Types.Double)
  -- | out: The total inbound transfer, in MB, used for this NodeBalancer this month.
  , nodeBalancerTransferOut :: (GHC.Base.Maybe GHC.Types.Double)
  -- | total: The total transfer, in MB, used by this NodeBalancer this month.
  , nodeBalancerTransferTotal :: (GHC.Base.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerTransfer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "in" (nodeBalancerTransferIn obj) : (Data.Aeson..=) "out" (nodeBalancerTransferOut obj) : (Data.Aeson..=) "total" (nodeBalancerTransferTotal obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "in" (nodeBalancerTransferIn obj) GHC.Base.<> ((Data.Aeson..=) "out" (nodeBalancerTransferOut obj) GHC.Base.<> (Data.Aeson..=) "total" (nodeBalancerTransferTotal obj)))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerTransfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerTransfer" (\obj -> ((GHC.Base.pure NodeBalancerTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total"))