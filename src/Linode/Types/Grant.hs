-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Grant
module Linode.Types.Grant where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Grant@ in the specification.
-- 
-- Represents the level of access a restricted User has to a specific resource on the Account.
data Grant = Grant {
  -- | id: The ID of the entity this grant applies to.
  grantId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The current label of the entity this grant applies to, for display purposes.
  , grantLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | permissions: The level of access this User has to this entity.  If null, this User has no access.
  , grantPermissions :: (GHC.Maybe.Maybe GrantPermissions')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Grant
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= grantId obj : "label" Data.Aeson.Types.ToJSON..= grantLabel obj : "permissions" Data.Aeson.Types.ToJSON..= grantPermissions obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= grantId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= grantLabel obj) GHC.Base.<> ("permissions" Data.Aeson.Types.ToJSON..= grantPermissions obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Grant
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Grant" (\obj -> ((GHC.Base.pure Grant GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "permissions"))
-- | Create a new 'Grant' with all required fields.
mkGrant :: Grant
mkGrant = Grant{grantId = GHC.Maybe.Nothing,
                grantLabel = GHC.Maybe.Nothing,
                grantPermissions = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Grant.properties.permissions@ in the specification.
-- 
-- The level of access this User has to this entity.  If null, this User has no access.
data GrantPermissions' =
   GrantPermissions'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GrantPermissions'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GrantPermissions'EnumReadOnly -- ^ Represents the JSON value @"read_only"@
  | GrantPermissions'EnumReadWrite -- ^ Represents the JSON value @"read_write"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GrantPermissions'
    where toJSON (GrantPermissions'Other val) = val
          toJSON (GrantPermissions'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GrantPermissions'EnumReadOnly) = "read_only"
          toJSON (GrantPermissions'EnumReadWrite) = "read_write"
instance Data.Aeson.Types.FromJSON.FromJSON GrantPermissions'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "read_only" -> GrantPermissions'EnumReadOnly
                                            | val GHC.Classes.== "read_write" -> GrantPermissions'EnumReadWrite
                                            | GHC.Base.otherwise -> GrantPermissions'Other val)
