-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Account
module Linode.Types.Account where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.Promotion

-- | Defines the data type for the schema Account
-- 
-- Account object
data Account = Account {
  -- | active_promotions
  accountActive_promotions :: (GHC.Base.Maybe ([] Promotion))
  -- | active_since: The datetime of when the account was activated.
  , accountActive_since :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | address_1: First line of this Account\'s billing address.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  , accountAddress_1 :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | address_2: Second line of this Account\'s billing address.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  , accountAddress_2 :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | balance: This Account\'s balance, in US dollars.
  , accountBalance :: (GHC.Base.Maybe GHC.Types.Double)
  -- | balance_uninvoiced: This Account\'s current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.
  , accountBalance_uninvoiced :: (GHC.Base.Maybe GHC.Types.Double)
  -- | capabilities: A list of capabilities your account supports.
  , accountCapabilities :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | city: The city for this Account\'s billing address.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 24
  , accountCity :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | company: The company name associated with this Account.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 128
  , accountCompany :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | country: The two-letter ISO 3166 country code of this Account\'s billing address.
  , accountCountry :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | credit_card: Credit Card information associated with this Account.
  , accountCredit_card :: (GHC.Base.Maybe AccountCredit_card)
  -- | email: The email address of the person associated with this Account.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 128
  , accountEmail :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | euuid: An external unique identifier for this account.
  , accountEuuid :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | first_name: The first name of the person associated with this Account.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  , accountFirst_name :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | last_name: The last name of the person associated with this Account.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  , accountLast_name :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | phone: The phone number associated with this Account.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  , accountPhone :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | state: If billing address is in the United States, this is the State portion of the Account\'s billing address. If the address is outside the US, this is the Province associated with the Account\'s billing address.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 24
  , accountState :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | tax_id: The tax identification number associated with this Account, for tax calculations in some countries. If you do not live in a country that collects tax, this should be \`null\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  , accountTax_id :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | zip: The zip code of this Account\'s billing address. The following restrictions apply:
  -- 
  -- - May only consist of letters, numbers, spaces, and hyphens.
  -- - Must not contain more than 9 letter or number characters.
  , accountZip :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Account
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active_promotions" (accountActive_promotions obj) : (Data.Aeson..=) "active_since" (accountActive_since obj) : (Data.Aeson..=) "address_1" (accountAddress_1 obj) : (Data.Aeson..=) "address_2" (accountAddress_2 obj) : (Data.Aeson..=) "balance" (accountBalance obj) : (Data.Aeson..=) "balance_uninvoiced" (accountBalance_uninvoiced obj) : (Data.Aeson..=) "capabilities" (accountCapabilities obj) : (Data.Aeson..=) "city" (accountCity obj) : (Data.Aeson..=) "company" (accountCompany obj) : (Data.Aeson..=) "country" (accountCountry obj) : (Data.Aeson..=) "credit_card" (accountCredit_card obj) : (Data.Aeson..=) "email" (accountEmail obj) : (Data.Aeson..=) "euuid" (accountEuuid obj) : (Data.Aeson..=) "first_name" (accountFirst_name obj) : (Data.Aeson..=) "last_name" (accountLast_name obj) : (Data.Aeson..=) "phone" (accountPhone obj) : (Data.Aeson..=) "state" (accountState obj) : (Data.Aeson..=) "tax_id" (accountTax_id obj) : (Data.Aeson..=) "zip" (accountZip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active_promotions" (accountActive_promotions obj) GHC.Base.<> ((Data.Aeson..=) "active_since" (accountActive_since obj) GHC.Base.<> ((Data.Aeson..=) "address_1" (accountAddress_1 obj) GHC.Base.<> ((Data.Aeson..=) "address_2" (accountAddress_2 obj) GHC.Base.<> ((Data.Aeson..=) "balance" (accountBalance obj) GHC.Base.<> ((Data.Aeson..=) "balance_uninvoiced" (accountBalance_uninvoiced obj) GHC.Base.<> ((Data.Aeson..=) "capabilities" (accountCapabilities obj) GHC.Base.<> ((Data.Aeson..=) "city" (accountCity obj) GHC.Base.<> ((Data.Aeson..=) "company" (accountCompany obj) GHC.Base.<> ((Data.Aeson..=) "country" (accountCountry obj) GHC.Base.<> ((Data.Aeson..=) "credit_card" (accountCredit_card obj) GHC.Base.<> ((Data.Aeson..=) "email" (accountEmail obj) GHC.Base.<> ((Data.Aeson..=) "euuid" (accountEuuid obj) GHC.Base.<> ((Data.Aeson..=) "first_name" (accountFirst_name obj) GHC.Base.<> ((Data.Aeson..=) "last_name" (accountLast_name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (accountPhone obj) GHC.Base.<> ((Data.Aeson..=) "state" (accountState obj) GHC.Base.<> ((Data.Aeson..=) "tax_id" (accountTax_id obj) GHC.Base.<> (Data.Aeson..=) "zip" (accountZip obj)))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Account
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Account" (\obj -> ((((((((((((((((((GHC.Base.pure Account GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active_promotions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active_since")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_uninvoiced")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "euuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "zip"))
-- | Defines the data type for the schema AccountCredit_card
-- 
-- Credit Card information associated with this Account.
data AccountCredit_card = AccountCredit_card {
  -- | expiry: The expiration month and year of the credit card.
  accountCredit_cardExpiry :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | last_four: The last four digits of the credit card associated with this Account.
  , accountCredit_cardLast_four :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountCredit_card
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "expiry" (accountCredit_cardExpiry obj) : (Data.Aeson..=) "last_four" (accountCredit_cardLast_four obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "expiry" (accountCredit_cardExpiry obj) GHC.Base.<> (Data.Aeson..=) "last_four" (accountCredit_cardLast_four obj))
instance Data.Aeson.Types.FromJSON.FromJSON AccountCredit_card
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountCredit_card" (\obj -> (GHC.Base.pure AccountCredit_card GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_four"))