-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema FirewallPropertiesRules
module Linode.Types.FirewallPropertiesRules where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias
import {-# SOURCE #-} Linode.Types.FirewallRuleConfig

-- | Defines the object schema located at @components.schemas.FirewallPropertiesRules@ in the specification.
-- 
-- The inbound and outbound access rules to apply to the Firewall.
-- 
-- A Firewall may have up to 25 rules across its inbound and outbound rulesets.
data FirewallPropertiesRules = FirewallPropertiesRules {
  -- | inbound: The inbound rules for the firewall, as a JSON array.
  firewallPropertiesRulesInbound :: (GHC.Maybe.Maybe ([FirewallRuleConfig]))
  -- | inbound_policy: The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
  , firewallPropertiesRulesInboundPolicy :: (GHC.Maybe.Maybe FirewallPropertiesRulesInboundPolicy')
  -- | outbound: The outbound rules for the firewall, as a JSON array.
  , firewallPropertiesRulesOutbound :: (GHC.Maybe.Maybe ([FirewallRuleConfig]))
  -- | outbound_policy: The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
  , firewallPropertiesRulesOutboundPolicy :: (GHC.Maybe.Maybe FirewallPropertiesRulesOutboundPolicy')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallPropertiesRules
    where toJSON obj = Data.Aeson.Types.Internal.object ("inbound" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesInbound obj : "inbound_policy" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesInboundPolicy obj : "outbound" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesOutbound obj : "outbound_policy" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesOutboundPolicy obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("inbound" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesInbound obj) GHC.Base.<> (("inbound_policy" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesInboundPolicy obj) GHC.Base.<> (("outbound" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesOutbound obj) GHC.Base.<> ("outbound_policy" Data.Aeson.Types.ToJSON..= firewallPropertiesRulesOutboundPolicy obj))))
instance Data.Aeson.Types.FromJSON.FromJSON FirewallPropertiesRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FirewallPropertiesRules" (\obj -> (((GHC.Base.pure FirewallPropertiesRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outbound_policy"))
-- | Create a new 'FirewallPropertiesRules' with all required fields.
mkFirewallPropertiesRules :: FirewallPropertiesRules
mkFirewallPropertiesRules = FirewallPropertiesRules{firewallPropertiesRulesInbound = GHC.Maybe.Nothing,
                                                    firewallPropertiesRulesInboundPolicy = GHC.Maybe.Nothing,
                                                    firewallPropertiesRulesOutbound = GHC.Maybe.Nothing,
                                                    firewallPropertiesRulesOutboundPolicy = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.FirewallPropertiesRules.properties.inbound_policy@ in the specification.
-- 
-- The default behavior for inbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`inbound.action\` property of the Firewall Rule.
data FirewallPropertiesRulesInboundPolicy' =
   FirewallPropertiesRulesInboundPolicy'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | FirewallPropertiesRulesInboundPolicy'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | FirewallPropertiesRulesInboundPolicy'EnumACCEPT -- ^ Represents the JSON value @"ACCEPT"@
  | FirewallPropertiesRulesInboundPolicy'EnumDROP -- ^ Represents the JSON value @"DROP"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallPropertiesRulesInboundPolicy'
    where toJSON (FirewallPropertiesRulesInboundPolicy'Other val) = val
          toJSON (FirewallPropertiesRulesInboundPolicy'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (FirewallPropertiesRulesInboundPolicy'EnumACCEPT) = "ACCEPT"
          toJSON (FirewallPropertiesRulesInboundPolicy'EnumDROP) = "DROP"
instance Data.Aeson.Types.FromJSON.FromJSON FirewallPropertiesRulesInboundPolicy'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ACCEPT" -> FirewallPropertiesRulesInboundPolicy'EnumACCEPT
                                            | val GHC.Classes.== "DROP" -> FirewallPropertiesRulesInboundPolicy'EnumDROP
                                            | GHC.Base.otherwise -> FirewallPropertiesRulesInboundPolicy'Other val)
-- | Defines the enum schema located at @components.schemas.FirewallPropertiesRules.properties.outbound_policy@ in the specification.
-- 
-- The default behavior for outbound traffic. This setting can be overridden by [updating](\/docs\/api\/networking\/\#firewall-rules-update) the \`outbound.action\` property of the Firewall Rule.
data FirewallPropertiesRulesOutboundPolicy' =
   FirewallPropertiesRulesOutboundPolicy'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | FirewallPropertiesRulesOutboundPolicy'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | FirewallPropertiesRulesOutboundPolicy'EnumACCEPT -- ^ Represents the JSON value @"ACCEPT"@
  | FirewallPropertiesRulesOutboundPolicy'EnumDROP -- ^ Represents the JSON value @"DROP"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FirewallPropertiesRulesOutboundPolicy'
    where toJSON (FirewallPropertiesRulesOutboundPolicy'Other val) = val
          toJSON (FirewallPropertiesRulesOutboundPolicy'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (FirewallPropertiesRulesOutboundPolicy'EnumACCEPT) = "ACCEPT"
          toJSON (FirewallPropertiesRulesOutboundPolicy'EnumDROP) = "DROP"
instance Data.Aeson.Types.FromJSON.FromJSON FirewallPropertiesRulesOutboundPolicy'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ACCEPT" -> FirewallPropertiesRulesOutboundPolicy'EnumACCEPT
                                            | val GHC.Classes.== "DROP" -> FirewallPropertiesRulesOutboundPolicy'EnumDROP
                                            | GHC.Base.otherwise -> FirewallPropertiesRulesOutboundPolicy'Other val)
