-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LKENodeStatus
module Linode.Types.LKENodeStatus where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LKENodeStatus@ in the specification.
-- 
-- Status information for a Node which is a member of a Kubernetes cluster.
data LKENodeStatus = LKENodeStatus {
  -- | id: The Node\'s ID.
  lKENodeStatusId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | instance_id: The Linode\'s ID. When no Linode is currently provisioned for this Node, this will be null.
  , lKENodeStatusInstanceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status: The Node\'s status as it pertains to being a Kubernetes node.
  , lKENodeStatusStatus :: (GHC.Maybe.Maybe LKENodeStatusStatus')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LKENodeStatus
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= lKENodeStatusId obj : "instance_id" Data.Aeson.Types.ToJSON..= lKENodeStatusInstanceId obj : "status" Data.Aeson.Types.ToJSON..= lKENodeStatusStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= lKENodeStatusId obj) GHC.Base.<> (("instance_id" Data.Aeson.Types.ToJSON..= lKENodeStatusInstanceId obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= lKENodeStatusStatus obj)))
instance Data.Aeson.Types.FromJSON.FromJSON LKENodeStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKENodeStatus" (\obj -> ((GHC.Base.pure LKENodeStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "instance_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Create a new 'LKENodeStatus' with all required fields.
mkLKENodeStatus :: LKENodeStatus
mkLKENodeStatus = LKENodeStatus{lKENodeStatusId = GHC.Maybe.Nothing,
                                lKENodeStatusInstanceId = GHC.Maybe.Nothing,
                                lKENodeStatusStatus = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.LKENodeStatus.properties.status@ in the specification.
-- 
-- The Node\'s status as it pertains to being a Kubernetes node.
data LKENodeStatusStatus' =
   LKENodeStatusStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LKENodeStatusStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LKENodeStatusStatus'EnumReady -- ^ Represents the JSON value @"ready"@
  | LKENodeStatusStatus'EnumNotReady -- ^ Represents the JSON value @"not_ready"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LKENodeStatusStatus'
    where toJSON (LKENodeStatusStatus'Other val) = val
          toJSON (LKENodeStatusStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LKENodeStatusStatus'EnumReady) = "ready"
          toJSON (LKENodeStatusStatus'EnumNotReady) = "not_ready"
instance Data.Aeson.Types.FromJSON.FromJSON LKENodeStatusStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ready" -> LKENodeStatusStatus'EnumReady
                                            | val GHC.Classes.== "not_ready" -> LKENodeStatusStatus'EnumNotReady
                                            | GHC.Base.otherwise -> LKENodeStatusStatus'Other val)
