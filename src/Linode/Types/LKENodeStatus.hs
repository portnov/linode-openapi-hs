-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LKENodeStatus
module Linode.Types.LKENodeStatus where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema LKENodeStatus
-- 
-- Status information for a Node which is a member of a Kubernetes cluster.
data LKENodeStatus = LKENodeStatus {
  -- | id: The Node\'s ID.
  lKENodeStatusId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | instance_id: The Linode\'s ID. When no Linode is currently provisioned for this Node, this will be null.
  , lKENodeStatusInstance_id :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | status: The Node\'s status as it pertains to being a Kubernetes node.
  , lKENodeStatusStatus :: (GHC.Base.Maybe LKENodeStatusStatus)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKENodeStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (lKENodeStatusId obj) : (Data.Aeson..=) "instance_id" (lKENodeStatusInstance_id obj) : (Data.Aeson..=) "status" (lKENodeStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (lKENodeStatusId obj) GHC.Base.<> ((Data.Aeson..=) "instance_id" (lKENodeStatusInstance_id obj) GHC.Base.<> (Data.Aeson..=) "status" (lKENodeStatusStatus obj)))
instance Data.Aeson.Types.FromJSON.FromJSON LKENodeStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKENodeStatus" (\obj -> ((GHC.Base.pure LKENodeStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "instance_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the enum schema LKENodeStatusStatus
-- 
-- The Node\'s status as it pertains to being a Kubernetes node.
data LKENodeStatusStatus
    = LKENodeStatusStatusEnumOther Data.Aeson.Types.Internal.Value
    | LKENodeStatusStatusEnumTyped Data.Text.Internal.Text
    | LKENodeStatusStatusEnumString_not_ready
    | LKENodeStatusStatusEnumString_ready
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKENodeStatusStatus
    where toJSON (LKENodeStatusStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LKENodeStatusStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LKENodeStatusStatusEnumString_not_ready) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "not_ready"
          toJSON (LKENodeStatusStatusEnumString_ready) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ready"
instance Data.Aeson.FromJSON LKENodeStatusStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "not_ready")
                                          then LKENodeStatusStatusEnumString_not_ready
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ready")
                                                then LKENodeStatusStatusEnumString_ready
                                                else LKENodeStatusStatusEnumOther val)