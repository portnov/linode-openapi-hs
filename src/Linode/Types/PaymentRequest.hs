-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PaymentRequest
module Linode.Types.PaymentRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.PaymentRequest@ in the specification.
-- 
-- Payment object request.
data PaymentRequest = PaymentRequest {
  -- | cvv: CVV (Card Verification Value) of the credit card to be used for the Payment. Required if paying by credit card.
  paymentRequestCvv :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | payment_method_id: The ID of the Payment Method to apply to the Payment.
  , paymentRequestPaymentMethodId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | usd: The amount in US Dollars of the Payment.
  -- 
  -- * Can begin with or without \`\$\`.
  -- * Commas (\`,\`) are not accepted.
  -- * Must end with a decimal expression, such as \`.00\` or \`.99\`.
  -- * Minimum: \`\$5.00\` or the Account balance, whichever is lower.
  -- * Maximum: \`\$2000.00\` or the Account balance up to \`\$50000.00\`, whichever is greater.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^\\\$?\\d+\\.\\d{2}\$\'
  , paymentRequestUsd :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentRequest
    where toJSON obj = Data.Aeson.Types.Internal.object ("cvv" Data.Aeson.Types.ToJSON..= paymentRequestCvv obj : "payment_method_id" Data.Aeson.Types.ToJSON..= paymentRequestPaymentMethodId obj : "usd" Data.Aeson.Types.ToJSON..= paymentRequestUsd obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cvv" Data.Aeson.Types.ToJSON..= paymentRequestCvv obj) GHC.Base.<> (("payment_method_id" Data.Aeson.Types.ToJSON..= paymentRequestPaymentMethodId obj) GHC.Base.<> ("usd" Data.Aeson.Types.ToJSON..= paymentRequestUsd obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentRequest" (\obj -> ((GHC.Base.pure PaymentRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvv")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "usd"))
-- | Create a new 'PaymentRequest' with all required fields.
mkPaymentRequest :: Data.Text.Internal.Text -- ^ 'paymentRequestUsd'
  -> PaymentRequest
mkPaymentRequest paymentRequestUsd = PaymentRequest{paymentRequestCvv = GHC.Maybe.Nothing,
                                                    paymentRequestPaymentMethodId = GHC.Maybe.Nothing,
                                                    paymentRequestUsd = paymentRequestUsd}
