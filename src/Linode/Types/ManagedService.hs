-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema ManagedService
module Linode.Types.ManagedService where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema ManagedService
-- 
-- A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.
data ManagedService = ManagedService {
  -- | address: The URL at which this Service is monitored.
  -- 
  -- URL parameters such as \`?no-cache=1\` are preserved.
  -- 
  -- URL fragments\/anchors such as \`\#monitor\` are **not** preserved.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum length of 3
  managedServiceAddress :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | body: What to expect to find in the response body for the Service to be considered up.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  -- * Minimum length of 0
  , managedServiceBody :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | consultation_group: The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  -- * Minimum length of 0
  , managedServiceConsultation_group :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | created: When this Managed Service was created.
  , managedServiceCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | credentials: An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
  , managedServiceCredentials :: (GHC.Base.Maybe ([] GHC.Integer.Type.Integer))
  -- | id: This Service\'s unique ID.
  , managedServiceId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The label for this Service. This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_ \\.]{3,64}\'
  , managedServiceLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | notes: Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
  , managedServiceNotes :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
  , managedServiceRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | service_type: How this Service is monitored.
  , managedServiceService_type :: (GHC.Base.Maybe ManagedServiceService_type)
  -- | status: The current status of this Service.
  , managedServiceStatus :: (GHC.Base.Maybe ManagedServiceStatus)
  -- | timeout: How long to wait, in seconds, for a response before considering the Service to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  , managedServiceTimeout :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | updated: When this Managed Service was last updated.
  , managedServiceUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedService
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (managedServiceAddress obj) : (Data.Aeson..=) "body" (managedServiceBody obj) : (Data.Aeson..=) "consultation_group" (managedServiceConsultation_group obj) : (Data.Aeson..=) "created" (managedServiceCreated obj) : (Data.Aeson..=) "credentials" (managedServiceCredentials obj) : (Data.Aeson..=) "id" (managedServiceId obj) : (Data.Aeson..=) "label" (managedServiceLabel obj) : (Data.Aeson..=) "notes" (managedServiceNotes obj) : (Data.Aeson..=) "region" (managedServiceRegion obj) : (Data.Aeson..=) "service_type" (managedServiceService_type obj) : (Data.Aeson..=) "status" (managedServiceStatus obj) : (Data.Aeson..=) "timeout" (managedServiceTimeout obj) : (Data.Aeson..=) "updated" (managedServiceUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (managedServiceAddress obj) GHC.Base.<> ((Data.Aeson..=) "body" (managedServiceBody obj) GHC.Base.<> ((Data.Aeson..=) "consultation_group" (managedServiceConsultation_group obj) GHC.Base.<> ((Data.Aeson..=) "created" (managedServiceCreated obj) GHC.Base.<> ((Data.Aeson..=) "credentials" (managedServiceCredentials obj) GHC.Base.<> ((Data.Aeson..=) "id" (managedServiceId obj) GHC.Base.<> ((Data.Aeson..=) "label" (managedServiceLabel obj) GHC.Base.<> ((Data.Aeson..=) "notes" (managedServiceNotes obj) GHC.Base.<> ((Data.Aeson..=) "region" (managedServiceRegion obj) GHC.Base.<> ((Data.Aeson..=) "service_type" (managedServiceService_type obj) GHC.Base.<> ((Data.Aeson..=) "status" (managedServiceStatus obj) GHC.Base.<> ((Data.Aeson..=) "timeout" (managedServiceTimeout obj) GHC.Base.<> (Data.Aeson..=) "updated" (managedServiceUpdated obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ManagedService
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ManagedService" (\obj -> ((((((((((((GHC.Base.pure ManagedService GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "consultation_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credentials")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the enum schema ManagedServiceService_type
-- 
-- How this Service is monitored.
data ManagedServiceService_type
    = ManagedServiceService_typeEnumOther Data.Aeson.Types.Internal.Value
    | ManagedServiceService_typeEnumTyped Data.Text.Internal.Text
    | ManagedServiceService_typeEnumString_tcp
    | ManagedServiceService_typeEnumString_url
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedServiceService_type
    where toJSON (ManagedServiceService_typeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ManagedServiceService_typeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ManagedServiceService_typeEnumString_tcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
          toJSON (ManagedServiceService_typeEnumString_url) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "url"
instance Data.Aeson.FromJSON ManagedServiceService_type
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                          then ManagedServiceService_typeEnumString_tcp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "url")
                                                then ManagedServiceService_typeEnumString_url
                                                else ManagedServiceService_typeEnumOther val)
-- | Defines the enum schema ManagedServiceStatus
-- 
-- The current status of this Service.
data ManagedServiceStatus
    = ManagedServiceStatusEnumOther Data.Aeson.Types.Internal.Value
    | ManagedServiceStatusEnumTyped Data.Text.Internal.Text
    | ManagedServiceStatusEnumString_disabled
    | ManagedServiceStatusEnumString_ok
    | ManagedServiceStatusEnumString_pending
    | ManagedServiceStatusEnumString_problem
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ManagedServiceStatus
    where toJSON (ManagedServiceStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ManagedServiceStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ManagedServiceStatusEnumString_disabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled"
          toJSON (ManagedServiceStatusEnumString_ok) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ok"
          toJSON (ManagedServiceStatusEnumString_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (ManagedServiceStatusEnumString_problem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "problem"
instance Data.Aeson.FromJSON ManagedServiceStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled")
                                          then ManagedServiceStatusEnumString_disabled
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ok")
                                                then ManagedServiceStatusEnumString_ok
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                      then ManagedServiceStatusEnumString_pending
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "problem")
                                                            then ManagedServiceStatusEnumString_problem
                                                            else ManagedServiceStatusEnumOther val)