-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema IPAddress
module Linode.Types.IPAddress where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.IPAddress@ in the specification.
-- 
-- An IP address that exists in Linode\'s system, either IPv4 or IPv6.
data IPAddress = IPAddress {
  -- | address: The IP address.
  iPAddressAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | gateway: The default gateway for this address.
  , iPAddressGateway :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | linode_id: The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [\/networking\/ipv4\/assign](\/docs\/api\/networking\/\#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
  , iPAddressLinodeId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | prefix: The number of bits set in the subnet mask.
  , iPAddressPrefix :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | public: Whether this is a public or private IP address.
  , iPAddressPublic :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | rdns: The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
  , iPAddressRdns :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | region: The Region this IP address resides in.
  , iPAddressRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | subnet_mask: The mask that separates host bits from network bits for this address.
  , iPAddressSubnetMask :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: The type of address this is.
  , iPAddressType :: (GHC.Maybe.Maybe IPAddressType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IPAddress
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= iPAddressAddress obj : "gateway" Data.Aeson.Types.ToJSON..= iPAddressGateway obj : "linode_id" Data.Aeson.Types.ToJSON..= iPAddressLinodeId obj : "prefix" Data.Aeson.Types.ToJSON..= iPAddressPrefix obj : "public" Data.Aeson.Types.ToJSON..= iPAddressPublic obj : "rdns" Data.Aeson.Types.ToJSON..= iPAddressRdns obj : "region" Data.Aeson.Types.ToJSON..= iPAddressRegion obj : "subnet_mask" Data.Aeson.Types.ToJSON..= iPAddressSubnetMask obj : "type" Data.Aeson.Types.ToJSON..= iPAddressType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= iPAddressAddress obj) GHC.Base.<> (("gateway" Data.Aeson.Types.ToJSON..= iPAddressGateway obj) GHC.Base.<> (("linode_id" Data.Aeson.Types.ToJSON..= iPAddressLinodeId obj) GHC.Base.<> (("prefix" Data.Aeson.Types.ToJSON..= iPAddressPrefix obj) GHC.Base.<> (("public" Data.Aeson.Types.ToJSON..= iPAddressPublic obj) GHC.Base.<> (("rdns" Data.Aeson.Types.ToJSON..= iPAddressRdns obj) GHC.Base.<> (("region" Data.Aeson.Types.ToJSON..= iPAddressRegion obj) GHC.Base.<> (("subnet_mask" Data.Aeson.Types.ToJSON..= iPAddressSubnetMask obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= iPAddressType obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON IPAddress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IPAddress" (\obj -> ((((((((GHC.Base.pure IPAddress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rdns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subnet_mask")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Create a new 'IPAddress' with all required fields.
mkIPAddress :: IPAddress
mkIPAddress = IPAddress{iPAddressAddress = GHC.Maybe.Nothing,
                        iPAddressGateway = GHC.Maybe.Nothing,
                        iPAddressLinodeId = GHC.Maybe.Nothing,
                        iPAddressPrefix = GHC.Maybe.Nothing,
                        iPAddressPublic = GHC.Maybe.Nothing,
                        iPAddressRdns = GHC.Maybe.Nothing,
                        iPAddressRegion = GHC.Maybe.Nothing,
                        iPAddressSubnetMask = GHC.Maybe.Nothing,
                        iPAddressType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.IPAddress.properties.type@ in the specification.
-- 
-- The type of address this is.
data IPAddressType' =
   IPAddressType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | IPAddressType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | IPAddressType'EnumIpv4 -- ^ Represents the JSON value @"ipv4"@
  | IPAddressType'EnumIpv6 -- ^ Represents the JSON value @"ipv6"@
  | IPAddressType'EnumIpv6Pool -- ^ Represents the JSON value @"ipv6/pool"@
  | IPAddressType'EnumIpv6Range -- ^ Represents the JSON value @"ipv6/range"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IPAddressType'
    where toJSON (IPAddressType'Other val) = val
          toJSON (IPAddressType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (IPAddressType'EnumIpv4) = "ipv4"
          toJSON (IPAddressType'EnumIpv6) = "ipv6"
          toJSON (IPAddressType'EnumIpv6Pool) = "ipv6/pool"
          toJSON (IPAddressType'EnumIpv6Range) = "ipv6/range"
instance Data.Aeson.Types.FromJSON.FromJSON IPAddressType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ipv4" -> IPAddressType'EnumIpv4
                                            | val GHC.Classes.== "ipv6" -> IPAddressType'EnumIpv6
                                            | val GHC.Classes.== "ipv6/pool" -> IPAddressType'EnumIpv6Pool
                                            | val GHC.Classes.== "ipv6/range" -> IPAddressType'EnumIpv6Range
                                            | GHC.Base.otherwise -> IPAddressType'Other val)
