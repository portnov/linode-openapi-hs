-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema StatsDataAvailable
module Linode.Types.StatsDataAvailable where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias
import {-# SOURCE #-} Linode.Types.StatsData

-- | Defines the object schema located at @components.schemas.StatsDataAvailable@ in the specification.
-- 
-- A collection of graph data returned for managed stats.
data StatsDataAvailable = StatsDataAvailable {
  -- | cpu: CPU usage stats from the last 24 hours.
  statsDataAvailableCpu :: (GHC.Maybe.Maybe ([StatsData]))
  -- | disk: Disk usage stats from the last 24 hours.
  , statsDataAvailableDisk :: (GHC.Maybe.Maybe ([StatsData]))
  -- | net_in: Inbound network traffic stats from the last 24 hours.
  , statsDataAvailableNetIn :: (GHC.Maybe.Maybe ([StatsData]))
  -- | net_out: Outbound network traffic stats from the last 24 hours.
  , statsDataAvailableNetOut :: (GHC.Maybe.Maybe ([StatsData]))
  -- | swap: Swap usage stats from the last 24 hours.
  , statsDataAvailableSwap :: (GHC.Maybe.Maybe ([StatsData]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StatsDataAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object ("cpu" Data.Aeson.Types.ToJSON..= statsDataAvailableCpu obj : "disk" Data.Aeson.Types.ToJSON..= statsDataAvailableDisk obj : "net_in" Data.Aeson.Types.ToJSON..= statsDataAvailableNetIn obj : "net_out" Data.Aeson.Types.ToJSON..= statsDataAvailableNetOut obj : "swap" Data.Aeson.Types.ToJSON..= statsDataAvailableSwap obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cpu" Data.Aeson.Types.ToJSON..= statsDataAvailableCpu obj) GHC.Base.<> (("disk" Data.Aeson.Types.ToJSON..= statsDataAvailableDisk obj) GHC.Base.<> (("net_in" Data.Aeson.Types.ToJSON..= statsDataAvailableNetIn obj) GHC.Base.<> (("net_out" Data.Aeson.Types.ToJSON..= statsDataAvailableNetOut obj) GHC.Base.<> ("swap" Data.Aeson.Types.ToJSON..= statsDataAvailableSwap obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON StatsDataAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "StatsDataAvailable" (\obj -> ((((GHC.Base.pure StatsDataAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cpu")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_out")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "swap"))
-- | Create a new 'StatsDataAvailable' with all required fields.
mkStatsDataAvailable :: StatsDataAvailable
mkStatsDataAvailable = StatsDataAvailable{statsDataAvailableCpu = GHC.Maybe.Nothing,
                                          statsDataAvailableDisk = GHC.Maybe.Nothing,
                                          statsDataAvailableNetIn = GHC.Maybe.Nothing,
                                          statsDataAvailableNetOut = GHC.Maybe.Nothing,
                                          statsDataAvailableSwap = GHC.Maybe.Nothing}
