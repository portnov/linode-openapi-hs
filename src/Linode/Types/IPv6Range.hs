-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema IPv6Range
module Linode.Types.IPv6Range where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema IPv6Range
-- 
-- An object representing an IPv6 range.
data IPv6Range = IPv6Range {
  -- | prefix: The prefix length of the address, denoting how many addresses can be assigned from this range calculated as 2 \<sup>128-prefix\<\/sup>.
  iPv6RangePrefix :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | range: The IPv6 range of addresses in this pool.
  , iPv6RangeRange :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The region for this range of IPv6 addresses.
  , iPv6RangeRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | route_target: The last address in this block of IPv6 addresses.
  , iPv6RangeRoute_target :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON IPv6Range
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "prefix" (iPv6RangePrefix obj) : (Data.Aeson..=) "range" (iPv6RangeRange obj) : (Data.Aeson..=) "region" (iPv6RangeRegion obj) : (Data.Aeson..=) "route_target" (iPv6RangeRoute_target obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "prefix" (iPv6RangePrefix obj) GHC.Base.<> ((Data.Aeson..=) "range" (iPv6RangeRange obj) GHC.Base.<> ((Data.Aeson..=) "region" (iPv6RangeRegion obj) GHC.Base.<> (Data.Aeson..=) "route_target" (iPv6RangeRoute_target obj))))
instance Data.Aeson.Types.FromJSON.FromJSON IPv6Range
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IPv6Range" (\obj -> (((GHC.Base.pure IPv6Range GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "route_target"))