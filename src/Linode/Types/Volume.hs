-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Volume
module Linode.Types.Volume where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Volume@ in the specification.
-- 
-- A Block Storage Volume associated with your Account.
data Volume = Volume {
  -- | created: When this Volume was created.
  volumeCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | filesystem_path: The full filesystem path for the Volume based on the Volume\'s label. Path is \/dev\/disk\/by-id\/scsi-0Linode_Volume_ + Volume label.
  , volumeFilesystemPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | hardware_type: The storage type of this Volume.
  , volumeHardwareType :: (GHC.Maybe.Maybe VolumeHardwareType')
  -- | id: The unique ID of this Volume.
  , volumeId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The Volume\'s label is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 1
  -- * Must match pattern \'^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+\$\'
  , volumeLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | linode_id: If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
  , volumeLinodeId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | linode_label: If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
  , volumeLinodeLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | region: The unique ID of this Region.
  , volumeRegion :: (GHC.Maybe.Maybe RegionPropertiesId)
  -- | size: The Volume\'s size, in GiB.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 10240.0
  , volumeSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | status: The current status of the volume.  Can be one of:
  -- 
  --   * \`creating\` - the Volume is being created and is not yet available
  --     for use.
  --   * \`active\` - the Volume is online and available for use.
  --   * \`resizing\` - the Volume is in the process of upgrading
  --     its current capacity.
  --   * \`contact_support\` - there is a problem with your Volume. Please
  --     [open a Support Ticket](\/docs\/api\/support\/\#support-ticket-open) to resolve the issue.
  , volumeStatus :: (GHC.Maybe.Maybe VolumeStatus')
  -- | tags: An array of Tags applied to this object.  Tags are for organizational purposes only.
  , volumeTags :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | updated: When this Volume was last updated.
  , volumeUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Volume
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= volumeCreated obj : "filesystem_path" Data.Aeson.Types.ToJSON..= volumeFilesystemPath obj : "hardware_type" Data.Aeson.Types.ToJSON..= volumeHardwareType obj : "id" Data.Aeson.Types.ToJSON..= volumeId obj : "label" Data.Aeson.Types.ToJSON..= volumeLabel obj : "linode_id" Data.Aeson.Types.ToJSON..= volumeLinodeId obj : "linode_label" Data.Aeson.Types.ToJSON..= volumeLinodeLabel obj : "region" Data.Aeson.Types.ToJSON..= volumeRegion obj : "size" Data.Aeson.Types.ToJSON..= volumeSize obj : "status" Data.Aeson.Types.ToJSON..= volumeStatus obj : "tags" Data.Aeson.Types.ToJSON..= volumeTags obj : "updated" Data.Aeson.Types.ToJSON..= volumeUpdated obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= volumeCreated obj) GHC.Base.<> (("filesystem_path" Data.Aeson.Types.ToJSON..= volumeFilesystemPath obj) GHC.Base.<> (("hardware_type" Data.Aeson.Types.ToJSON..= volumeHardwareType obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= volumeId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= volumeLabel obj) GHC.Base.<> (("linode_id" Data.Aeson.Types.ToJSON..= volumeLinodeId obj) GHC.Base.<> (("linode_label" Data.Aeson.Types.ToJSON..= volumeLinodeLabel obj) GHC.Base.<> (("region" Data.Aeson.Types.ToJSON..= volumeRegion obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= volumeSize obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= volumeStatus obj) GHC.Base.<> (("tags" Data.Aeson.Types.ToJSON..= volumeTags obj) GHC.Base.<> ("updated" Data.Aeson.Types.ToJSON..= volumeUpdated obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Volume
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Volume" (\obj -> (((((((((((GHC.Base.pure Volume GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filesystem_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hardware_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Create a new 'Volume' with all required fields.
mkVolume :: Volume
mkVolume = Volume{volumeCreated = GHC.Maybe.Nothing,
                  volumeFilesystemPath = GHC.Maybe.Nothing,
                  volumeHardwareType = GHC.Maybe.Nothing,
                  volumeId = GHC.Maybe.Nothing,
                  volumeLabel = GHC.Maybe.Nothing,
                  volumeLinodeId = GHC.Maybe.Nothing,
                  volumeLinodeLabel = GHC.Maybe.Nothing,
                  volumeRegion = GHC.Maybe.Nothing,
                  volumeSize = GHC.Maybe.Nothing,
                  volumeStatus = GHC.Maybe.Nothing,
                  volumeTags = GHC.Maybe.Nothing,
                  volumeUpdated = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Volume.properties.hardware_type@ in the specification.
-- 
-- The storage type of this Volume.
data VolumeHardwareType' =
   VolumeHardwareType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | VolumeHardwareType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | VolumeHardwareType'EnumHdd -- ^ Represents the JSON value @"hdd"@
  | VolumeHardwareType'EnumNvme -- ^ Represents the JSON value @"nvme"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON VolumeHardwareType'
    where toJSON (VolumeHardwareType'Other val) = val
          toJSON (VolumeHardwareType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (VolumeHardwareType'EnumHdd) = "hdd"
          toJSON (VolumeHardwareType'EnumNvme) = "nvme"
instance Data.Aeson.Types.FromJSON.FromJSON VolumeHardwareType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "hdd" -> VolumeHardwareType'EnumHdd
                                            | val GHC.Classes.== "nvme" -> VolumeHardwareType'EnumNvme
                                            | GHC.Base.otherwise -> VolumeHardwareType'Other val)
-- | Defines the enum schema located at @components.schemas.Volume.properties.status@ in the specification.
-- 
-- The current status of the volume.  Can be one of:
-- 
--   * \`creating\` - the Volume is being created and is not yet available
--     for use.
--   * \`active\` - the Volume is online and available for use.
--   * \`resizing\` - the Volume is in the process of upgrading
--     its current capacity.
--   * \`contact_support\` - there is a problem with your Volume. Please
--     [open a Support Ticket](\/docs\/api\/support\/\#support-ticket-open) to resolve the issue.
data VolumeStatus' =
   VolumeStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | VolumeStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | VolumeStatus'EnumCreating -- ^ Represents the JSON value @"creating"@
  | VolumeStatus'EnumActive -- ^ Represents the JSON value @"active"@
  | VolumeStatus'EnumResizing -- ^ Represents the JSON value @"resizing"@
  | VolumeStatus'EnumContactSupport -- ^ Represents the JSON value @"contact_support"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON VolumeStatus'
    where toJSON (VolumeStatus'Other val) = val
          toJSON (VolumeStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (VolumeStatus'EnumCreating) = "creating"
          toJSON (VolumeStatus'EnumActive) = "active"
          toJSON (VolumeStatus'EnumResizing) = "resizing"
          toJSON (VolumeStatus'EnumContactSupport) = "contact_support"
instance Data.Aeson.Types.FromJSON.FromJSON VolumeStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "creating" -> VolumeStatus'EnumCreating
                                            | val GHC.Classes.== "active" -> VolumeStatus'EnumActive
                                            | val GHC.Classes.== "resizing" -> VolumeStatus'EnumResizing
                                            | val GHC.Classes.== "contact_support" -> VolumeStatus'EnumContactSupport
                                            | GHC.Base.otherwise -> VolumeStatus'Other val)
