-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LinodeRequest
module Linode.Types.LinodeRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LinodeRequest@ in the specification.
-- 
-- Common properties for creating and rebuilding Linodes.
data LinodeRequest = LinodeRequest {
  -- | authorized_keys: A list of public SSH keys that will be automatically appended
  -- to the root user\'s \`~\/.ssh\/authorized_keys\` file when deploying from an Image.
  linodeRequestAuthorizedKeys :: (GHC.Maybe.Maybe DiskRequestPropertiesAuthorizedKeys)
  -- | authorized_users: A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users \`~\/.ssh\/authorized_keys\` file automatically when deploying from an Image.
  , linodeRequestAuthorizedUsers :: (GHC.Maybe.Maybe DiskRequestPropertiesAuthorizedUsers)
  -- | booted: This field defaults to \`true\` if the Linode is created with an Image or from a Backup.
  -- If it is deployed from an Image or a Backup and you wish it to remain \`offline\` after deployment, set this to \`false\`.
  , linodeRequestBooted :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | image: An Image ID to deploy the Linode Disk from.
  -- 
  -- Access the Images List ([GET \/images](\/docs\/api\/images\/\#images-list)) endpoint with authentication to view
  -- all available Images. Official Linode Images start with \`linode\/\`, while your Account\'s Images start with \`private\/\`. Creating
  -- a disk from a Private Image requires \`read_only\` or \`read_write\` permissions for that Image. Access the User\'s
  -- Grant Update ([PUT \/account\/users\/{username}\/grants](\/docs\/api\/account\/\#users-grants-update)) endpoint to
  -- adjust permissions for an Account Image.
  , linodeRequestImage :: (GHC.Maybe.Maybe DiskRequestPropertiesImage)
  -- | root_pass: This sets the root user\'s password on a newly-created Linode Disk when deploying from an Image.
  -- 
  -- * **Required** when creating a Linode Disk from an Image, including when using a StackScript.
  -- 
  -- * Must meet a password strength score requirement that is calculated internally by the API.
  -- If the strength requirement is not met, you will receive a \`Password does not meet strength requirement\` error.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 128
  -- * Minimum length of 7
  , linodeRequestRootPass :: (GHC.Maybe.Maybe DiskRequestPropertiesRootPass)
  -- | stackscript_data: This field is required only if the StackScript being deployed requires input
  -- data from the User for successful completion. See
  -- [User Defined Fields (UDFs)](\/docs\/guides\/writing-scripts-for-use-with-linode-stackscripts-a-tutorial\/\#user-defined-fields-udfs)
  -- for more details. This field is required to be valid JSON.
  , linodeRequestStackscriptData :: (GHC.Maybe.Maybe DiskRequestPropertiesStackscriptData)
  -- | stackscript_id: A StackScript ID that will cause the referenced StackScript to be run during
  -- deployment of this Linode. A compatible \`image\` is required to use a
  -- StackScript. To get a list of available StackScript and their permitted Images
  -- see [\/stackscripts](\/docs\/api\/stackscripts\/\#stackscripts-list).
  -- This field cannot be used when deploying from a Backup or a Private Image.
  , linodeRequestStackscriptId :: (GHC.Maybe.Maybe DiskRequestPropertiesStackscriptId)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinodeRequest
    where toJSON obj = Data.Aeson.Types.Internal.object ("authorized_keys" Data.Aeson.Types.ToJSON..= linodeRequestAuthorizedKeys obj : "authorized_users" Data.Aeson.Types.ToJSON..= linodeRequestAuthorizedUsers obj : "booted" Data.Aeson.Types.ToJSON..= linodeRequestBooted obj : "image" Data.Aeson.Types.ToJSON..= linodeRequestImage obj : "root_pass" Data.Aeson.Types.ToJSON..= linodeRequestRootPass obj : "stackscript_data" Data.Aeson.Types.ToJSON..= linodeRequestStackscriptData obj : "stackscript_id" Data.Aeson.Types.ToJSON..= linodeRequestStackscriptId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("authorized_keys" Data.Aeson.Types.ToJSON..= linodeRequestAuthorizedKeys obj) GHC.Base.<> (("authorized_users" Data.Aeson.Types.ToJSON..= linodeRequestAuthorizedUsers obj) GHC.Base.<> (("booted" Data.Aeson.Types.ToJSON..= linodeRequestBooted obj) GHC.Base.<> (("image" Data.Aeson.Types.ToJSON..= linodeRequestImage obj) GHC.Base.<> (("root_pass" Data.Aeson.Types.ToJSON..= linodeRequestRootPass obj) GHC.Base.<> (("stackscript_data" Data.Aeson.Types.ToJSON..= linodeRequestStackscriptData obj) GHC.Base.<> ("stackscript_id" Data.Aeson.Types.ToJSON..= linodeRequestStackscriptId obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeRequest" (\obj -> ((((((GHC.Base.pure LinodeRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorized_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "booted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_pass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stackscript_id"))
-- | Create a new 'LinodeRequest' with all required fields.
mkLinodeRequest :: LinodeRequest
mkLinodeRequest = LinodeRequest{linodeRequestAuthorizedKeys = GHC.Maybe.Nothing,
                                linodeRequestAuthorizedUsers = GHC.Maybe.Nothing,
                                linodeRequestBooted = GHC.Maybe.Nothing,
                                linodeRequestImage = GHC.Maybe.Nothing,
                                linodeRequestRootPass = GHC.Maybe.Nothing,
                                linodeRequestStackscriptData = GHC.Maybe.Nothing,
                                linodeRequestStackscriptId = GHC.Maybe.Nothing}
