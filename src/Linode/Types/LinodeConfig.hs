-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LinodeConfig
module Linode.Types.LinodeConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.Devices
import Linode.Types.LinodeConfigInterfaces

-- | Defines the data type for the schema LinodeConfig
-- 
-- 
data LinodeConfig = LinodeConfig {
  -- | comments: Optional field for arbitrary User comments on this Config.
  linodeConfigComments :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | devices: A dictionary of device disks to use as a device map in a Linode\'s configuration profile.
  -- * An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
  -- * If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
  , linodeConfigDevices :: (GHC.Base.Maybe Devices)
  -- | helpers: Helpers enabled when booting to this Linode Config.
  , linodeConfigHelpers :: (GHC.Base.Maybe LinodeConfigHelpers)
  -- | id: The ID of this Config.
  , linodeConfigId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | interfaces: An array of Network Interfaces to add to this Linode\'s Configuration Profile.
  -- 
  -- Up to three interface objects can be entered in this array. The position in the array determines the interface to which the settings apply:
  -- 
  -- - First\/0:  eth0
  -- - Second\/1: eth1
  -- - Third\/2:  eth2
  -- 
  -- When updating a Linode\'s interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.
  -- 
  -- If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.
  -- 
  -- **Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.
  -- 
  -- **Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([\/regions](\/docs\/api\/regions\/)) endpoint to view the capabilities of data center regions.
  -- If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
  -- the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility,
  -- you will be prompted to select a different data center or contact support.
  -- 
  -- **Note:** See our guide on [Getting Started with VLANs](\/docs\/guides\/getting-started-with-vlans\/) to view additional [limitations](\/docs\/guides\/getting-started-with-vlans\/\#limitations).
  , linodeConfigInterfaces :: (GHC.Base.Maybe LinodeConfigInterfaces)
  -- | kernel: A Kernel ID to boot a Linode with. Defaults to \"linode\/latest-64bit\".
  , linodeConfigKernel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: The Config\'s label is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 48
  -- * Minimum length of 1
  , linodeConfigLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | memory_limit: Defaults to the total RAM of the Linode.
  , linodeConfigMemory_limit :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | root_device: The root device to boot.
  -- * If no value or an invalid value is provided, root device will default to \`\/dev\/sda\`.
  -- * If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'a-z, A-Z, 0-9, \/, _, -\'
  , linodeConfigRoot_device :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | run_level: Defines the state of your Linode after booting. Defaults to \`default\`.
  , linodeConfigRun_level :: (GHC.Base.Maybe LinodeConfigRun_level)
  -- | virt_mode: Controls the virtualization mode. Defaults to \`paravirt\`.
  -- * \`paravirt\` is suitable for most cases. Linodes running in paravirt mode
  --   share some qualities with the host, ultimately making it run faster since
  --   there is less transition between it and the host.
  -- * \`fullvirt\` affords more customization, but is slower because 100% of the VM
  --   is virtualized.
  , linodeConfigVirt_mode :: (GHC.Base.Maybe LinodeConfigVirt_mode)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeConfig
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "comments" (linodeConfigComments obj) : (Data.Aeson..=) "devices" (linodeConfigDevices obj) : (Data.Aeson..=) "helpers" (linodeConfigHelpers obj) : (Data.Aeson..=) "id" (linodeConfigId obj) : (Data.Aeson..=) "interfaces" (linodeConfigInterfaces obj) : (Data.Aeson..=) "kernel" (linodeConfigKernel obj) : (Data.Aeson..=) "label" (linodeConfigLabel obj) : (Data.Aeson..=) "memory_limit" (linodeConfigMemory_limit obj) : (Data.Aeson..=) "root_device" (linodeConfigRoot_device obj) : (Data.Aeson..=) "run_level" (linodeConfigRun_level obj) : (Data.Aeson..=) "virt_mode" (linodeConfigVirt_mode obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "comments" (linodeConfigComments obj) GHC.Base.<> ((Data.Aeson..=) "devices" (linodeConfigDevices obj) GHC.Base.<> ((Data.Aeson..=) "helpers" (linodeConfigHelpers obj) GHC.Base.<> ((Data.Aeson..=) "id" (linodeConfigId obj) GHC.Base.<> ((Data.Aeson..=) "interfaces" (linodeConfigInterfaces obj) GHC.Base.<> ((Data.Aeson..=) "kernel" (linodeConfigKernel obj) GHC.Base.<> ((Data.Aeson..=) "label" (linodeConfigLabel obj) GHC.Base.<> ((Data.Aeson..=) "memory_limit" (linodeConfigMemory_limit obj) GHC.Base.<> ((Data.Aeson..=) "root_device" (linodeConfigRoot_device obj) GHC.Base.<> ((Data.Aeson..=) "run_level" (linodeConfigRun_level obj) GHC.Base.<> (Data.Aeson..=) "virt_mode" (linodeConfigVirt_mode obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeConfig
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeConfig" (\obj -> ((((((((((GHC.Base.pure LinodeConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "comments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "devices")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "helpers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interfaces")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "kernel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "memory_limit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_device")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "run_level")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "virt_mode"))
-- | Defines the data type for the schema LinodeConfigHelpers
-- 
-- Helpers enabled when booting to this Linode Config.
data LinodeConfigHelpers = LinodeConfigHelpers {
  -- | devtmpfs_automount: Populates the \/dev directory early during boot without udev.  Defaults to false.
  linodeConfigHelpersDevtmpfs_automount :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | distro: Helps maintain correct inittab\/upstart console device.
  , linodeConfigHelpersDistro :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | modules_dep: Creates a modules dependency file for the Kernel you run.
  , linodeConfigHelpersModules_dep :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | network: Automatically configures static networking.
  , linodeConfigHelpersNetwork :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | updatedb_disabled: Disables updatedb cron job to avoid disk thrashing.
  , linodeConfigHelpersUpdatedb_disabled :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeConfigHelpers
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "devtmpfs_automount" (linodeConfigHelpersDevtmpfs_automount obj) : (Data.Aeson..=) "distro" (linodeConfigHelpersDistro obj) : (Data.Aeson..=) "modules_dep" (linodeConfigHelpersModules_dep obj) : (Data.Aeson..=) "network" (linodeConfigHelpersNetwork obj) : (Data.Aeson..=) "updatedb_disabled" (linodeConfigHelpersUpdatedb_disabled obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "devtmpfs_automount" (linodeConfigHelpersDevtmpfs_automount obj) GHC.Base.<> ((Data.Aeson..=) "distro" (linodeConfigHelpersDistro obj) GHC.Base.<> ((Data.Aeson..=) "modules_dep" (linodeConfigHelpersModules_dep obj) GHC.Base.<> ((Data.Aeson..=) "network" (linodeConfigHelpersNetwork obj) GHC.Base.<> (Data.Aeson..=) "updatedb_disabled" (linodeConfigHelpersUpdatedb_disabled obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON LinodeConfigHelpers
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinodeConfigHelpers" (\obj -> ((((GHC.Base.pure LinodeConfigHelpers GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "devtmpfs_automount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "distro")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "modules_dep")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updatedb_disabled"))
-- | Defines the enum schema LinodeConfigRun_level
-- 
-- Defines the state of your Linode after booting. Defaults to \`default\`.
data LinodeConfigRun_level
    = LinodeConfigRun_levelEnumOther Data.Aeson.Types.Internal.Value
    | LinodeConfigRun_levelEnumTyped Data.Text.Internal.Text
    | LinodeConfigRun_levelEnumString_binbash
    | LinodeConfigRun_levelEnumString_default
    | LinodeConfigRun_levelEnumString_single
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeConfigRun_level
    where toJSON (LinodeConfigRun_levelEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LinodeConfigRun_levelEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LinodeConfigRun_levelEnumString_binbash) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "binbash"
          toJSON (LinodeConfigRun_levelEnumString_default) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "default"
          toJSON (LinodeConfigRun_levelEnumString_single) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "single"
instance Data.Aeson.FromJSON LinodeConfigRun_level
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "binbash")
                                          then LinodeConfigRun_levelEnumString_binbash
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "default")
                                                then LinodeConfigRun_levelEnumString_default
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "single")
                                                      then LinodeConfigRun_levelEnumString_single
                                                      else LinodeConfigRun_levelEnumOther val)
-- | Defines the enum schema LinodeConfigVirt_mode
-- 
-- Controls the virtualization mode. Defaults to \`paravirt\`.
-- * \`paravirt\` is suitable for most cases. Linodes running in paravirt mode
--   share some qualities with the host, ultimately making it run faster since
--   there is less transition between it and the host.
-- * \`fullvirt\` affords more customization, but is slower because 100% of the VM
--   is virtualized.
data LinodeConfigVirt_mode
    = LinodeConfigVirt_modeEnumOther Data.Aeson.Types.Internal.Value
    | LinodeConfigVirt_modeEnumTyped Data.Text.Internal.Text
    | LinodeConfigVirt_modeEnumString_fullvirt
    | LinodeConfigVirt_modeEnumString_paravirt
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LinodeConfigVirt_mode
    where toJSON (LinodeConfigVirt_modeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LinodeConfigVirt_modeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LinodeConfigVirt_modeEnumString_fullvirt) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fullvirt"
          toJSON (LinodeConfigVirt_modeEnumString_paravirt) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paravirt"
instance Data.Aeson.FromJSON LinodeConfigVirt_mode
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fullvirt")
                                          then LinodeConfigVirt_modeEnumString_fullvirt
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paravirt")
                                                then LinodeConfigVirt_modeEnumString_paravirt
                                                else LinodeConfigVirt_modeEnumOther val)