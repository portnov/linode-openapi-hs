-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AccountSettings
module Linode.Types.AccountSettings where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.AccountSettings@ in the specification.
-- 
-- Account Settings object
data AccountSettings = AccountSettings {
  -- | backups_enabled: Account-wide backups default.  If \`true\`, all Linodes created will automatically be enrolled in the Backups service.  If \`false\`, Linodes will not be enrolled by default, but may still be enrolled on creation or later.
  accountSettingsBackupsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | longview_subscription: The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](\/docs\/api\/longview\/\#longview-subscriptions-list) ID or \`null\` for Longview Free.
  , accountSettingsLongviewSubscription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | managed: Our 24\/7 incident response service. This robust, multi-homed monitoring system distributes monitoring checks to ensure that your servers remain online and available at all times. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. Once you add a service to Linode Managed, we\'ll monitor it for connectivity, response, and total request time.
  , accountSettingsManaged :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | network_helper: Enables network helper across all users by default for new Linodes and Linode Configs.
  , accountSettingsNetworkHelper :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | object_storage: A string describing the status of this account\'s Object Storage service enrollment.
  , accountSettingsObjectStorage :: (GHC.Maybe.Maybe AccountSettingsObjectStorage')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AccountSettings
    where toJSON obj = Data.Aeson.Types.Internal.object ("backups_enabled" Data.Aeson.Types.ToJSON..= accountSettingsBackupsEnabled obj : "longview_subscription" Data.Aeson.Types.ToJSON..= accountSettingsLongviewSubscription obj : "managed" Data.Aeson.Types.ToJSON..= accountSettingsManaged obj : "network_helper" Data.Aeson.Types.ToJSON..= accountSettingsNetworkHelper obj : "object_storage" Data.Aeson.Types.ToJSON..= accountSettingsObjectStorage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("backups_enabled" Data.Aeson.Types.ToJSON..= accountSettingsBackupsEnabled obj) GHC.Base.<> (("longview_subscription" Data.Aeson.Types.ToJSON..= accountSettingsLongviewSubscription obj) GHC.Base.<> (("managed" Data.Aeson.Types.ToJSON..= accountSettingsManaged obj) GHC.Base.<> (("network_helper" Data.Aeson.Types.ToJSON..= accountSettingsNetworkHelper obj) GHC.Base.<> ("object_storage" Data.Aeson.Types.ToJSON..= accountSettingsObjectStorage obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountSettings" (\obj -> ((((GHC.Base.pure AccountSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "backups_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longview_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network_helper")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object_storage"))
-- | Create a new 'AccountSettings' with all required fields.
mkAccountSettings :: AccountSettings
mkAccountSettings = AccountSettings{accountSettingsBackupsEnabled = GHC.Maybe.Nothing,
                                    accountSettingsLongviewSubscription = GHC.Maybe.Nothing,
                                    accountSettingsManaged = GHC.Maybe.Nothing,
                                    accountSettingsNetworkHelper = GHC.Maybe.Nothing,
                                    accountSettingsObjectStorage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.AccountSettings.properties.object_storage@ in the specification.
-- 
-- A string describing the status of this account\'s Object Storage service enrollment.
data AccountSettingsObjectStorage' =
   AccountSettingsObjectStorage'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AccountSettingsObjectStorage'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AccountSettingsObjectStorage'EnumDisabled -- ^ Represents the JSON value @"disabled"@
  | AccountSettingsObjectStorage'EnumSuspended -- ^ Represents the JSON value @"suspended"@
  | AccountSettingsObjectStorage'EnumActive -- ^ Represents the JSON value @"active"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AccountSettingsObjectStorage'
    where toJSON (AccountSettingsObjectStorage'Other val) = val
          toJSON (AccountSettingsObjectStorage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (AccountSettingsObjectStorage'EnumDisabled) = "disabled"
          toJSON (AccountSettingsObjectStorage'EnumSuspended) = "suspended"
          toJSON (AccountSettingsObjectStorage'EnumActive) = "active"
instance Data.Aeson.Types.FromJSON.FromJSON AccountSettingsObjectStorage'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "disabled" -> AccountSettingsObjectStorage'EnumDisabled
                                            | val GHC.Classes.== "suspended" -> AccountSettingsObjectStorage'EnumSuspended
                                            | val GHC.Classes.== "active" -> AccountSettingsObjectStorage'EnumActive
                                            | GHC.Base.otherwise -> AccountSettingsObjectStorage'Other val)
