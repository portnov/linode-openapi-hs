-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LongviewSubscription
module Linode.Types.LongviewSubscription where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema LongviewSubscription
-- 
-- A Longview Subscription represents a tier of Longview service you can subscribe to.
data LongviewSubscription = LongviewSubscription {
  -- | clients_included: The number of Longview Clients that may be created with this Subscription tier.
  longviewSubscriptionClients_included :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | id: The unique ID of this Subscription tier.
  , longviewSubscriptionId :: (GHC.Base.Maybe LongviewSubscriptionId)
  -- | label: A display name for this Subscription tier.
  , longviewSubscriptionLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | price: Pricing information about this Subscription tier.
  , longviewSubscriptionPrice :: (GHC.Base.Maybe LongviewSubscriptionPrice)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LongviewSubscription
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "clients_included" (longviewSubscriptionClients_included obj) : (Data.Aeson..=) "id" (longviewSubscriptionId obj) : (Data.Aeson..=) "label" (longviewSubscriptionLabel obj) : (Data.Aeson..=) "price" (longviewSubscriptionPrice obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "clients_included" (longviewSubscriptionClients_included obj) GHC.Base.<> ((Data.Aeson..=) "id" (longviewSubscriptionId obj) GHC.Base.<> ((Data.Aeson..=) "label" (longviewSubscriptionLabel obj) GHC.Base.<> (Data.Aeson..=) "price" (longviewSubscriptionPrice obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewSubscription
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewSubscription" (\obj -> (((GHC.Base.pure LongviewSubscription GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "clients_included")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "price"))
-- | Defines the enum schema LongviewSubscriptionId
-- 
-- The unique ID of this Subscription tier.
data LongviewSubscriptionId
    = LongviewSubscriptionIdEnumOther Data.Aeson.Types.Internal.Value
    | LongviewSubscriptionIdEnumTyped Data.Text.Internal.Text
    | LongviewSubscriptionIdEnumString_longview_10
    | LongviewSubscriptionIdEnumString_longview_100
    | LongviewSubscriptionIdEnumString_longview_3
    | LongviewSubscriptionIdEnumString_longview_40
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LongviewSubscriptionId
    where toJSON (LongviewSubscriptionIdEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LongviewSubscriptionIdEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LongviewSubscriptionIdEnumString_longview_10) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-10"
          toJSON (LongviewSubscriptionIdEnumString_longview_100) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-100"
          toJSON (LongviewSubscriptionIdEnumString_longview_3) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-3"
          toJSON (LongviewSubscriptionIdEnumString_longview_40) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-40"
instance Data.Aeson.FromJSON LongviewSubscriptionId
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-10")
                                          then LongviewSubscriptionIdEnumString_longview_10
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-100")
                                                then LongviewSubscriptionIdEnumString_longview_100
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-3")
                                                      then LongviewSubscriptionIdEnumString_longview_3
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview-40")
                                                            then LongviewSubscriptionIdEnumString_longview_40
                                                            else LongviewSubscriptionIdEnumOther val)
-- | Defines the data type for the schema LongviewSubscriptionPrice
-- 
-- Pricing information about this Subscription tier.
data LongviewSubscriptionPrice = LongviewSubscriptionPrice {
  -- | hourly: The hourly price, in US dollars, for this Subscription tier.
  longviewSubscriptionPriceHourly :: (GHC.Base.Maybe GHC.Types.Double)
  -- | monthly: The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
  , longviewSubscriptionPriceMonthly :: (GHC.Base.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LongviewSubscriptionPrice
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "hourly" (longviewSubscriptionPriceHourly obj) : (Data.Aeson..=) "monthly" (longviewSubscriptionPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "hourly" (longviewSubscriptionPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "monthly" (longviewSubscriptionPriceMonthly obj))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewSubscriptionPrice
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewSubscriptionPrice" (\obj -> (GHC.Base.pure LongviewSubscriptionPrice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "monthly"))