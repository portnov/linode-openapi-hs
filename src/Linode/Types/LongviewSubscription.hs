-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LongviewSubscription
module Linode.Types.LongviewSubscription where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LongviewSubscription@ in the specification.
-- 
-- A Longview Subscription represents a tier of Longview service you can subscribe to.
data LongviewSubscription = LongviewSubscription {
  -- | clients_included: The number of Longview Clients that may be created with this Subscription tier.
  longviewSubscriptionClientsIncluded :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | id: The unique ID of this Subscription tier.
  , longviewSubscriptionId :: (GHC.Maybe.Maybe LongviewSubscriptionId')
  -- | label: A display name for this Subscription tier.
  , longviewSubscriptionLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | price: Pricing information about this Subscription tier.
  , longviewSubscriptionPrice :: (GHC.Maybe.Maybe LongviewSubscriptionPrice')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewSubscription
    where toJSON obj = Data.Aeson.Types.Internal.object ("clients_included" Data.Aeson.Types.ToJSON..= longviewSubscriptionClientsIncluded obj : "id" Data.Aeson.Types.ToJSON..= longviewSubscriptionId obj : "label" Data.Aeson.Types.ToJSON..= longviewSubscriptionLabel obj : "price" Data.Aeson.Types.ToJSON..= longviewSubscriptionPrice obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("clients_included" Data.Aeson.Types.ToJSON..= longviewSubscriptionClientsIncluded obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= longviewSubscriptionId obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= longviewSubscriptionLabel obj) GHC.Base.<> ("price" Data.Aeson.Types.ToJSON..= longviewSubscriptionPrice obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewSubscription
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewSubscription" (\obj -> (((GHC.Base.pure LongviewSubscription GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "clients_included")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "price"))
-- | Create a new 'LongviewSubscription' with all required fields.
mkLongviewSubscription :: LongviewSubscription
mkLongviewSubscription = LongviewSubscription{longviewSubscriptionClientsIncluded = GHC.Maybe.Nothing,
                                              longviewSubscriptionId = GHC.Maybe.Nothing,
                                              longviewSubscriptionLabel = GHC.Maybe.Nothing,
                                              longviewSubscriptionPrice = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.LongviewSubscription.properties.id@ in the specification.
-- 
-- The unique ID of this Subscription tier.
data LongviewSubscriptionId' =
   LongviewSubscriptionId'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LongviewSubscriptionId'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LongviewSubscriptionId'EnumLongview_3 -- ^ Represents the JSON value @"longview-3"@
  | LongviewSubscriptionId'EnumLongview_10 -- ^ Represents the JSON value @"longview-10"@
  | LongviewSubscriptionId'EnumLongview_40 -- ^ Represents the JSON value @"longview-40"@
  | LongviewSubscriptionId'EnumLongview_100 -- ^ Represents the JSON value @"longview-100"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewSubscriptionId'
    where toJSON (LongviewSubscriptionId'Other val) = val
          toJSON (LongviewSubscriptionId'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LongviewSubscriptionId'EnumLongview_3) = "longview-3"
          toJSON (LongviewSubscriptionId'EnumLongview_10) = "longview-10"
          toJSON (LongviewSubscriptionId'EnumLongview_40) = "longview-40"
          toJSON (LongviewSubscriptionId'EnumLongview_100) = "longview-100"
instance Data.Aeson.Types.FromJSON.FromJSON LongviewSubscriptionId'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "longview-3" -> LongviewSubscriptionId'EnumLongview_3
                                            | val GHC.Classes.== "longview-10" -> LongviewSubscriptionId'EnumLongview_10
                                            | val GHC.Classes.== "longview-40" -> LongviewSubscriptionId'EnumLongview_40
                                            | val GHC.Classes.== "longview-100" -> LongviewSubscriptionId'EnumLongview_100
                                            | GHC.Base.otherwise -> LongviewSubscriptionId'Other val)
-- | Defines the object schema located at @components.schemas.LongviewSubscription.properties.price@ in the specification.
-- 
-- Pricing information about this Subscription tier.
data LongviewSubscriptionPrice' = LongviewSubscriptionPrice' {
  -- | hourly: The hourly price, in US dollars, for this Subscription tier.
  longviewSubscriptionPrice'Hourly :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | monthly: The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
  , longviewSubscriptionPrice'Monthly :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewSubscriptionPrice'
    where toJSON obj = Data.Aeson.Types.Internal.object ("hourly" Data.Aeson.Types.ToJSON..= longviewSubscriptionPrice'Hourly obj : "monthly" Data.Aeson.Types.ToJSON..= longviewSubscriptionPrice'Monthly obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("hourly" Data.Aeson.Types.ToJSON..= longviewSubscriptionPrice'Hourly obj) GHC.Base.<> ("monthly" Data.Aeson.Types.ToJSON..= longviewSubscriptionPrice'Monthly obj))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewSubscriptionPrice'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewSubscriptionPrice'" (\obj -> (GHC.Base.pure LongviewSubscriptionPrice' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "monthly"))
-- | Create a new 'LongviewSubscriptionPrice'' with all required fields.
mkLongviewSubscriptionPrice' :: LongviewSubscriptionPrice'
mkLongviewSubscriptionPrice' = LongviewSubscriptionPrice'{longviewSubscriptionPrice'Hourly = GHC.Maybe.Nothing,
                                                          longviewSubscriptionPrice'Monthly = GHC.Maybe.Nothing}
