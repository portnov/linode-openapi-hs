-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema IPAddressV6Slaac
module Linode.Types.IPAddressV6Slaac where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema IPAddressV6Slaac
-- 
-- A SLAAC IPv6 address that exists in Linode\'s system.
data IPAddressV6Slaac = IPAddressV6Slaac {
  -- | address: The address.
  iPAddressV6SlaacAddress :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | gateway: The default gateway for this address.
  , iPAddressV6SlaacGateway :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | linode_id: The ID of the Linode this address currently belongs to.
  , iPAddressV6SlaacLinode_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | prefix: The network prefix.
  , iPAddressV6SlaacPrefix :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | public: Whether this is a public or private IP address.
  , iPAddressV6SlaacPublic :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | rdns: The reverse DNS assigned to this address.
  , iPAddressV6SlaacRdns :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The Region this address resides in.
  , iPAddressV6SlaacRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | subnet_mask: The subnet mask.
  , iPAddressV6SlaacSubnet_mask :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of address this is.
  , iPAddressV6SlaacType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON IPAddressV6Slaac
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (iPAddressV6SlaacAddress obj) : (Data.Aeson..=) "gateway" (iPAddressV6SlaacGateway obj) : (Data.Aeson..=) "linode_id" (iPAddressV6SlaacLinode_id obj) : (Data.Aeson..=) "prefix" (iPAddressV6SlaacPrefix obj) : (Data.Aeson..=) "public" (iPAddressV6SlaacPublic obj) : (Data.Aeson..=) "rdns" (iPAddressV6SlaacRdns obj) : (Data.Aeson..=) "region" (iPAddressV6SlaacRegion obj) : (Data.Aeson..=) "subnet_mask" (iPAddressV6SlaacSubnet_mask obj) : (Data.Aeson..=) "type" (iPAddressV6SlaacType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (iPAddressV6SlaacAddress obj) GHC.Base.<> ((Data.Aeson..=) "gateway" (iPAddressV6SlaacGateway obj) GHC.Base.<> ((Data.Aeson..=) "linode_id" (iPAddressV6SlaacLinode_id obj) GHC.Base.<> ((Data.Aeson..=) "prefix" (iPAddressV6SlaacPrefix obj) GHC.Base.<> ((Data.Aeson..=) "public" (iPAddressV6SlaacPublic obj) GHC.Base.<> ((Data.Aeson..=) "rdns" (iPAddressV6SlaacRdns obj) GHC.Base.<> ((Data.Aeson..=) "region" (iPAddressV6SlaacRegion obj) GHC.Base.<> ((Data.Aeson..=) "subnet_mask" (iPAddressV6SlaacSubnet_mask obj) GHC.Base.<> (Data.Aeson..=) "type" (iPAddressV6SlaacType obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON IPAddressV6Slaac
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IPAddressV6Slaac" (\obj -> ((((((((GHC.Base.pure IPAddressV6Slaac GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rdns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subnet_mask")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))