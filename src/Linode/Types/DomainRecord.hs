-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema DomainRecord
module Linode.Types.DomainRecord where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.DomainRecord@ in the specification.
-- 
-- A single record on a Domain.
data DomainRecord = DomainRecord {
  -- | created: When this Domain Record was created.
  domainRecordCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: This Record\'s unique ID.
  , domainRecordId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | name: The name of this Record. For requests, this property\'s actual usage and whether it is required depends
  -- on the type of record this represents:
  -- 
  -- \`A\` and \`AAAA\`: The hostname or FQDN of the Record.
  -- 
  -- \`NS\`: The subdomain, if any, to use with the Domain of the Record.
  -- 
  -- \`MX\`: The mail subdomain. For example, \`sub\` for the address \`user\@sub.example.com\` under the \`example.com\`
  -- Domain. Must be an empty string (\`\"\"\`) for a Null MX Record.
  -- 
  -- \`CNAME\`: The hostname. Must be unique. Required.
  -- 
  -- \`TXT\`: The hostname.
  -- 
  -- \`SRV\`: Unused. Use the \`service\` property to set the service name for this record.
  -- 
  -- \`CAA\`: The subdomain. Omit or enter an empty string (\`\"\"\`) to apply to the entire Domain.
  -- 
  -- \`PTR\`: See our guide on how to [Configure Your Linode for Reverse DNS
  -- (rDNS)](\/docs\/guides\/configure-your-linode-for-reverse-dns).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  -- * Minimum length of 1
  , domainRecordName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | port: The port this Record points to. Only valid and required for SRV record requests.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 0.0
  , domainRecordPort :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | priority: The priority of the target host for this Record. Lower values are preferred. Only valid for
  -- MX and SRV record requests. Required for SRV record requests.
  -- 
  -- Defaults to \`0\` for MX record requests. Must be \`0\` for Null MX records.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 0.0
  , domainRecordPriority :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | protocol: The protocol this Record\'s service communicates with. An underscore (\`_\`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
  , domainRecordProtocol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | service: The name of the service. An underscore (\`_\`) is prepended and a period (\`.\`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
  , domainRecordService :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | tag: The tag portion of a CAA record. Only valid and required for CAA record requests.
  , domainRecordTag :: (GHC.Maybe.Maybe DomainRecordTag')
  -- | target: The target for this Record. For requests, this property\'s actual usage and whether it is required depends
  -- on the type of record this represents:
  -- 
  -- \`A\` and \`AAAA\`: The IP address. Use \`[remote_addr]\` to submit the IPv4 address of the request. Required.
  -- 
  -- \`NS\`: The name server. Must be a valid domain. Required.
  -- 
  -- \`MX\`: The mail server. Must be a valid domain unless creating a Null MX Record. To create a
  -- [Null MX Record](https:\/\/datatracker.ietf.org\/doc\/html\/rfc7505), first
  -- [remove](\/docs\/api\/domains\/\#domain-record-delete) any additional MX records, create an MX record with empty strings
  -- (\`\"\"\`) for the \`target\` and \`name\`. If a Domain has a Null MX record, new MX records cannot be created. Required.
  -- 
  -- \`CNAME\`: The alias. Must be a valid domain. Required.
  -- 
  -- \`TXT\`: The value. Required.
  -- 
  -- \`SRV\`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
  -- To configure for a different domain, enter a valid FQDN. For example, the value \`www\` with a Domain for
  -- \`example.com\` results in a target set to \`www.example.com\`, whereas the value \`sample.com\` results in a
  -- target set to \`sample.com\`. Required.
  -- 
  -- \`CAA\`: The value. For \`issue\` or \`issuewild\` tags, the domain of your certificate issuer. For the \`iodef\`
  -- tag, a contact or submission URL (http or mailto).
  -- 
  -- \`PTR\`: See our guide on how to [Configure Your Linode for Reverse DNS
  -- (rDNS)](\/docs\/guides\/configure-your-linode-for-reverse-dns).
  -- 
  -- With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
  , domainRecordTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ttl_sec: \"Time to Live\" - the amount of time in seconds that this Domain\'s records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
  , domainRecordTtlSec :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | type: The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see our guide on [DNS Records](\/docs\/guides\/dns-records-an-introduction).
  , domainRecordType :: (GHC.Maybe.Maybe DomainRecordType')
  -- | updated: When this Domain Record was last updated.
  , domainRecordUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | weight: The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 0.0
  , domainRecordWeight :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DomainRecord
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= domainRecordCreated obj : "id" Data.Aeson.Types.ToJSON..= domainRecordId obj : "name" Data.Aeson.Types.ToJSON..= domainRecordName obj : "port" Data.Aeson.Types.ToJSON..= domainRecordPort obj : "priority" Data.Aeson.Types.ToJSON..= domainRecordPriority obj : "protocol" Data.Aeson.Types.ToJSON..= domainRecordProtocol obj : "service" Data.Aeson.Types.ToJSON..= domainRecordService obj : "tag" Data.Aeson.Types.ToJSON..= domainRecordTag obj : "target" Data.Aeson.Types.ToJSON..= domainRecordTarget obj : "ttl_sec" Data.Aeson.Types.ToJSON..= domainRecordTtlSec obj : "type" Data.Aeson.Types.ToJSON..= domainRecordType obj : "updated" Data.Aeson.Types.ToJSON..= domainRecordUpdated obj : "weight" Data.Aeson.Types.ToJSON..= domainRecordWeight obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= domainRecordCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= domainRecordId obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= domainRecordName obj) GHC.Base.<> (("port" Data.Aeson.Types.ToJSON..= domainRecordPort obj) GHC.Base.<> (("priority" Data.Aeson.Types.ToJSON..= domainRecordPriority obj) GHC.Base.<> (("protocol" Data.Aeson.Types.ToJSON..= domainRecordProtocol obj) GHC.Base.<> (("service" Data.Aeson.Types.ToJSON..= domainRecordService obj) GHC.Base.<> (("tag" Data.Aeson.Types.ToJSON..= domainRecordTag obj) GHC.Base.<> (("target" Data.Aeson.Types.ToJSON..= domainRecordTarget obj) GHC.Base.<> (("ttl_sec" Data.Aeson.Types.ToJSON..= domainRecordTtlSec obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= domainRecordType obj) GHC.Base.<> (("updated" Data.Aeson.Types.ToJSON..= domainRecordUpdated obj) GHC.Base.<> ("weight" Data.Aeson.Types.ToJSON..= domainRecordWeight obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON DomainRecord
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DomainRecord" (\obj -> ((((((((((((GHC.Base.pure DomainRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "priority")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "service")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tag")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "target")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ttl_sec")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weight"))
-- | Create a new 'DomainRecord' with all required fields.
mkDomainRecord :: DomainRecord
mkDomainRecord = DomainRecord{domainRecordCreated = GHC.Maybe.Nothing,
                              domainRecordId = GHC.Maybe.Nothing,
                              domainRecordName = GHC.Maybe.Nothing,
                              domainRecordPort = GHC.Maybe.Nothing,
                              domainRecordPriority = GHC.Maybe.Nothing,
                              domainRecordProtocol = GHC.Maybe.Nothing,
                              domainRecordService = GHC.Maybe.Nothing,
                              domainRecordTag = GHC.Maybe.Nothing,
                              domainRecordTarget = GHC.Maybe.Nothing,
                              domainRecordTtlSec = GHC.Maybe.Nothing,
                              domainRecordType = GHC.Maybe.Nothing,
                              domainRecordUpdated = GHC.Maybe.Nothing,
                              domainRecordWeight = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.DomainRecord.properties.tag@ in the specification.
-- 
-- The tag portion of a CAA record. Only valid and required for CAA record requests.
data DomainRecordTag' =
   DomainRecordTag'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DomainRecordTag'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DomainRecordTag'EnumIssue -- ^ Represents the JSON value @"issue"@
  | DomainRecordTag'EnumIssuewild -- ^ Represents the JSON value @"issuewild"@
  | DomainRecordTag'EnumIodef -- ^ Represents the JSON value @"iodef"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DomainRecordTag'
    where toJSON (DomainRecordTag'Other val) = val
          toJSON (DomainRecordTag'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DomainRecordTag'EnumIssue) = "issue"
          toJSON (DomainRecordTag'EnumIssuewild) = "issuewild"
          toJSON (DomainRecordTag'EnumIodef) = "iodef"
instance Data.Aeson.Types.FromJSON.FromJSON DomainRecordTag'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "issue" -> DomainRecordTag'EnumIssue
                                            | val GHC.Classes.== "issuewild" -> DomainRecordTag'EnumIssuewild
                                            | val GHC.Classes.== "iodef" -> DomainRecordTag'EnumIodef
                                            | GHC.Base.otherwise -> DomainRecordTag'Other val)
-- | Defines the enum schema located at @components.schemas.DomainRecord.properties.type@ in the specification.
-- 
-- The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see our guide on [DNS Records](\/docs\/guides\/dns-records-an-introduction).
data DomainRecordType' =
   DomainRecordType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DomainRecordType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DomainRecordType'EnumA -- ^ Represents the JSON value @"A"@
  | DomainRecordType'EnumAAAA -- ^ Represents the JSON value @"AAAA"@
  | DomainRecordType'EnumNS -- ^ Represents the JSON value @"NS"@
  | DomainRecordType'EnumMX -- ^ Represents the JSON value @"MX"@
  | DomainRecordType'EnumCNAME -- ^ Represents the JSON value @"CNAME"@
  | DomainRecordType'EnumTXT -- ^ Represents the JSON value @"TXT"@
  | DomainRecordType'EnumSRV -- ^ Represents the JSON value @"SRV"@
  | DomainRecordType'EnumPTR -- ^ Represents the JSON value @"PTR"@
  | DomainRecordType'EnumCAA -- ^ Represents the JSON value @"CAA"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DomainRecordType'
    where toJSON (DomainRecordType'Other val) = val
          toJSON (DomainRecordType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DomainRecordType'EnumA) = "A"
          toJSON (DomainRecordType'EnumAAAA) = "AAAA"
          toJSON (DomainRecordType'EnumNS) = "NS"
          toJSON (DomainRecordType'EnumMX) = "MX"
          toJSON (DomainRecordType'EnumCNAME) = "CNAME"
          toJSON (DomainRecordType'EnumTXT) = "TXT"
          toJSON (DomainRecordType'EnumSRV) = "SRV"
          toJSON (DomainRecordType'EnumPTR) = "PTR"
          toJSON (DomainRecordType'EnumCAA) = "CAA"
instance Data.Aeson.Types.FromJSON.FromJSON DomainRecordType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "A" -> DomainRecordType'EnumA
                                            | val GHC.Classes.== "AAAA" -> DomainRecordType'EnumAAAA
                                            | val GHC.Classes.== "NS" -> DomainRecordType'EnumNS
                                            | val GHC.Classes.== "MX" -> DomainRecordType'EnumMX
                                            | val GHC.Classes.== "CNAME" -> DomainRecordType'EnumCNAME
                                            | val GHC.Classes.== "TXT" -> DomainRecordType'EnumTXT
                                            | val GHC.Classes.== "SRV" -> DomainRecordType'EnumSRV
                                            | val GHC.Classes.== "PTR" -> DomainRecordType'EnumPTR
                                            | val GHC.Classes.== "CAA" -> DomainRecordType'EnumCAA
                                            | GHC.Base.otherwise -> DomainRecordType'Other val)
