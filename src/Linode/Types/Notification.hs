-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Notification
module Linode.Types.Notification where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Notification
-- 
-- An important, often time-sensitive item related to your Account.
data Notification = Notification {
  -- | body: A full description of this Notification, in markdown format.  Not all Notifications include bodies.
  notificationBody :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | entity: Detailed information about the Notification.
  , notificationEntity :: (GHC.Base.Maybe NotificationEntity)
  -- | label: A short description of this Notification.
  , notificationLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | message: A human-readable description of the Notification.
  , notificationMessage :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | severity: The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.
  , notificationSeverity :: (GHC.Base.Maybe NotificationSeverity)
  -- | type: The type of Notification this is.
  , notificationType :: (GHC.Base.Maybe NotificationType)
  -- | until: If this Notification has a duration, this will be the ending time for the Event\/action. For example, if there is scheduled maintenance for one of our systems, \`until\` would be set to the end of the maintenance window.
  , notificationUntil :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | when: If this Notification is of an Event that will happen at a fixed, future time, this is when the named action will be taken. For example, if a Linode is to be migrated in response to a Security Advisory, this field will contain the approximate time the Linode will be taken offline for migration.
  , notificationWhen :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Notification
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "body" (notificationBody obj) : (Data.Aeson..=) "entity" (notificationEntity obj) : (Data.Aeson..=) "label" (notificationLabel obj) : (Data.Aeson..=) "message" (notificationMessage obj) : (Data.Aeson..=) "severity" (notificationSeverity obj) : (Data.Aeson..=) "type" (notificationType obj) : (Data.Aeson..=) "until" (notificationUntil obj) : (Data.Aeson..=) "when" (notificationWhen obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "body" (notificationBody obj) GHC.Base.<> ((Data.Aeson..=) "entity" (notificationEntity obj) GHC.Base.<> ((Data.Aeson..=) "label" (notificationLabel obj) GHC.Base.<> ((Data.Aeson..=) "message" (notificationMessage obj) GHC.Base.<> ((Data.Aeson..=) "severity" (notificationSeverity obj) GHC.Base.<> ((Data.Aeson..=) "type" (notificationType obj) GHC.Base.<> ((Data.Aeson..=) "until" (notificationUntil obj) GHC.Base.<> (Data.Aeson..=) "when" (notificationWhen obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Notification
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Notification" (\obj -> (((((((GHC.Base.pure Notification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "severity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "until")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "when"))
-- | Defines the data type for the schema NotificationEntity
-- 
-- Detailed information about the Notification.
data NotificationEntity = NotificationEntity {
  -- | id: The unique ID of the Notification\'s entity, based on the entity type.
  notificationEntityId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The current label for this Notification\'s entity.
  , notificationEntityLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity this is related to.
  , notificationEntityType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | url: The URL where you can access the object this Notification is for. If a relative URL, it is relative to the domain you retrieved the Notification from.
  , notificationEntityUrl :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NotificationEntity
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (notificationEntityId obj) : (Data.Aeson..=) "label" (notificationEntityLabel obj) : (Data.Aeson..=) "type" (notificationEntityType obj) : (Data.Aeson..=) "url" (notificationEntityUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (notificationEntityId obj) GHC.Base.<> ((Data.Aeson..=) "label" (notificationEntityLabel obj) GHC.Base.<> ((Data.Aeson..=) "type" (notificationEntityType obj) GHC.Base.<> (Data.Aeson..=) "url" (notificationEntityUrl obj))))
instance Data.Aeson.Types.FromJSON.FromJSON NotificationEntity
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NotificationEntity" (\obj -> (((GHC.Base.pure NotificationEntity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Defines the enum schema NotificationSeverity
-- 
-- The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.
data NotificationSeverity
    = NotificationSeverityEnumOther Data.Aeson.Types.Internal.Value
    | NotificationSeverityEnumTyped Data.Text.Internal.Text
    | NotificationSeverityEnumString_critical
    | NotificationSeverityEnumString_major
    | NotificationSeverityEnumString_minor
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NotificationSeverity
    where toJSON (NotificationSeverityEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NotificationSeverityEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NotificationSeverityEnumString_critical) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "critical"
          toJSON (NotificationSeverityEnumString_major) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "major"
          toJSON (NotificationSeverityEnumString_minor) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "minor"
instance Data.Aeson.FromJSON NotificationSeverity
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "critical")
                                          then NotificationSeverityEnumString_critical
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "major")
                                                then NotificationSeverityEnumString_major
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "minor")
                                                      then NotificationSeverityEnumString_minor
                                                      else NotificationSeverityEnumOther val)
-- | Defines the enum schema NotificationType
-- 
-- The type of Notification this is.
data NotificationType
    = NotificationTypeEnumOther Data.Aeson.Types.Internal.Value
    | NotificationTypeEnumTyped Data.Text.Internal.Text
    | NotificationTypeEnumString_maintenance
    | NotificationTypeEnumString_migration_imminent
    | NotificationTypeEnumString_migration_pending
    | NotificationTypeEnumString_migration_scheduled
    | NotificationTypeEnumString_notice
    | NotificationTypeEnumString_outage
    | NotificationTypeEnumString_payment_due
    | NotificationTypeEnumString_promotion
    | NotificationTypeEnumString_reboot_scheduled
    | NotificationTypeEnumString_ticket_abuse
    | NotificationTypeEnumString_ticket_important
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NotificationType
    where toJSON (NotificationTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NotificationTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NotificationTypeEnumString_maintenance) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "maintenance"
          toJSON (NotificationTypeEnumString_migration_imminent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration_imminent"
          toJSON (NotificationTypeEnumString_migration_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration_pending"
          toJSON (NotificationTypeEnumString_migration_scheduled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration_scheduled"
          toJSON (NotificationTypeEnumString_notice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "notice"
          toJSON (NotificationTypeEnumString_outage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "outage"
          toJSON (NotificationTypeEnumString_payment_due) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_due"
          toJSON (NotificationTypeEnumString_promotion) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "promotion"
          toJSON (NotificationTypeEnumString_reboot_scheduled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reboot_scheduled"
          toJSON (NotificationTypeEnumString_ticket_abuse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_abuse"
          toJSON (NotificationTypeEnumString_ticket_important) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_important"
instance Data.Aeson.FromJSON NotificationType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "maintenance")
                                          then NotificationTypeEnumString_maintenance
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration_imminent")
                                                then NotificationTypeEnumString_migration_imminent
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration_pending")
                                                      then NotificationTypeEnumString_migration_pending
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration_scheduled")
                                                            then NotificationTypeEnumString_migration_scheduled
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "notice")
                                                                  then NotificationTypeEnumString_notice
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "outage")
                                                                        then NotificationTypeEnumString_outage
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_due")
                                                                              then NotificationTypeEnumString_payment_due
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "promotion")
                                                                                    then NotificationTypeEnumString_promotion
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reboot_scheduled")
                                                                                          then NotificationTypeEnumString_reboot_scheduled
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_abuse")
                                                                                                then NotificationTypeEnumString_ticket_abuse
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_important")
                                                                                                      then NotificationTypeEnumString_ticket_important
                                                                                                      else NotificationTypeEnumOther val)