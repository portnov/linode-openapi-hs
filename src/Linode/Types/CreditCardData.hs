-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreditCardData
module Linode.Types.CreditCardData where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.CreditCardData@ in the specification.
-- 
-- Credit card information.
data CreditCardData = CreditCardData {
  -- | card_type: The type of credit card.
  creditCardDataCardType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expiry: The expiration month and year of the credit card.
  , creditCardDataExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | last_four: The last four digits of the credit card number.
  , creditCardDataLastFour :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditCardData
    where toJSON obj = Data.Aeson.Types.Internal.object ("card_type" Data.Aeson.Types.ToJSON..= creditCardDataCardType obj : "expiry" Data.Aeson.Types.ToJSON..= creditCardDataExpiry obj : "last_four" Data.Aeson.Types.ToJSON..= creditCardDataLastFour obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("card_type" Data.Aeson.Types.ToJSON..= creditCardDataCardType obj) GHC.Base.<> (("expiry" Data.Aeson.Types.ToJSON..= creditCardDataExpiry obj) GHC.Base.<> ("last_four" Data.Aeson.Types.ToJSON..= creditCardDataLastFour obj)))
instance Data.Aeson.Types.FromJSON.FromJSON CreditCardData
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditCardData" (\obj -> ((GHC.Base.pure CreditCardData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_four"))
-- | Create a new 'CreditCardData' with all required fields.
mkCreditCardData :: CreditCardData
mkCreditCardData = CreditCardData{creditCardDataCardType = GHC.Maybe.Nothing,
                                  creditCardDataExpiry = GHC.Maybe.Nothing,
                                  creditCardDataLastFour = GHC.Maybe.Nothing}
