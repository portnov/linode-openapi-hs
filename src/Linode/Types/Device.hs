-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Device
module Linode.Types.Device where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Device
-- 
-- Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
-- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
data Device = Device {
  -- | disk_id: The Disk ID, or \`null\` if a Volume is assigned to this slot.
  deviceDisk_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | volume_id: The Volume ID, or \`null\` if a Disk is assigned to this slot.
  , deviceVolume_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Device
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "disk_id" (deviceDisk_id obj) : (Data.Aeson..=) "volume_id" (deviceVolume_id obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "disk_id" (deviceDisk_id obj) GHC.Base.<> (Data.Aeson..=) "volume_id" (deviceVolume_id obj))
instance Data.Aeson.Types.FromJSON.FromJSON Device
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Device" (\obj -> (GHC.Base.pure Device GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disk_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "volume_id"))