-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema IPv6RangeBGP
module Linode.Types.IPv6RangeBGP where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.IPv6RangeBGP@ in the specification.
-- 
-- An object representing an IPv6 range.
data IPv6RangeBGP = IPv6RangeBGP {
  -- | is_bgp: Whether this IPv6 range is shared.
  iPv6RangeBGPIsBgp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | linodes: A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
  , iPv6RangeBGPLinodes :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | prefix: The prefix length of the address, denoting how many addresses can be assigned from this range calculated as 2 \<sup>128-prefix\<\/sup>.
  , iPv6RangeBGPPrefix :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | range: The IPv6 range of addresses in this pool.
  , iPv6RangeBGPRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | region: The region for this range of IPv6 addresses.
  , iPv6RangeBGPRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IPv6RangeBGP
    where toJSON obj = Data.Aeson.Types.Internal.object ("is_bgp" Data.Aeson.Types.ToJSON..= iPv6RangeBGPIsBgp obj : "linodes" Data.Aeson.Types.ToJSON..= iPv6RangeBGPLinodes obj : "prefix" Data.Aeson.Types.ToJSON..= iPv6RangeBGPPrefix obj : "range" Data.Aeson.Types.ToJSON..= iPv6RangeBGPRange obj : "region" Data.Aeson.Types.ToJSON..= iPv6RangeBGPRegion obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("is_bgp" Data.Aeson.Types.ToJSON..= iPv6RangeBGPIsBgp obj) GHC.Base.<> (("linodes" Data.Aeson.Types.ToJSON..= iPv6RangeBGPLinodes obj) GHC.Base.<> (("prefix" Data.Aeson.Types.ToJSON..= iPv6RangeBGPPrefix obj) GHC.Base.<> (("range" Data.Aeson.Types.ToJSON..= iPv6RangeBGPRange obj) GHC.Base.<> ("region" Data.Aeson.Types.ToJSON..= iPv6RangeBGPRegion obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON IPv6RangeBGP
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IPv6RangeBGP" (\obj -> ((((GHC.Base.pure IPv6RangeBGP GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_bgp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region"))
-- | Create a new 'IPv6RangeBGP' with all required fields.
mkIPv6RangeBGP :: IPv6RangeBGP
mkIPv6RangeBGP = IPv6RangeBGP{iPv6RangeBGPIsBgp = GHC.Maybe.Nothing,
                              iPv6RangeBGPLinodes = GHC.Maybe.Nothing,
                              iPv6RangeBGPPrefix = GHC.Maybe.Nothing,
                              iPv6RangeBGPRange = GHC.Maybe.Nothing,
                              iPv6RangeBGPRegion = GHC.Maybe.Nothing}
