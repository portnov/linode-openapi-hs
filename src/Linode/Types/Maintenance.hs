-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Maintenance
module Linode.Types.Maintenance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Maintenance@ in the specification.
-- 
-- Information about maintenance affecting an entity.
data Maintenance = Maintenance {
  -- | entity: The entity being affected by maintenance.
  maintenanceEntity :: (GHC.Maybe.Maybe MaintenanceEntity')
  -- | reason: The reason maintenance is being performed.
  , maintenanceReason :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status: The maintenance status.
  , maintenanceStatus :: (GHC.Maybe.Maybe MaintenanceStatus')
  -- | type: The type of maintenance.
  , maintenanceType :: (GHC.Maybe.Maybe MaintenanceType')
  -- | when: When the maintenance will begin.
  -- 
  -- [Filterable](\/docs\/api\/\#filtering-and-sorting) with the following parameters:
  -- 
  -- * A single value in date-time string format (\"%Y-%m-%dT%H:%M:%S\"), which returns only matches to that value.
  -- 
  -- * A dictionary containing pairs of inequality operator string keys (\"+or\", \"+gt\", \"+gte\", \"+lt\", \"+lte\",
  -- or \"+neq\") and single date-time string format values (\"%Y-%m-%dT%H:%M:%S\"). \"+or\" accepts an array of values that
  -- may consist of single date-time strings or dictionaries of inequality operator pairs.
  , maintenanceWhen :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Maintenance
    where toJSON obj = Data.Aeson.Types.Internal.object ("entity" Data.Aeson.Types.ToJSON..= maintenanceEntity obj : "reason" Data.Aeson.Types.ToJSON..= maintenanceReason obj : "status" Data.Aeson.Types.ToJSON..= maintenanceStatus obj : "type" Data.Aeson.Types.ToJSON..= maintenanceType obj : "when" Data.Aeson.Types.ToJSON..= maintenanceWhen obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("entity" Data.Aeson.Types.ToJSON..= maintenanceEntity obj) GHC.Base.<> (("reason" Data.Aeson.Types.ToJSON..= maintenanceReason obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= maintenanceStatus obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= maintenanceType obj) GHC.Base.<> ("when" Data.Aeson.Types.ToJSON..= maintenanceWhen obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON Maintenance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Maintenance" (\obj -> ((((GHC.Base.pure Maintenance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "when"))
-- | Create a new 'Maintenance' with all required fields.
mkMaintenance :: Maintenance
mkMaintenance = Maintenance{maintenanceEntity = GHC.Maybe.Nothing,
                            maintenanceReason = GHC.Maybe.Nothing,
                            maintenanceStatus = GHC.Maybe.Nothing,
                            maintenanceType = GHC.Maybe.Nothing,
                            maintenanceWhen = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.Maintenance.properties.entity@ in the specification.
-- 
-- The entity being affected by maintenance.
data MaintenanceEntity' = MaintenanceEntity' {
  -- | id: The id of the entity being affected by maintenance.
  maintenanceEntity'Id :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | label: The label of the entity being affected by maintenance.
  , maintenanceEntity'Label :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity.
  , maintenanceEntity'Type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | url: The API endpoint prefix to use in combination with the entity id to find specific information about the entity.
  , maintenanceEntity'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MaintenanceEntity'
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= maintenanceEntity'Id obj : "label" Data.Aeson.Types.ToJSON..= maintenanceEntity'Label obj : "type" Data.Aeson.Types.ToJSON..= maintenanceEntity'Type obj : "url" Data.Aeson.Types.ToJSON..= maintenanceEntity'Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= maintenanceEntity'Id obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= maintenanceEntity'Label obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= maintenanceEntity'Type obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= maintenanceEntity'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON MaintenanceEntity'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "MaintenanceEntity'" (\obj -> (((GHC.Base.pure MaintenanceEntity' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'MaintenanceEntity'' with all required fields.
mkMaintenanceEntity' :: MaintenanceEntity'
mkMaintenanceEntity' = MaintenanceEntity'{maintenanceEntity'Id = GHC.Maybe.Nothing,
                                          maintenanceEntity'Label = GHC.Maybe.Nothing,
                                          maintenanceEntity'Type = GHC.Maybe.Nothing,
                                          maintenanceEntity'Url = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Maintenance.properties.status@ in the specification.
-- 
-- The maintenance status.
data MaintenanceStatus' =
   MaintenanceStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | MaintenanceStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | MaintenanceStatus'EnumPending -- ^ Represents the JSON value @"pending"@
  | MaintenanceStatus'EnumStarted -- ^ Represents the JSON value @"started"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MaintenanceStatus'
    where toJSON (MaintenanceStatus'Other val) = val
          toJSON (MaintenanceStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (MaintenanceStatus'EnumPending) = "pending"
          toJSON (MaintenanceStatus'EnumStarted) = "started"
instance Data.Aeson.Types.FromJSON.FromJSON MaintenanceStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "pending" -> MaintenanceStatus'EnumPending
                                            | val GHC.Classes.== "started" -> MaintenanceStatus'EnumStarted
                                            | GHC.Base.otherwise -> MaintenanceStatus'Other val)
-- | Defines the enum schema located at @components.schemas.Maintenance.properties.type@ in the specification.
-- 
-- The type of maintenance.
data MaintenanceType' =
   MaintenanceType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | MaintenanceType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | MaintenanceType'EnumReboot -- ^ Represents the JSON value @"reboot"@
  | MaintenanceType'EnumColdMigration -- ^ Represents the JSON value @"cold_migration"@
  | MaintenanceType'EnumLiveMigration -- ^ Represents the JSON value @"live_migration"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MaintenanceType'
    where toJSON (MaintenanceType'Other val) = val
          toJSON (MaintenanceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (MaintenanceType'EnumReboot) = "reboot"
          toJSON (MaintenanceType'EnumColdMigration) = "cold_migration"
          toJSON (MaintenanceType'EnumLiveMigration) = "live_migration"
instance Data.Aeson.Types.FromJSON.FromJSON MaintenanceType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "reboot" -> MaintenanceType'EnumReboot
                                            | val GHC.Classes.== "cold_migration" -> MaintenanceType'EnumColdMigration
                                            | val GHC.Classes.== "live_migration" -> MaintenanceType'EnumLiveMigration
                                            | GHC.Base.otherwise -> MaintenanceType'Other val)
