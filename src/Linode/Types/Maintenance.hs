-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Maintenance
module Linode.Types.Maintenance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Maintenance
-- 
-- Information about maintenance affecting an entity.
data Maintenance = Maintenance {
  -- | entity: The entity being affected by maintenance.
  maintenanceEntity :: (GHC.Base.Maybe MaintenanceEntity)
  -- | reason: The reason maintenance is being performed.
  , maintenanceReason :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | status: The maintenance status.
  , maintenanceStatus :: (GHC.Base.Maybe MaintenanceStatus)
  -- | type: The type of maintenance.
  , maintenanceType :: (GHC.Base.Maybe MaintenanceType)
  -- | when: When the maintenance will begin.
  -- 
  -- [Filterable](\/docs\/api\/\#filtering-and-sorting) with the following parameters:
  -- 
  -- * A single value in date-time string format (\"%Y-%m-%dT%H:%M:%S\"), which returns only matches to that value.
  -- 
  -- * A dictionary containing pairs of inequality operator string keys (\"+or\", \"+gt\", \"+gte\", \"+lt\", \"+lte\",
  -- or \"+neq\") and single date-time string format values (\"%Y-%m-%dT%H:%M:%S\"). \"+or\" accepts an array of values that
  -- may consist of single date-time strings or dictionaries of inequality operator pairs.
  , maintenanceWhen :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Maintenance
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "entity" (maintenanceEntity obj) : (Data.Aeson..=) "reason" (maintenanceReason obj) : (Data.Aeson..=) "status" (maintenanceStatus obj) : (Data.Aeson..=) "type" (maintenanceType obj) : (Data.Aeson..=) "when" (maintenanceWhen obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "entity" (maintenanceEntity obj) GHC.Base.<> ((Data.Aeson..=) "reason" (maintenanceReason obj) GHC.Base.<> ((Data.Aeson..=) "status" (maintenanceStatus obj) GHC.Base.<> ((Data.Aeson..=) "type" (maintenanceType obj) GHC.Base.<> (Data.Aeson..=) "when" (maintenanceWhen obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON Maintenance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Maintenance" (\obj -> ((((GHC.Base.pure Maintenance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "when"))
-- | Defines the data type for the schema MaintenanceEntity
-- 
-- The entity being affected by maintenance.
data MaintenanceEntity = MaintenanceEntity {
  -- | id: The id of the entity being affected by maintenance.
  maintenanceEntityId :: (GHC.Base.Maybe GHC.Types.Double)
  -- | label: The label of the entity being affected by maintenance.
  , maintenanceEntityLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity.
  , maintenanceEntityType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | url: The API endpoint prefix to use in combination with the entity id to find specific information about the entity.
  , maintenanceEntityUrl :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON MaintenanceEntity
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (maintenanceEntityId obj) : (Data.Aeson..=) "label" (maintenanceEntityLabel obj) : (Data.Aeson..=) "type" (maintenanceEntityType obj) : (Data.Aeson..=) "url" (maintenanceEntityUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (maintenanceEntityId obj) GHC.Base.<> ((Data.Aeson..=) "label" (maintenanceEntityLabel obj) GHC.Base.<> ((Data.Aeson..=) "type" (maintenanceEntityType obj) GHC.Base.<> (Data.Aeson..=) "url" (maintenanceEntityUrl obj))))
instance Data.Aeson.Types.FromJSON.FromJSON MaintenanceEntity
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "MaintenanceEntity" (\obj -> (((GHC.Base.pure MaintenanceEntity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Defines the enum schema MaintenanceStatus
-- 
-- The maintenance status.
data MaintenanceStatus
    = MaintenanceStatusEnumOther Data.Aeson.Types.Internal.Value
    | MaintenanceStatusEnumTyped Data.Text.Internal.Text
    | MaintenanceStatusEnumString_pending
    | MaintenanceStatusEnumString_started
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MaintenanceStatus
    where toJSON (MaintenanceStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MaintenanceStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MaintenanceStatusEnumString_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (MaintenanceStatusEnumString_started) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "started"
instance Data.Aeson.FromJSON MaintenanceStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                          then MaintenanceStatusEnumString_pending
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "started")
                                                then MaintenanceStatusEnumString_started
                                                else MaintenanceStatusEnumOther val)
-- | Defines the enum schema MaintenanceType
-- 
-- The type of maintenance.
data MaintenanceType
    = MaintenanceTypeEnumOther Data.Aeson.Types.Internal.Value
    | MaintenanceTypeEnumTyped Data.Text.Internal.Text
    | MaintenanceTypeEnumString_cold_migration
    | MaintenanceTypeEnumString_live_migration
    | MaintenanceTypeEnumString_reboot
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MaintenanceType
    where toJSON (MaintenanceTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MaintenanceTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MaintenanceTypeEnumString_cold_migration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cold_migration"
          toJSON (MaintenanceTypeEnumString_live_migration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "live_migration"
          toJSON (MaintenanceTypeEnumString_reboot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reboot"
instance Data.Aeson.FromJSON MaintenanceType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cold_migration")
                                          then MaintenanceTypeEnumString_cold_migration
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "live_migration")
                                                then MaintenanceTypeEnumString_live_migration
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reboot")
                                                      then MaintenanceTypeEnumString_reboot
                                                      else MaintenanceTypeEnumOther val)