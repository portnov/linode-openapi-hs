-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LKECluster
module Linode.Types.LKECluster where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema LKECluster
-- 
-- A Kubernetes cluster.
data LKECluster = LKECluster {
  -- | control_plane: Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
  lKEClusterControl_plane :: (GHC.Base.Maybe LKEClusterControl_plane)
  -- | created: When this Kubernetes cluster was created.
  , lKEClusterCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: This Kubernetes cluster\'s unique ID.
  , lKEClusterId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | k8s_version: The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
  , lKEClusterK8s_version :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: This Kubernetes cluster\'s unique label for display purposes only.
  -- Labels have the following constraints:
  -- 
  --   * UTF-8 characters will be returned by the API using escape
  --     sequences of their Unicode code points. For example, the
  --     Japanese character *„Åã* is 3 bytes in UTF-8 (\`0xE382AB\`). Its
  --     Unicode code point is 2 bytes (\`0x30AB\`). APIv4 supports this
  --     character and the API will return it as the escape sequence
  --     using six 1 byte characters which represent 2 bytes of Unicode
  --     code point (\`\"\\u30ab\"\`).
  --   * 4 byte UTF-8 characters are not supported.
  --   * If the label is entirely composed of UTF-8 characters, the API
  --     response will return the code points using up to 193 1 byte
  --     characters.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 1
  , lKEClusterLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: This Kubernetes cluster\'s location.
  , lKEClusterRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | tags: An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
  , lKEClusterTags :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | updated: When this Kubernetes cluster was updated.
  , lKEClusterUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKECluster
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "control_plane" (lKEClusterControl_plane obj) : (Data.Aeson..=) "created" (lKEClusterCreated obj) : (Data.Aeson..=) "id" (lKEClusterId obj) : (Data.Aeson..=) "k8s_version" (lKEClusterK8s_version obj) : (Data.Aeson..=) "label" (lKEClusterLabel obj) : (Data.Aeson..=) "region" (lKEClusterRegion obj) : (Data.Aeson..=) "tags" (lKEClusterTags obj) : (Data.Aeson..=) "updated" (lKEClusterUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "control_plane" (lKEClusterControl_plane obj) GHC.Base.<> ((Data.Aeson..=) "created" (lKEClusterCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (lKEClusterId obj) GHC.Base.<> ((Data.Aeson..=) "k8s_version" (lKEClusterK8s_version obj) GHC.Base.<> ((Data.Aeson..=) "label" (lKEClusterLabel obj) GHC.Base.<> ((Data.Aeson..=) "region" (lKEClusterRegion obj) GHC.Base.<> ((Data.Aeson..=) "tags" (lKEClusterTags obj) GHC.Base.<> (Data.Aeson..=) "updated" (lKEClusterUpdated obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON LKECluster
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKECluster" (\obj -> (((((((GHC.Base.pure LKECluster GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "control_plane")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "k8s_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema LKEClusterControl_plane
-- 
-- Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
data LKEClusterControl_plane = LKEClusterControl_plane {
  -- | high_availability: Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to \`false\`.
  lKEClusterControl_planeHigh_availability :: (GHC.Base.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKEClusterControl_plane
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "high_availability" (lKEClusterControl_planeHigh_availability obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "high_availability" (lKEClusterControl_planeHigh_availability obj))
instance Data.Aeson.Types.FromJSON.FromJSON LKEClusterControl_plane
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKEClusterControl_plane" (\obj -> GHC.Base.pure LKEClusterControl_plane GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "high_availability"))