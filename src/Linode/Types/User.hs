-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema User
module Linode.Types.User where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema User
-- 
-- A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they\'ve been granted access to.
data User = User {
  -- | email: The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
  userEmail :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | restricted: If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET \/account\/users\/{username}\/grants](\/docs\/api\/account\/\#users-grants-view)) for details on how to configure grants for a restricted User.
  , userRestricted :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | ssh_keys: A list of SSH Key labels added by this User.
  -- 
  -- Users can add keys with the SSH Key Add ([POST \/profile\/sshkeys](\/docs\/api\/profile\/\#ssh-key-add)) command.
  -- 
  -- These keys are deployed when this User is included in the \`authorized_users\`
  -- field of the following requests:
  -- - Linode Create ([POST \/linode\/instances](\/docs\/api\/linode-instances\/\#linode-create))
  -- - Linode Rebuild ([POST \/linode\/instances\/{linodeId}\/rebuild](\/docs\/api\/linode-instances\/\#linode-rebuild))
  -- - Disk Create ([POST \/linode\/instances\/{linodeId}\/disks](\/docs\/api\/linode-instances\/\#disk-create))
  , userSsh_keys :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | tfa_enabled: A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST \/profile\/tfa-enable](\/docs\/api\/profile\/\#two-factor-secret-create)) endpoint to enable TFA.
  , userTfa_enabled :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | username: The User\'s username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'^[a-zA-Z0-9]((?![_-]{2,})[a-zA-Z0-9-_])+[a-zA-Z0-9]\$\'
  , userUsername :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON User
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "email" (userEmail obj) : (Data.Aeson..=) "restricted" (userRestricted obj) : (Data.Aeson..=) "ssh_keys" (userSsh_keys obj) : (Data.Aeson..=) "tfa_enabled" (userTfa_enabled obj) : (Data.Aeson..=) "username" (userUsername obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "email" (userEmail obj) GHC.Base.<> ((Data.Aeson..=) "restricted" (userRestricted obj) GHC.Base.<> ((Data.Aeson..=) "ssh_keys" (userSsh_keys obj) GHC.Base.<> ((Data.Aeson..=) "tfa_enabled" (userTfa_enabled obj) GHC.Base.<> (Data.Aeson..=) "username" (userUsername obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON User
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "User" (\obj -> ((((GHC.Base.pure User GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "restricted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssh_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tfa_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))