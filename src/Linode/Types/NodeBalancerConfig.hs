-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema NodeBalancerConfig
module Linode.Types.NodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.NodeBalancerConfig@ in the specification.
-- 
-- A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.
-- 
-- NodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.
data NodeBalancerConfig = NodeBalancerConfig {
  -- | algorithm: What algorithm this NodeBalancer should use for routing traffic to backends.
  nodeBalancerConfigAlgorithm :: (GHC.Maybe.Maybe NodeBalancerConfigAlgorithm')
  -- | check: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
  -- * If \`none\` no check is performed.
  -- * \`connection\` requires only a connection to the backend to succeed.
  -- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
  --   the response returned matches what is expected.
  , nodeBalancerConfigCheck :: (GHC.Maybe.Maybe NodeBalancerConfigCheck')
  -- | check_attempts: How many times to attempt a check before considering a backend to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , nodeBalancerConfigCheckAttempts :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | check_body: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
  , nodeBalancerConfigCheckBody :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | check_interval: How often, in seconds, to check that backends are up and serving requests.
  , nodeBalancerConfigCheckInterval :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | check_passive: If true, any response from this backend with a \`5xx\` status code will be enough for it to be considered unhealthy and taken out of rotation.
  , nodeBalancerConfigCheckPassive :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | check_path: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^[a-zA-Z0-9\\\/\\-%?&=.]*\$\'
  , nodeBalancerConfigCheckPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | check_timeout: How long, in seconds, to wait for a check attempt before considering it failed.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , nodeBalancerConfigCheckTimeout :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | cipher_suite: What ciphers to use for SSL connections served by this NodeBalancer.
  -- 
  -- * \`legacy\` is considered insecure and should only be used if necessary.
  , nodeBalancerConfigCipherSuite :: (GHC.Maybe.Maybe NodeBalancerConfigCipherSuite')
  -- | id: This config\'s unique ID
  , nodeBalancerConfigId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | nodebalancer_id: The ID for the NodeBalancer this config belongs to.
  , nodeBalancerConfigNodebalancerId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | nodes_status: A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
  , nodeBalancerConfigNodesStatus :: (GHC.Maybe.Maybe NodeBalancerConfigNodesStatus')
  -- | port: The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can\'t have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 1.0
  , nodeBalancerConfigPort :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | protocol: The protocol this port is configured to serve.
  -- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
  -- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
  , nodeBalancerConfigProtocol :: (GHC.Maybe.Maybe NodeBalancerConfigProtocol')
  -- | proxy_protocol: ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
  -- 
  -- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
  -- * If set to \`v1\`, the human-readable header format (Version 1) is used.
  -- * If set to \`v2\`, the binary header format (Version 2) is used.
  , nodeBalancerConfigProxyProtocol :: (GHC.Maybe.Maybe NodeBalancerConfigProxyProtocol')
  -- | ssl_cert: The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
  -- certificate and Certificate Authority chain) that should be served on this
  -- NodeBalancerConfig\'s port.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSslCert :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_commonname: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSslCommonname :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_fingerprint: The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSslFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ssl_key: The PEM-formatted private key for the SSL certificate set in the \`ssl_cert\` field.
  -- 
  -- Line breaks must be represented as \"\\n\" in the string.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSslKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | stickiness: Controls how session stickiness is handled on this port.
  -- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
  -- * If set to \`table\` sessions from the same remote address will be routed to the same
  --   backend.
  -- 
  -- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
  --   routed to the same backend based on a cookie set by the NodeBalancer.
  , nodeBalancerConfigStickiness :: (GHC.Maybe.Maybe NodeBalancerConfigStickiness')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfig
    where toJSON obj = Data.Aeson.Types.Internal.object ("algorithm" Data.Aeson.Types.ToJSON..= nodeBalancerConfigAlgorithm obj : "check" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheck obj : "check_attempts" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckAttempts obj : "check_body" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckBody obj : "check_interval" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckInterval obj : "check_passive" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckPassive obj : "check_path" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckPath obj : "check_timeout" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckTimeout obj : "cipher_suite" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCipherSuite obj : "id" Data.Aeson.Types.ToJSON..= nodeBalancerConfigId obj : "nodebalancer_id" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodebalancerId obj : "nodes_status" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodesStatus obj : "port" Data.Aeson.Types.ToJSON..= nodeBalancerConfigPort obj : "protocol" Data.Aeson.Types.ToJSON..= nodeBalancerConfigProtocol obj : "proxy_protocol" Data.Aeson.Types.ToJSON..= nodeBalancerConfigProxyProtocol obj : "ssl_cert" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslCert obj : "ssl_commonname" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslCommonname obj : "ssl_fingerprint" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslFingerprint obj : "ssl_key" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslKey obj : "stickiness" Data.Aeson.Types.ToJSON..= nodeBalancerConfigStickiness obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("algorithm" Data.Aeson.Types.ToJSON..= nodeBalancerConfigAlgorithm obj) GHC.Base.<> (("check" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheck obj) GHC.Base.<> (("check_attempts" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckAttempts obj) GHC.Base.<> (("check_body" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckBody obj) GHC.Base.<> (("check_interval" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckInterval obj) GHC.Base.<> (("check_passive" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckPassive obj) GHC.Base.<> (("check_path" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckPath obj) GHC.Base.<> (("check_timeout" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCheckTimeout obj) GHC.Base.<> (("cipher_suite" Data.Aeson.Types.ToJSON..= nodeBalancerConfigCipherSuite obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= nodeBalancerConfigId obj) GHC.Base.<> (("nodebalancer_id" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodebalancerId obj) GHC.Base.<> (("nodes_status" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodesStatus obj) GHC.Base.<> (("port" Data.Aeson.Types.ToJSON..= nodeBalancerConfigPort obj) GHC.Base.<> (("protocol" Data.Aeson.Types.ToJSON..= nodeBalancerConfigProtocol obj) GHC.Base.<> (("proxy_protocol" Data.Aeson.Types.ToJSON..= nodeBalancerConfigProxyProtocol obj) GHC.Base.<> (("ssl_cert" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslCert obj) GHC.Base.<> (("ssl_commonname" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslCommonname obj) GHC.Base.<> (("ssl_fingerprint" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslFingerprint obj) GHC.Base.<> (("ssl_key" Data.Aeson.Types.ToJSON..= nodeBalancerConfigSslKey obj) GHC.Base.<> ("stickiness" Data.Aeson.Types.ToJSON..= nodeBalancerConfigStickiness obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfig
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerConfig" (\obj -> (((((((((((((((((((GHC.Base.pure NodeBalancerConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_attempts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_passive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cipher_suite")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proxy_protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_cert")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_commonname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stickiness"))
-- | Create a new 'NodeBalancerConfig' with all required fields.
mkNodeBalancerConfig :: NodeBalancerConfig
mkNodeBalancerConfig = NodeBalancerConfig{nodeBalancerConfigAlgorithm = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheck = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheckAttempts = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheckBody = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheckInterval = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheckPassive = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheckPath = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCheckTimeout = GHC.Maybe.Nothing,
                                          nodeBalancerConfigCipherSuite = GHC.Maybe.Nothing,
                                          nodeBalancerConfigId = GHC.Maybe.Nothing,
                                          nodeBalancerConfigNodebalancerId = GHC.Maybe.Nothing,
                                          nodeBalancerConfigNodesStatus = GHC.Maybe.Nothing,
                                          nodeBalancerConfigPort = GHC.Maybe.Nothing,
                                          nodeBalancerConfigProtocol = GHC.Maybe.Nothing,
                                          nodeBalancerConfigProxyProtocol = GHC.Maybe.Nothing,
                                          nodeBalancerConfigSslCert = GHC.Maybe.Nothing,
                                          nodeBalancerConfigSslCommonname = GHC.Maybe.Nothing,
                                          nodeBalancerConfigSslFingerprint = GHC.Maybe.Nothing,
                                          nodeBalancerConfigSslKey = GHC.Maybe.Nothing,
                                          nodeBalancerConfigStickiness = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.NodeBalancerConfig.properties.algorithm@ in the specification.
-- 
-- What algorithm this NodeBalancer should use for routing traffic to backends.
data NodeBalancerConfigAlgorithm' =
   NodeBalancerConfigAlgorithm'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerConfigAlgorithm'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerConfigAlgorithm'EnumRoundrobin -- ^ Represents the JSON value @"roundrobin"@
  | NodeBalancerConfigAlgorithm'EnumLeastconn -- ^ Represents the JSON value @"leastconn"@
  | NodeBalancerConfigAlgorithm'EnumSource -- ^ Represents the JSON value @"source"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigAlgorithm'
    where toJSON (NodeBalancerConfigAlgorithm'Other val) = val
          toJSON (NodeBalancerConfigAlgorithm'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerConfigAlgorithm'EnumRoundrobin) = "roundrobin"
          toJSON (NodeBalancerConfigAlgorithm'EnumLeastconn) = "leastconn"
          toJSON (NodeBalancerConfigAlgorithm'EnumSource) = "source"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigAlgorithm'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "roundrobin" -> NodeBalancerConfigAlgorithm'EnumRoundrobin
                                            | val GHC.Classes.== "leastconn" -> NodeBalancerConfigAlgorithm'EnumLeastconn
                                            | val GHC.Classes.== "source" -> NodeBalancerConfigAlgorithm'EnumSource
                                            | GHC.Base.otherwise -> NodeBalancerConfigAlgorithm'Other val)
-- | Defines the enum schema located at @components.schemas.NodeBalancerConfig.properties.check@ in the specification.
-- 
-- The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
-- * If \`none\` no check is performed.
-- * \`connection\` requires only a connection to the backend to succeed.
-- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
--   the response returned matches what is expected.
data NodeBalancerConfigCheck' =
   NodeBalancerConfigCheck'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerConfigCheck'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerConfigCheck'EnumNone -- ^ Represents the JSON value @"none"@
  | NodeBalancerConfigCheck'EnumConnection -- ^ Represents the JSON value @"connection"@
  | NodeBalancerConfigCheck'EnumHttp -- ^ Represents the JSON value @"http"@
  | NodeBalancerConfigCheck'EnumHttpBody -- ^ Represents the JSON value @"http_body"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigCheck'
    where toJSON (NodeBalancerConfigCheck'Other val) = val
          toJSON (NodeBalancerConfigCheck'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerConfigCheck'EnumNone) = "none"
          toJSON (NodeBalancerConfigCheck'EnumConnection) = "connection"
          toJSON (NodeBalancerConfigCheck'EnumHttp) = "http"
          toJSON (NodeBalancerConfigCheck'EnumHttpBody) = "http_body"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigCheck'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> NodeBalancerConfigCheck'EnumNone
                                            | val GHC.Classes.== "connection" -> NodeBalancerConfigCheck'EnumConnection
                                            | val GHC.Classes.== "http" -> NodeBalancerConfigCheck'EnumHttp
                                            | val GHC.Classes.== "http_body" -> NodeBalancerConfigCheck'EnumHttpBody
                                            | GHC.Base.otherwise -> NodeBalancerConfigCheck'Other val)
-- | Defines the enum schema located at @components.schemas.NodeBalancerConfig.properties.cipher_suite@ in the specification.
-- 
-- What ciphers to use for SSL connections served by this NodeBalancer.
-- 
-- * \`legacy\` is considered insecure and should only be used if necessary.
data NodeBalancerConfigCipherSuite' =
   NodeBalancerConfigCipherSuite'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerConfigCipherSuite'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerConfigCipherSuite'EnumRecommended -- ^ Represents the JSON value @"recommended"@
  | NodeBalancerConfigCipherSuite'EnumLegacy -- ^ Represents the JSON value @"legacy"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigCipherSuite'
    where toJSON (NodeBalancerConfigCipherSuite'Other val) = val
          toJSON (NodeBalancerConfigCipherSuite'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerConfigCipherSuite'EnumRecommended) = "recommended"
          toJSON (NodeBalancerConfigCipherSuite'EnumLegacy) = "legacy"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigCipherSuite'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "recommended" -> NodeBalancerConfigCipherSuite'EnumRecommended
                                            | val GHC.Classes.== "legacy" -> NodeBalancerConfigCipherSuite'EnumLegacy
                                            | GHC.Base.otherwise -> NodeBalancerConfigCipherSuite'Other val)
-- | Defines the object schema located at @components.schemas.NodeBalancerConfig.properties.nodes_status@ in the specification.
-- 
-- A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
data NodeBalancerConfigNodesStatus' = NodeBalancerConfigNodesStatus' {
  -- | down: The number of backends considered to be \"DOWN\" and unhealthy.  These are not in rotation, and not serving requests.
  nodeBalancerConfigNodesStatus'Down :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | up: The number of backends considered to be \"UP\" and healthy, and that are serving requests.
  , nodeBalancerConfigNodesStatus'Up :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigNodesStatus'
    where toJSON obj = Data.Aeson.Types.Internal.object ("down" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodesStatus'Down obj : "up" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodesStatus'Up obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("down" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodesStatus'Down obj) GHC.Base.<> ("up" Data.Aeson.Types.ToJSON..= nodeBalancerConfigNodesStatus'Up obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigNodesStatus'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerConfigNodesStatus'" (\obj -> (GHC.Base.pure NodeBalancerConfigNodesStatus' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "down")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "up"))
-- | Create a new 'NodeBalancerConfigNodesStatus'' with all required fields.
mkNodeBalancerConfigNodesStatus' :: NodeBalancerConfigNodesStatus'
mkNodeBalancerConfigNodesStatus' = NodeBalancerConfigNodesStatus'{nodeBalancerConfigNodesStatus'Down = GHC.Maybe.Nothing,
                                                                  nodeBalancerConfigNodesStatus'Up = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.NodeBalancerConfig.properties.protocol@ in the specification.
-- 
-- The protocol this port is configured to serve.
-- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
-- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
data NodeBalancerConfigProtocol' =
   NodeBalancerConfigProtocol'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerConfigProtocol'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerConfigProtocol'EnumHttp -- ^ Represents the JSON value @"http"@
  | NodeBalancerConfigProtocol'EnumHttps -- ^ Represents the JSON value @"https"@
  | NodeBalancerConfigProtocol'EnumTcp -- ^ Represents the JSON value @"tcp"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigProtocol'
    where toJSON (NodeBalancerConfigProtocol'Other val) = val
          toJSON (NodeBalancerConfigProtocol'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerConfigProtocol'EnumHttp) = "http"
          toJSON (NodeBalancerConfigProtocol'EnumHttps) = "https"
          toJSON (NodeBalancerConfigProtocol'EnumTcp) = "tcp"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigProtocol'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "http" -> NodeBalancerConfigProtocol'EnumHttp
                                            | val GHC.Classes.== "https" -> NodeBalancerConfigProtocol'EnumHttps
                                            | val GHC.Classes.== "tcp" -> NodeBalancerConfigProtocol'EnumTcp
                                            | GHC.Base.otherwise -> NodeBalancerConfigProtocol'Other val)
-- | Defines the enum schema located at @components.schemas.NodeBalancerConfig.properties.proxy_protocol@ in the specification.
-- 
-- ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
-- 
-- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
-- * If set to \`v1\`, the human-readable header format (Version 1) is used.
-- * If set to \`v2\`, the binary header format (Version 2) is used.
data NodeBalancerConfigProxyProtocol' =
   NodeBalancerConfigProxyProtocol'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerConfigProxyProtocol'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerConfigProxyProtocol'EnumNone -- ^ Represents the JSON value @"none"@
  | NodeBalancerConfigProxyProtocol'EnumV1 -- ^ Represents the JSON value @"v1"@
  | NodeBalancerConfigProxyProtocol'EnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigProxyProtocol'
    where toJSON (NodeBalancerConfigProxyProtocol'Other val) = val
          toJSON (NodeBalancerConfigProxyProtocol'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerConfigProxyProtocol'EnumNone) = "none"
          toJSON (NodeBalancerConfigProxyProtocol'EnumV1) = "v1"
          toJSON (NodeBalancerConfigProxyProtocol'EnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigProxyProtocol'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> NodeBalancerConfigProxyProtocol'EnumNone
                                            | val GHC.Classes.== "v1" -> NodeBalancerConfigProxyProtocol'EnumV1
                                            | val GHC.Classes.== "v2" -> NodeBalancerConfigProxyProtocol'EnumV2
                                            | GHC.Base.otherwise -> NodeBalancerConfigProxyProtocol'Other val)
-- | Defines the enum schema located at @components.schemas.NodeBalancerConfig.properties.stickiness@ in the specification.
-- 
-- Controls how session stickiness is handled on this port.
-- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
-- * If set to \`table\` sessions from the same remote address will be routed to the same
--   backend.
-- 
-- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
--   routed to the same backend based on a cookie set by the NodeBalancer.
data NodeBalancerConfigStickiness' =
   NodeBalancerConfigStickiness'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NodeBalancerConfigStickiness'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NodeBalancerConfigStickiness'EnumNone -- ^ Represents the JSON value @"none"@
  | NodeBalancerConfigStickiness'EnumTable -- ^ Represents the JSON value @"table"@
  | NodeBalancerConfigStickiness'EnumHttpCookie -- ^ Represents the JSON value @"http_cookie"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NodeBalancerConfigStickiness'
    where toJSON (NodeBalancerConfigStickiness'Other val) = val
          toJSON (NodeBalancerConfigStickiness'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NodeBalancerConfigStickiness'EnumNone) = "none"
          toJSON (NodeBalancerConfigStickiness'EnumTable) = "table"
          toJSON (NodeBalancerConfigStickiness'EnumHttpCookie) = "http_cookie"
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigStickiness'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> NodeBalancerConfigStickiness'EnumNone
                                            | val GHC.Classes.== "table" -> NodeBalancerConfigStickiness'EnumTable
                                            | val GHC.Classes.== "http_cookie" -> NodeBalancerConfigStickiness'EnumHttpCookie
                                            | GHC.Base.otherwise -> NodeBalancerConfigStickiness'Other val)
