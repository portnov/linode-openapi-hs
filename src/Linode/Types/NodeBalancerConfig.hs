-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema NodeBalancerConfig
module Linode.Types.NodeBalancerConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema NodeBalancerConfig
-- 
-- A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.
-- 
-- NodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.
data NodeBalancerConfig = NodeBalancerConfig {
  -- | algorithm: What algorithm this NodeBalancer should use for routing traffic to backends.
  nodeBalancerConfigAlgorithm :: (GHC.Base.Maybe NodeBalancerConfigAlgorithm)
  -- | check: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
  -- * If \`none\` no check is performed.
  -- * \`connection\` requires only a connection to the backend to succeed.
  -- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
  --   the response returned matches what is expected.
  , nodeBalancerConfigCheck :: (GHC.Base.Maybe NodeBalancerConfigCheck)
  -- | check_attempts: How many times to attempt a check before considering a backend to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , nodeBalancerConfigCheck_attempts :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | check_body: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
  , nodeBalancerConfigCheck_body :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | check_interval: How often, in seconds, to check that backends are up and serving requests.
  , nodeBalancerConfigCheck_interval :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | check_passive: If true, any response from this backend with a \`5xx\` status code will be enough for it to be considered unhealthy and taken out of rotation.
  , nodeBalancerConfigCheck_passive :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | check_path: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^[a-zA-Z0-9\\\/\\-%?&=.]*\$\'
  , nodeBalancerConfigCheck_path :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | check_timeout: How long, in seconds, to wait for a check attempt before considering it failed.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 30.0
  -- * Minimum  of 1.0
  , nodeBalancerConfigCheck_timeout :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | cipher_suite: What ciphers to use for SSL connections served by this NodeBalancer.
  -- 
  -- * \`legacy\` is considered insecure and should only be used if necessary.
  , nodeBalancerConfigCipher_suite :: (GHC.Base.Maybe NodeBalancerConfigCipher_suite)
  -- | id: This config\'s unique ID
  , nodeBalancerConfigId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | nodebalancer_id: The ID for the NodeBalancer this config belongs to.
  , nodeBalancerConfigNodebalancer_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | nodes_status: A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
  , nodeBalancerConfigNodes_status :: (GHC.Base.Maybe NodeBalancerConfigNodes_status)
  -- | port: The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can\'t have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 65535.0
  -- * Minimum  of 1.0
  , nodeBalancerConfigPort :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | protocol: The protocol this port is configured to serve.
  -- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
  -- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
  , nodeBalancerConfigProtocol :: (GHC.Base.Maybe NodeBalancerConfigProtocol)
  -- | proxy_protocol: ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
  -- 
  -- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
  -- * If set to \`v1\`, the human-readable header format (Version 1) is used.
  -- * If set to \`v2\`, the binary header format (Version 2) is used.
  , nodeBalancerConfigProxy_protocol :: (GHC.Base.Maybe NodeBalancerConfigProxy_protocol)
  -- | ssl_cert: The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
  -- certificate and Certificate Authority chain) that should be served on this
  -- NodeBalancerConfig\'s port.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSsl_cert :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ssl_commonname: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSsl_commonname :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ssl_fingerprint: The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSsl_fingerprint :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | ssl_key: The PEM-formatted private key for the SSL certificate set in the \`ssl_cert\` field.
  -- 
  -- Line breaks must be represented as \"\\n\" in the string.
  -- 
  -- The contents of this field will not be shown in any responses that display
  -- the NodeBalancerConfig. Instead, \`\<REDACTED>\` will be printed where the field
  -- appears.
  -- 
  -- The read-only \`ssl_commonname\` and \`ssl_fingerprint\` fields in a NodeBalancerConfig
  -- response are automatically derived from your certificate. Please refer to these fields to
  -- verify that the appropriate certificate was assigned to your NodeBalancerConfig.
  , nodeBalancerConfigSsl_key :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | stickiness: Controls how session stickiness is handled on this port.
  -- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
  -- * If set to \`table\` sessions from the same remote address will be routed to the same
  --   backend.
  -- 
  -- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
  --   routed to the same backend based on a cookie set by the NodeBalancer.
  , nodeBalancerConfigStickiness :: (GHC.Base.Maybe NodeBalancerConfigStickiness)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfig
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (nodeBalancerConfigAlgorithm obj) : (Data.Aeson..=) "check" (nodeBalancerConfigCheck obj) : (Data.Aeson..=) "check_attempts" (nodeBalancerConfigCheck_attempts obj) : (Data.Aeson..=) "check_body" (nodeBalancerConfigCheck_body obj) : (Data.Aeson..=) "check_interval" (nodeBalancerConfigCheck_interval obj) : (Data.Aeson..=) "check_passive" (nodeBalancerConfigCheck_passive obj) : (Data.Aeson..=) "check_path" (nodeBalancerConfigCheck_path obj) : (Data.Aeson..=) "check_timeout" (nodeBalancerConfigCheck_timeout obj) : (Data.Aeson..=) "cipher_suite" (nodeBalancerConfigCipher_suite obj) : (Data.Aeson..=) "id" (nodeBalancerConfigId obj) : (Data.Aeson..=) "nodebalancer_id" (nodeBalancerConfigNodebalancer_id obj) : (Data.Aeson..=) "nodes_status" (nodeBalancerConfigNodes_status obj) : (Data.Aeson..=) "port" (nodeBalancerConfigPort obj) : (Data.Aeson..=) "protocol" (nodeBalancerConfigProtocol obj) : (Data.Aeson..=) "proxy_protocol" (nodeBalancerConfigProxy_protocol obj) : (Data.Aeson..=) "ssl_cert" (nodeBalancerConfigSsl_cert obj) : (Data.Aeson..=) "ssl_commonname" (nodeBalancerConfigSsl_commonname obj) : (Data.Aeson..=) "ssl_fingerprint" (nodeBalancerConfigSsl_fingerprint obj) : (Data.Aeson..=) "ssl_key" (nodeBalancerConfigSsl_key obj) : (Data.Aeson..=) "stickiness" (nodeBalancerConfigStickiness obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (nodeBalancerConfigAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "check" (nodeBalancerConfigCheck obj) GHC.Base.<> ((Data.Aeson..=) "check_attempts" (nodeBalancerConfigCheck_attempts obj) GHC.Base.<> ((Data.Aeson..=) "check_body" (nodeBalancerConfigCheck_body obj) GHC.Base.<> ((Data.Aeson..=) "check_interval" (nodeBalancerConfigCheck_interval obj) GHC.Base.<> ((Data.Aeson..=) "check_passive" (nodeBalancerConfigCheck_passive obj) GHC.Base.<> ((Data.Aeson..=) "check_path" (nodeBalancerConfigCheck_path obj) GHC.Base.<> ((Data.Aeson..=) "check_timeout" (nodeBalancerConfigCheck_timeout obj) GHC.Base.<> ((Data.Aeson..=) "cipher_suite" (nodeBalancerConfigCipher_suite obj) GHC.Base.<> ((Data.Aeson..=) "id" (nodeBalancerConfigId obj) GHC.Base.<> ((Data.Aeson..=) "nodebalancer_id" (nodeBalancerConfigNodebalancer_id obj) GHC.Base.<> ((Data.Aeson..=) "nodes_status" (nodeBalancerConfigNodes_status obj) GHC.Base.<> ((Data.Aeson..=) "port" (nodeBalancerConfigPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (nodeBalancerConfigProtocol obj) GHC.Base.<> ((Data.Aeson..=) "proxy_protocol" (nodeBalancerConfigProxy_protocol obj) GHC.Base.<> ((Data.Aeson..=) "ssl_cert" (nodeBalancerConfigSsl_cert obj) GHC.Base.<> ((Data.Aeson..=) "ssl_commonname" (nodeBalancerConfigSsl_commonname obj) GHC.Base.<> ((Data.Aeson..=) "ssl_fingerprint" (nodeBalancerConfigSsl_fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "ssl_key" (nodeBalancerConfigSsl_key obj) GHC.Base.<> (Data.Aeson..=) "stickiness" (nodeBalancerConfigStickiness obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfig
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerConfig" (\obj -> (((((((((((((((((((GHC.Base.pure NodeBalancerConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_attempts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_passive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cipher_suite")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodebalancer_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proxy_protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_cert")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_commonname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssl_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stickiness"))
-- | Defines the enum schema NodeBalancerConfigAlgorithm
-- 
-- What algorithm this NodeBalancer should use for routing traffic to backends.
data NodeBalancerConfigAlgorithm
    = NodeBalancerConfigAlgorithmEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerConfigAlgorithmEnumTyped Data.Text.Internal.Text
    | NodeBalancerConfigAlgorithmEnumString_leastconn
    | NodeBalancerConfigAlgorithmEnumString_roundrobin
    | NodeBalancerConfigAlgorithmEnumString_source
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigAlgorithm
    where toJSON (NodeBalancerConfigAlgorithmEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigAlgorithmEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigAlgorithmEnumString_leastconn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "leastconn"
          toJSON (NodeBalancerConfigAlgorithmEnumString_roundrobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roundrobin"
          toJSON (NodeBalancerConfigAlgorithmEnumString_source) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source"
instance Data.Aeson.FromJSON NodeBalancerConfigAlgorithm
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "leastconn")
                                          then NodeBalancerConfigAlgorithmEnumString_leastconn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roundrobin")
                                                then NodeBalancerConfigAlgorithmEnumString_roundrobin
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source")
                                                      then NodeBalancerConfigAlgorithmEnumString_source
                                                      else NodeBalancerConfigAlgorithmEnumOther val)
-- | Defines the enum schema NodeBalancerConfigCheck
-- 
-- The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
-- * If \`none\` no check is performed.
-- * \`connection\` requires only a connection to the backend to succeed.
-- * \`http\` and \`http_body\` rely on the backend serving HTTP, and that
--   the response returned matches what is expected.
data NodeBalancerConfigCheck
    = NodeBalancerConfigCheckEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerConfigCheckEnumTyped Data.Text.Internal.Text
    | NodeBalancerConfigCheckEnumString_connection
    | NodeBalancerConfigCheckEnumString_http
    | NodeBalancerConfigCheckEnumString_http_body
    | NodeBalancerConfigCheckEnumString_none
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigCheck
    where toJSON (NodeBalancerConfigCheckEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigCheckEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigCheckEnumString_connection) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connection"
          toJSON (NodeBalancerConfigCheckEnumString_http) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (NodeBalancerConfigCheckEnumString_http_body) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_body"
          toJSON (NodeBalancerConfigCheckEnumString_none) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
instance Data.Aeson.FromJSON NodeBalancerConfigCheck
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connection")
                                          then NodeBalancerConfigCheckEnumString_connection
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                                then NodeBalancerConfigCheckEnumString_http
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_body")
                                                      then NodeBalancerConfigCheckEnumString_http_body
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                            then NodeBalancerConfigCheckEnumString_none
                                                            else NodeBalancerConfigCheckEnumOther val)
-- | Defines the enum schema NodeBalancerConfigCipher_suite
-- 
-- What ciphers to use for SSL connections served by this NodeBalancer.
-- 
-- * \`legacy\` is considered insecure and should only be used if necessary.
data NodeBalancerConfigCipher_suite
    = NodeBalancerConfigCipher_suiteEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerConfigCipher_suiteEnumTyped Data.Text.Internal.Text
    | NodeBalancerConfigCipher_suiteEnumString_legacy
    | NodeBalancerConfigCipher_suiteEnumString_recommended
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigCipher_suite
    where toJSON (NodeBalancerConfigCipher_suiteEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigCipher_suiteEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigCipher_suiteEnumString_legacy) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legacy"
          toJSON (NodeBalancerConfigCipher_suiteEnumString_recommended) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recommended"
instance Data.Aeson.FromJSON NodeBalancerConfigCipher_suite
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legacy")
                                          then NodeBalancerConfigCipher_suiteEnumString_legacy
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recommended")
                                                then NodeBalancerConfigCipher_suiteEnumString_recommended
                                                else NodeBalancerConfigCipher_suiteEnumOther val)
-- | Defines the data type for the schema NodeBalancerConfigNodes_status
-- 
-- A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
data NodeBalancerConfigNodes_status = NodeBalancerConfigNodes_status {
  -- | down: The number of backends considered to be \"DOWN\" and unhealthy.  These are not in rotation, and not serving requests.
  nodeBalancerConfigNodes_statusDown :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | up: The number of backends considered to be \"UP\" and healthy, and that are serving requests.
  , nodeBalancerConfigNodes_statusUp :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigNodes_status
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "down" (nodeBalancerConfigNodes_statusDown obj) : (Data.Aeson..=) "up" (nodeBalancerConfigNodes_statusUp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "down" (nodeBalancerConfigNodes_statusDown obj) GHC.Base.<> (Data.Aeson..=) "up" (nodeBalancerConfigNodes_statusUp obj))
instance Data.Aeson.Types.FromJSON.FromJSON NodeBalancerConfigNodes_status
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NodeBalancerConfigNodes_status" (\obj -> (GHC.Base.pure NodeBalancerConfigNodes_status GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "down")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "up"))
-- | Defines the enum schema NodeBalancerConfigProtocol
-- 
-- The protocol this port is configured to serve.
-- * If using \`http\` or \`tcp\` protocol, \`ssl_cert\` and \`ssl_key\` are not supported.
-- * If using \`https\` protocol, \`ssl_cert\` and \`ssl_key\` are required.
data NodeBalancerConfigProtocol
    = NodeBalancerConfigProtocolEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerConfigProtocolEnumTyped Data.Text.Internal.Text
    | NodeBalancerConfigProtocolEnumString_http
    | NodeBalancerConfigProtocolEnumString_https
    | NodeBalancerConfigProtocolEnumString_tcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigProtocol
    where toJSON (NodeBalancerConfigProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigProtocolEnumString_http) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (NodeBalancerConfigProtocolEnumString_https) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (NodeBalancerConfigProtocolEnumString_tcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON NodeBalancerConfigProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then NodeBalancerConfigProtocolEnumString_http
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then NodeBalancerConfigProtocolEnumString_https
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then NodeBalancerConfigProtocolEnumString_tcp
                                                      else NodeBalancerConfigProtocolEnumOther val)
-- | Defines the enum schema NodeBalancerConfigProxy_protocol
-- 
-- ProxyProtocol is a TCP extension that sends initial TCP connection information such as source\/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.
-- 
-- * If ommited, or set to \`none\`, the NodeBalancer doesn\'t send any auxilary data over TCP connections. This is the default.
-- * If set to \`v1\`, the human-readable header format (Version 1) is used.
-- * If set to \`v2\`, the binary header format (Version 2) is used.
data NodeBalancerConfigProxy_protocol
    = NodeBalancerConfigProxy_protocolEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerConfigProxy_protocolEnumTyped Data.Text.Internal.Text
    | NodeBalancerConfigProxy_protocolEnumString_none
    | NodeBalancerConfigProxy_protocolEnumString_v1
    | NodeBalancerConfigProxy_protocolEnumString_v2
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigProxy_protocol
    where toJSON (NodeBalancerConfigProxy_protocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigProxy_protocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigProxy_protocolEnumString_none) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (NodeBalancerConfigProxy_protocolEnumString_v1) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v1"
          toJSON (NodeBalancerConfigProxy_protocolEnumString_v2) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v2"
instance Data.Aeson.FromJSON NodeBalancerConfigProxy_protocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                          then NodeBalancerConfigProxy_protocolEnumString_none
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v1")
                                                then NodeBalancerConfigProxy_protocolEnumString_v1
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "v2")
                                                      then NodeBalancerConfigProxy_protocolEnumString_v2
                                                      else NodeBalancerConfigProxy_protocolEnumOther val)
-- | Defines the enum schema NodeBalancerConfigStickiness
-- 
-- Controls how session stickiness is handled on this port.
-- * If set to \`none\` connections will always be assigned a backend based on the algorithm configured.
-- * If set to \`table\` sessions from the same remote address will be routed to the same
--   backend.
-- 
-- * For HTTP or HTTPS clients, \`http_cookie\` allows sessions to be
--   routed to the same backend based on a cookie set by the NodeBalancer.
data NodeBalancerConfigStickiness
    = NodeBalancerConfigStickinessEnumOther Data.Aeson.Types.Internal.Value
    | NodeBalancerConfigStickinessEnumTyped Data.Text.Internal.Text
    | NodeBalancerConfigStickinessEnumString_http_cookie
    | NodeBalancerConfigStickinessEnumString_none
    | NodeBalancerConfigStickinessEnumString_table
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON NodeBalancerConfigStickiness
    where toJSON (NodeBalancerConfigStickinessEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigStickinessEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (NodeBalancerConfigStickinessEnumString_http_cookie) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_cookie"
          toJSON (NodeBalancerConfigStickinessEnumString_none) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (NodeBalancerConfigStickinessEnumString_table) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "table"
instance Data.Aeson.FromJSON NodeBalancerConfigStickiness
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http_cookie")
                                          then NodeBalancerConfigStickinessEnumString_http_cookie
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                then NodeBalancerConfigStickinessEnumString_none
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "table")
                                                      then NodeBalancerConfigStickinessEnumString_table
                                                      else NodeBalancerConfigStickinessEnumOther val)