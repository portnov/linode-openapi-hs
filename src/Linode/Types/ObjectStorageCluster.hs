-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema ObjectStorageCluster
module Linode.Types.ObjectStorageCluster where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema ObjectStorageCluster
-- 
-- An Object Storage Cluster
data ObjectStorageCluster = ObjectStorageCluster {
  -- | domain: The base URL for this cluster, used for connecting with third-party clients.
  objectStorageClusterDomain :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID for this cluster.
  , objectStorageClusterId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The region where this cluster is located.
  , objectStorageClusterRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | static_site_domain: The base URL for this cluster used when hosting static sites.
  , objectStorageClusterStatic_site_domain :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | status: This cluster\'s status.
  , objectStorageClusterStatus :: (GHC.Base.Maybe ObjectStorageClusterStatus)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ObjectStorageCluster
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (objectStorageClusterDomain obj) : (Data.Aeson..=) "id" (objectStorageClusterId obj) : (Data.Aeson..=) "region" (objectStorageClusterRegion obj) : (Data.Aeson..=) "static_site_domain" (objectStorageClusterStatic_site_domain obj) : (Data.Aeson..=) "status" (objectStorageClusterStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (objectStorageClusterDomain obj) GHC.Base.<> ((Data.Aeson..=) "id" (objectStorageClusterId obj) GHC.Base.<> ((Data.Aeson..=) "region" (objectStorageClusterRegion obj) GHC.Base.<> ((Data.Aeson..=) "static_site_domain" (objectStorageClusterStatic_site_domain obj) GHC.Base.<> (Data.Aeson..=) "status" (objectStorageClusterStatus obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON ObjectStorageCluster
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ObjectStorageCluster" (\obj -> ((((GHC.Base.pure ObjectStorageCluster GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "static_site_domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the enum schema ObjectStorageClusterStatus
-- 
-- This cluster\'s status.
data ObjectStorageClusterStatus
    = ObjectStorageClusterStatusEnumOther Data.Aeson.Types.Internal.Value
    | ObjectStorageClusterStatusEnumTyped Data.Text.Internal.Text
    | ObjectStorageClusterStatusEnumString_available
    | ObjectStorageClusterStatusEnumString_unavailable
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ObjectStorageClusterStatus
    where toJSON (ObjectStorageClusterStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ObjectStorageClusterStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ObjectStorageClusterStatusEnumString_available) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available"
          toJSON (ObjectStorageClusterStatusEnumString_unavailable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unavailable"
instance Data.Aeson.FromJSON ObjectStorageClusterStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available")
                                          then ObjectStorageClusterStatusEnumString_available
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unavailable")
                                                then ObjectStorageClusterStatusEnumString_unavailable
                                                else ObjectStorageClusterStatusEnumOther val)