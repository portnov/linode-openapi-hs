-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ObjectStorageCluster
module Linode.Types.ObjectStorageCluster where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.ObjectStorageCluster@ in the specification.
-- 
-- An Object Storage Cluster
data ObjectStorageCluster = ObjectStorageCluster {
  -- | domain: The base URL for this cluster, used for connecting with third-party clients.
  objectStorageClusterDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: The unique ID for this cluster.
  , objectStorageClusterId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | region: The region where this cluster is located.
  , objectStorageClusterRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | static_site_domain: The base URL for this cluster used when hosting static sites.
  , objectStorageClusterStaticSiteDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status: This cluster\'s status.
  , objectStorageClusterStatus :: (GHC.Maybe.Maybe ObjectStorageClusterStatus')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ObjectStorageCluster
    where toJSON obj = Data.Aeson.Types.Internal.object ("domain" Data.Aeson.Types.ToJSON..= objectStorageClusterDomain obj : "id" Data.Aeson.Types.ToJSON..= objectStorageClusterId obj : "region" Data.Aeson.Types.ToJSON..= objectStorageClusterRegion obj : "static_site_domain" Data.Aeson.Types.ToJSON..= objectStorageClusterStaticSiteDomain obj : "status" Data.Aeson.Types.ToJSON..= objectStorageClusterStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("domain" Data.Aeson.Types.ToJSON..= objectStorageClusterDomain obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= objectStorageClusterId obj) GHC.Base.<> (("region" Data.Aeson.Types.ToJSON..= objectStorageClusterRegion obj) GHC.Base.<> (("static_site_domain" Data.Aeson.Types.ToJSON..= objectStorageClusterStaticSiteDomain obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= objectStorageClusterStatus obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON ObjectStorageCluster
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ObjectStorageCluster" (\obj -> ((((GHC.Base.pure ObjectStorageCluster GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "static_site_domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Create a new 'ObjectStorageCluster' with all required fields.
mkObjectStorageCluster :: ObjectStorageCluster
mkObjectStorageCluster = ObjectStorageCluster{objectStorageClusterDomain = GHC.Maybe.Nothing,
                                              objectStorageClusterId = GHC.Maybe.Nothing,
                                              objectStorageClusterRegion = GHC.Maybe.Nothing,
                                              objectStorageClusterStaticSiteDomain = GHC.Maybe.Nothing,
                                              objectStorageClusterStatus = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.ObjectStorageCluster.properties.status@ in the specification.
-- 
-- This cluster\'s status.
data ObjectStorageClusterStatus' =
   ObjectStorageClusterStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ObjectStorageClusterStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ObjectStorageClusterStatus'EnumAvailable -- ^ Represents the JSON value @"available"@
  | ObjectStorageClusterStatus'EnumUnavailable -- ^ Represents the JSON value @"unavailable"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ObjectStorageClusterStatus'
    where toJSON (ObjectStorageClusterStatus'Other val) = val
          toJSON (ObjectStorageClusterStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ObjectStorageClusterStatus'EnumAvailable) = "available"
          toJSON (ObjectStorageClusterStatus'EnumUnavailable) = "unavailable"
instance Data.Aeson.Types.FromJSON.FromJSON ObjectStorageClusterStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "available" -> ObjectStorageClusterStatus'EnumAvailable
                                            | val GHC.Classes.== "unavailable" -> ObjectStorageClusterStatus'EnumUnavailable
                                            | GHC.Base.otherwise -> ObjectStorageClusterStatus'Other val)
