-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema LKENodePool
module Linode.Types.LKENodePool where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.Types.LKENodeStatus

-- | Defines the data type for the schema LKENodePool
-- 
-- The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.
data LKENodePool = LKENodePool {
  -- | autoscaler: When enabled, the number of nodes autoscales within the defined minimum and maximum values.
  lKENodePoolAutoscaler :: (GHC.Base.Maybe LKENodePoolAutoscaler)
  -- | count: The number of nodes in the Node Pool.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 1.0
  , lKENodePoolCount :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | disks: This Node Pool\'s custom disk layout.
  , lKENodePoolDisks :: (GHC.Base.Maybe ([] LKENodePoolDisks))
  -- | id: This Node Pool\'s unique ID.
  , lKENodePoolId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | nodes: Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
  , lKENodePoolNodes :: (GHC.Base.Maybe ([] LKENodeStatus))
  -- | tags: An array of tags applied to this object. Tags are for organizational purposes only.
  , lKENodePoolTags :: (GHC.Base.Maybe ([] Data.Text.Internal.Text))
  -- | type: The Linode Type for all of the nodes in the Node Pool.
  , lKENodePoolType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKENodePool
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "autoscaler" (lKENodePoolAutoscaler obj) : (Data.Aeson..=) "count" (lKENodePoolCount obj) : (Data.Aeson..=) "disks" (lKENodePoolDisks obj) : (Data.Aeson..=) "id" (lKENodePoolId obj) : (Data.Aeson..=) "nodes" (lKENodePoolNodes obj) : (Data.Aeson..=) "tags" (lKENodePoolTags obj) : (Data.Aeson..=) "type" (lKENodePoolType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "autoscaler" (lKENodePoolAutoscaler obj) GHC.Base.<> ((Data.Aeson..=) "count" (lKENodePoolCount obj) GHC.Base.<> ((Data.Aeson..=) "disks" (lKENodePoolDisks obj) GHC.Base.<> ((Data.Aeson..=) "id" (lKENodePoolId obj) GHC.Base.<> ((Data.Aeson..=) "nodes" (lKENodePoolNodes obj) GHC.Base.<> ((Data.Aeson..=) "tags" (lKENodePoolTags obj) GHC.Base.<> (Data.Aeson..=) "type" (lKENodePoolType obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON LKENodePool
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKENodePool" (\obj -> ((((((GHC.Base.pure LKENodePool GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "autoscaler")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nodes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the data type for the schema LKENodePoolAutoscaler
-- 
-- When enabled, the number of nodes autoscales within the defined minimum and maximum values.
data LKENodePoolAutoscaler = LKENodePoolAutoscaler {
  -- | enabled: Whether autoscaling is enabled for this Node Pool. Defaults to \`false\`.
  lKENodePoolAutoscalerEnabled :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | max: The maximum number of nodes to autoscale to. Defaults to the Node Pool\'s \`count\`.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 1.0
  , lKENodePoolAutoscalerMax :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | min: The minimum number of nodes to autoscale to. Defaults to the Node Pool\'s \`count\`.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 1.0
  , lKENodePoolAutoscalerMin :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKENodePoolAutoscaler
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "enabled" (lKENodePoolAutoscalerEnabled obj) : (Data.Aeson..=) "max" (lKENodePoolAutoscalerMax obj) : (Data.Aeson..=) "min" (lKENodePoolAutoscalerMin obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "enabled" (lKENodePoolAutoscalerEnabled obj) GHC.Base.<> ((Data.Aeson..=) "max" (lKENodePoolAutoscalerMax obj) GHC.Base.<> (Data.Aeson..=) "min" (lKENodePoolAutoscalerMin obj)))
instance Data.Aeson.Types.FromJSON.FromJSON LKENodePoolAutoscaler
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKENodePoolAutoscaler" (\obj -> ((GHC.Base.pure LKENodePoolAutoscaler GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "max")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "min"))
-- | Defines the data type for the schema LKENodePoolDisks
-- 
-- The values to assign to each partition in this Node Pool\'s custom disk layout.
data LKENodePoolDisks = LKENodePoolDisks {
  -- | size: The size of this custom disk partition in MB.
  -- 
  --   * The size of this disk partition must not exceed the capacity of the node\'s plan type.
  lKENodePoolDisksSize :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | type: This custom disk partition\'s filesystem type.
  , lKENodePoolDisksType :: (GHC.Base.Maybe LKENodePoolDisksType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKENodePoolDisks
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "size" (lKENodePoolDisksSize obj) : (Data.Aeson..=) "type" (lKENodePoolDisksType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "size" (lKENodePoolDisksSize obj) GHC.Base.<> (Data.Aeson..=) "type" (lKENodePoolDisksType obj))
instance Data.Aeson.Types.FromJSON.FromJSON LKENodePoolDisks
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LKENodePoolDisks" (\obj -> (GHC.Base.pure LKENodePoolDisks GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the enum schema LKENodePoolDisksType
-- 
-- This custom disk partition\'s filesystem type.
data LKENodePoolDisksType
    = LKENodePoolDisksTypeEnumOther Data.Aeson.Types.Internal.Value
    | LKENodePoolDisksTypeEnumTyped Data.Text.Internal.Text
    | LKENodePoolDisksTypeEnumString_ext4
    | LKENodePoolDisksTypeEnumString_raw
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LKENodePoolDisksType
    where toJSON (LKENodePoolDisksTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LKENodePoolDisksTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LKENodePoolDisksTypeEnumString_ext4) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ext4"
          toJSON (LKENodePoolDisksTypeEnumString_raw) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "raw"
instance Data.Aeson.FromJSON LKENodePoolDisksType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ext4")
                                          then LKENodePoolDisksTypeEnumString_ext4
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "raw")
                                                then LKENodePoolDisksTypeEnumString_raw
                                                else LKENodePoolDisksTypeEnumOther val)