-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Transfer
module Linode.Types.Transfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Transfer@ in the specification.
-- 
-- An object representing your network utilization for the current month, in Gigabytes.
data Transfer = Transfer {
  -- | billable: The amount of your transfer pool that is billable this billing cycle.
  transferBillable :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | quota: The amount of network usage allowed this billing cycle.
  , transferQuota :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | used: The amount of network usage you have used this billing cycle.
  , transferUsed :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Transfer
    where toJSON obj = Data.Aeson.Types.Internal.object ("billable" Data.Aeson.Types.ToJSON..= transferBillable obj : "quota" Data.Aeson.Types.ToJSON..= transferQuota obj : "used" Data.Aeson.Types.ToJSON..= transferUsed obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("billable" Data.Aeson.Types.ToJSON..= transferBillable obj) GHC.Base.<> (("quota" Data.Aeson.Types.ToJSON..= transferQuota obj) GHC.Base.<> ("used" Data.Aeson.Types.ToJSON..= transferUsed obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Transfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Transfer" (\obj -> ((GHC.Base.pure Transfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quota")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used"))
-- | Create a new 'Transfer' with all required fields.
mkTransfer :: Transfer
mkTransfer = Transfer{transferBillable = GHC.Maybe.Nothing,
                      transferQuota = GHC.Maybe.Nothing,
                      transferUsed = GHC.Maybe.Nothing}
