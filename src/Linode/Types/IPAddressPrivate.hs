-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema IPAddressPrivate
module Linode.Types.IPAddressPrivate where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema IPAddressPrivate
-- 
-- A private IPv4 address that exists in Linode\'s system.
data IPAddressPrivate = IPAddressPrivate {
  -- | address: The private IPv4 address.
  iPAddressPrivateAddress :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | gateway: The default gateway for this address.
  , iPAddressPrivateGateway :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | linode_id: The ID of the Linode this address currently belongs to.
  , iPAddressPrivateLinode_id :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | prefix: The number of bits set in the subnet mask.
  , iPAddressPrivatePrefix :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | public: Whether this is a public or private IP address.
  , iPAddressPrivatePublic :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | rdns: The reverse DNS assigned to this address.
  , iPAddressPrivateRdns :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | region: The Region this address resides in.
  , iPAddressPrivateRegion :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | subnet_mask: The mask that separates host bits from network bits for this address.
  , iPAddressPrivateSubnet_mask :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of address this is.
  , iPAddressPrivateType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON IPAddressPrivate
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (iPAddressPrivateAddress obj) : (Data.Aeson..=) "gateway" (iPAddressPrivateGateway obj) : (Data.Aeson..=) "linode_id" (iPAddressPrivateLinode_id obj) : (Data.Aeson..=) "prefix" (iPAddressPrivatePrefix obj) : (Data.Aeson..=) "public" (iPAddressPrivatePublic obj) : (Data.Aeson..=) "rdns" (iPAddressPrivateRdns obj) : (Data.Aeson..=) "region" (iPAddressPrivateRegion obj) : (Data.Aeson..=) "subnet_mask" (iPAddressPrivateSubnet_mask obj) : (Data.Aeson..=) "type" (iPAddressPrivateType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (iPAddressPrivateAddress obj) GHC.Base.<> ((Data.Aeson..=) "gateway" (iPAddressPrivateGateway obj) GHC.Base.<> ((Data.Aeson..=) "linode_id" (iPAddressPrivateLinode_id obj) GHC.Base.<> ((Data.Aeson..=) "prefix" (iPAddressPrivatePrefix obj) GHC.Base.<> ((Data.Aeson..=) "public" (iPAddressPrivatePublic obj) GHC.Base.<> ((Data.Aeson..=) "rdns" (iPAddressPrivateRdns obj) GHC.Base.<> ((Data.Aeson..=) "region" (iPAddressPrivateRegion obj) GHC.Base.<> ((Data.Aeson..=) "subnet_mask" (iPAddressPrivateSubnet_mask obj) GHC.Base.<> (Data.Aeson..=) "type" (iPAddressPrivateType obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON IPAddressPrivate
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IPAddressPrivate" (\obj -> ((((((((GHC.Base.pure IPAddressPrivate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linode_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rdns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subnet_mask")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))