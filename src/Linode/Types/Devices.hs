-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Devices
module Linode.Types.Devices where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias
import {-# SOURCE #-} Linode.Types.Device

-- | Defines the object schema located at @components.schemas.Devices@ in the specification.
-- 
-- A dictionary of device disks to use as a device map in a Linode\'s configuration profile.
-- * An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
-- * If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
data Devices = Devices {
  -- | sda: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  devicesSda :: (GHC.Maybe.Maybe Device)
  -- | sdb: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSdb :: (GHC.Maybe.Maybe Device)
  -- | sdc: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSdc :: (GHC.Maybe.Maybe Device)
  -- | sdd: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSdd :: (GHC.Maybe.Maybe Device)
  -- | sde: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSde :: (GHC.Maybe.Maybe Device)
  -- | sdf: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSdf :: (GHC.Maybe.Maybe Device)
  -- | sdg: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSdg :: (GHC.Maybe.Maybe Device)
  -- | sdh: Device can be either a Disk or Volume identified by \`disk_id\` or \`volume_id\`. Only one type per slot allowed. Can be null.
  -- Devices mapped from _sde_ through _sdh_ are unavailable in \`fullvirt\` virt_mode.
  , devicesSdh :: (GHC.Maybe.Maybe Device)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Devices
    where toJSON obj = Data.Aeson.Types.Internal.object ("sda" Data.Aeson.Types.ToJSON..= devicesSda obj : "sdb" Data.Aeson.Types.ToJSON..= devicesSdb obj : "sdc" Data.Aeson.Types.ToJSON..= devicesSdc obj : "sdd" Data.Aeson.Types.ToJSON..= devicesSdd obj : "sde" Data.Aeson.Types.ToJSON..= devicesSde obj : "sdf" Data.Aeson.Types.ToJSON..= devicesSdf obj : "sdg" Data.Aeson.Types.ToJSON..= devicesSdg obj : "sdh" Data.Aeson.Types.ToJSON..= devicesSdh obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("sda" Data.Aeson.Types.ToJSON..= devicesSda obj) GHC.Base.<> (("sdb" Data.Aeson.Types.ToJSON..= devicesSdb obj) GHC.Base.<> (("sdc" Data.Aeson.Types.ToJSON..= devicesSdc obj) GHC.Base.<> (("sdd" Data.Aeson.Types.ToJSON..= devicesSdd obj) GHC.Base.<> (("sde" Data.Aeson.Types.ToJSON..= devicesSde obj) GHC.Base.<> (("sdf" Data.Aeson.Types.ToJSON..= devicesSdf obj) GHC.Base.<> (("sdg" Data.Aeson.Types.ToJSON..= devicesSdg obj) GHC.Base.<> ("sdh" Data.Aeson.Types.ToJSON..= devicesSdh obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Devices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Devices" (\obj -> (((((((GHC.Base.pure Devices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sda")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sde")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sdh"))
-- | Create a new 'Devices' with all required fields.
mkDevices :: Devices
mkDevices = Devices{devicesSda = GHC.Maybe.Nothing,
                    devicesSdb = GHC.Maybe.Nothing,
                    devicesSdc = GHC.Maybe.Nothing,
                    devicesSdd = GHC.Maybe.Nothing,
                    devicesSde = GHC.Maybe.Nothing,
                    devicesSdf = GHC.Maybe.Nothing,
                    devicesSdg = GHC.Maybe.Nothing,
                    devicesSdh = GHC.Maybe.Nothing}
