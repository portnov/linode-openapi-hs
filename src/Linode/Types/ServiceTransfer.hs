-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema ServiceTransfer
module Linode.Types.ServiceTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema ServiceTransfer
-- 
-- An object representing a Service Transfer.
data ServiceTransfer = ServiceTransfer {
  -- | created: When this transfer was created.
  serviceTransferCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | entities: A collection of the services to include in this transfer request, separated by type.
  , serviceTransferEntities :: (GHC.Base.Maybe ServiceTransferEntities)
  -- | expiry: When this transfer expires. Transfers will automatically expire 24 hours after creation.
  , serviceTransferExpiry :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | is_sender: If the requesting account created this transfer.
  , serviceTransferIs_sender :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | status: The status of the transfer request.
  -- 
  -- \`accepted\`: The transfer has been accepted by another user and is currently in progress.
  -- Transfers can take up to 3 hours to complete.
  -- 
  -- \`cancelled\`: The transfer has been cancelled by the sender.
  -- 
  -- \`completed\`: The transfer has completed successfully.
  -- 
  -- \`failed\`: The transfer has failed after initiation.
  -- 
  -- \`pending\`: The transfer is ready to be accepted.
  -- 
  -- \`stale\`: The transfer has exceeded its expiration date. It can no longer be accepted or
  -- cancelled.
  , serviceTransferStatus :: (GHC.Base.Maybe ServiceTransferStatus)
  -- | token: The token used to identify and accept or cancel this transfer.
  , serviceTransferToken :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | updated: When this transfer was last updated.
  , serviceTransferUpdated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ServiceTransfer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (serviceTransferCreated obj) : (Data.Aeson..=) "entities" (serviceTransferEntities obj) : (Data.Aeson..=) "expiry" (serviceTransferExpiry obj) : (Data.Aeson..=) "is_sender" (serviceTransferIs_sender obj) : (Data.Aeson..=) "status" (serviceTransferStatus obj) : (Data.Aeson..=) "token" (serviceTransferToken obj) : (Data.Aeson..=) "updated" (serviceTransferUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (serviceTransferCreated obj) GHC.Base.<> ((Data.Aeson..=) "entities" (serviceTransferEntities obj) GHC.Base.<> ((Data.Aeson..=) "expiry" (serviceTransferExpiry obj) GHC.Base.<> ((Data.Aeson..=) "is_sender" (serviceTransferIs_sender obj) GHC.Base.<> ((Data.Aeson..=) "status" (serviceTransferStatus obj) GHC.Base.<> ((Data.Aeson..=) "token" (serviceTransferToken obj) GHC.Base.<> (Data.Aeson..=) "updated" (serviceTransferUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON ServiceTransfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ServiceTransfer" (\obj -> ((((((GHC.Base.pure ServiceTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_sender")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Defines the data type for the schema ServiceTransferEntities
-- 
-- A collection of the services to include in this transfer request, separated by type.
data ServiceTransferEntities = ServiceTransferEntities {
  -- | linodes: An array containing the IDs of each of the Linodes included in this transfer.
  serviceTransferEntitiesLinodes :: (GHC.Base.Maybe ([] GHC.Integer.Type.Integer))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON ServiceTransferEntities
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "linodes" (serviceTransferEntitiesLinodes obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "linodes" (serviceTransferEntitiesLinodes obj))
instance Data.Aeson.Types.FromJSON.FromJSON ServiceTransferEntities
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ServiceTransferEntities" (\obj -> GHC.Base.pure ServiceTransferEntities GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "linodes"))
-- | Defines the enum schema ServiceTransferStatus
-- 
-- The status of the transfer request.
-- 
-- \`accepted\`: The transfer has been accepted by another user and is currently in progress.
-- Transfers can take up to 3 hours to complete.
-- 
-- \`cancelled\`: The transfer has been cancelled by the sender.
-- 
-- \`completed\`: The transfer has completed successfully.
-- 
-- \`failed\`: The transfer has failed after initiation.
-- 
-- \`pending\`: The transfer is ready to be accepted.
-- 
-- \`stale\`: The transfer has exceeded its expiration date. It can no longer be accepted or
-- cancelled.
data ServiceTransferStatus
    = ServiceTransferStatusEnumOther Data.Aeson.Types.Internal.Value
    | ServiceTransferStatusEnumTyped Data.Text.Internal.Text
    | ServiceTransferStatusEnumString_accepted
    | ServiceTransferStatusEnumString_cancelled
    | ServiceTransferStatusEnumString_completed
    | ServiceTransferStatusEnumString_failed
    | ServiceTransferStatusEnumString_pending
    | ServiceTransferStatusEnumString_stale
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ServiceTransferStatus
    where toJSON (ServiceTransferStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ServiceTransferStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ServiceTransferStatusEnumString_accepted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accepted"
          toJSON (ServiceTransferStatusEnumString_cancelled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cancelled"
          toJSON (ServiceTransferStatusEnumString_completed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed"
          toJSON (ServiceTransferStatusEnumString_failed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (ServiceTransferStatusEnumString_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (ServiceTransferStatusEnumString_stale) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stale"
instance Data.Aeson.FromJSON ServiceTransferStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accepted")
                                          then ServiceTransferStatusEnumString_accepted
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cancelled")
                                                then ServiceTransferStatusEnumString_cancelled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed")
                                                      then ServiceTransferStatusEnumString_completed
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                                            then ServiceTransferStatusEnumString_failed
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                                  then ServiceTransferStatusEnumString_pending
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stale")
                                                                        then ServiceTransferStatusEnumString_stale
                                                                        else ServiceTransferStatusEnumOther val)