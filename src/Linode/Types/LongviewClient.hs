-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LongviewClient
module Linode.Types.LongviewClient where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.LongviewClient@ in the specification.
-- 
-- A LongviewClient is a single monitor set up to track statistics about one of your servers.
data LongviewClient = LongviewClient {
  -- | api_key: The API key for this Client, used when configuring the Longview
  -- Client application on your Linode.
  -- 
  -- Returns as \`[REDACTED]\` if you do not have read-write access to this client.
  longviewClientApiKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | apps: The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
  , longviewClientApps :: (GHC.Maybe.Maybe LongviewClientApps')
  -- | created: When this Longview Client was created.
  , longviewClientCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: This Client\'s unique ID.
  , longviewClientId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | install_code: The install code for this Client, used when configuring the Longview
  -- Client application on your Linode.
  -- 
  -- Returns as \`[REDACTED]\` if you do not have read-write access to this client.
  , longviewClientInstallCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | label: This Client\'s unique label. This is for display purposes only.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32
  -- * Minimum length of 3
  -- * Must match pattern \'[a-zA-Z0-9-_]{3,32}\'
  , longviewClientLabel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | updated: When this Longview Client was last updated.
  , longviewClientUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewClient
    where toJSON obj = Data.Aeson.Types.Internal.object ("api_key" Data.Aeson.Types.ToJSON..= longviewClientApiKey obj : "apps" Data.Aeson.Types.ToJSON..= longviewClientApps obj : "created" Data.Aeson.Types.ToJSON..= longviewClientCreated obj : "id" Data.Aeson.Types.ToJSON..= longviewClientId obj : "install_code" Data.Aeson.Types.ToJSON..= longviewClientInstallCode obj : "label" Data.Aeson.Types.ToJSON..= longviewClientLabel obj : "updated" Data.Aeson.Types.ToJSON..= longviewClientUpdated obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("api_key" Data.Aeson.Types.ToJSON..= longviewClientApiKey obj) GHC.Base.<> (("apps" Data.Aeson.Types.ToJSON..= longviewClientApps obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= longviewClientCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= longviewClientId obj) GHC.Base.<> (("install_code" Data.Aeson.Types.ToJSON..= longviewClientInstallCode obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= longviewClientLabel obj) GHC.Base.<> ("updated" Data.Aeson.Types.ToJSON..= longviewClientUpdated obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewClient
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewClient" (\obj -> ((((((GHC.Base.pure LongviewClient GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "api_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "install_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated"))
-- | Create a new 'LongviewClient' with all required fields.
mkLongviewClient :: LongviewClient
mkLongviewClient = LongviewClient{longviewClientApiKey = GHC.Maybe.Nothing,
                                  longviewClientApps = GHC.Maybe.Nothing,
                                  longviewClientCreated = GHC.Maybe.Nothing,
                                  longviewClientId = GHC.Maybe.Nothing,
                                  longviewClientInstallCode = GHC.Maybe.Nothing,
                                  longviewClientLabel = GHC.Maybe.Nothing,
                                  longviewClientUpdated = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.LongviewClient.properties.apps@ in the specification.
-- 
-- The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
data LongviewClientApps' = LongviewClientApps' {
  -- | apache: If True, the Apache Longview Client module is monitoring Apache on your server.
  longviewClientApps'Apache :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | mysql: If True, the MySQL Longview Client modules is monitoring MySQL on your server.
  , longviewClientApps'Mysql :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | nginx: If True, the Nginx Longview Client module is monitoring Nginx on your server.
  , longviewClientApps'Nginx :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LongviewClientApps'
    where toJSON obj = Data.Aeson.Types.Internal.object ("apache" Data.Aeson.Types.ToJSON..= longviewClientApps'Apache obj : "mysql" Data.Aeson.Types.ToJSON..= longviewClientApps'Mysql obj : "nginx" Data.Aeson.Types.ToJSON..= longviewClientApps'Nginx obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("apache" Data.Aeson.Types.ToJSON..= longviewClientApps'Apache obj) GHC.Base.<> (("mysql" Data.Aeson.Types.ToJSON..= longviewClientApps'Mysql obj) GHC.Base.<> ("nginx" Data.Aeson.Types.ToJSON..= longviewClientApps'Nginx obj)))
instance Data.Aeson.Types.FromJSON.FromJSON LongviewClientApps'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LongviewClientApps'" (\obj -> ((GHC.Base.pure LongviewClientApps' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apache")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mysql")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nginx"))
-- | Create a new 'LongviewClientApps'' with all required fields.
mkLongviewClientApps' :: LongviewClientApps'
mkLongviewClientApps' = LongviewClientApps'{longviewClientApps'Apache = GHC.Maybe.Nothing,
                                            longviewClientApps'Mysql = GHC.Maybe.Nothing,
                                            longviewClientApps'Nginx = GHC.Maybe.Nothing}
