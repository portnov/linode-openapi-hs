-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Event
module Linode.Types.Event where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.Event@ in the specification.
-- 
-- A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event.
-- The Events returned depends on your grants.
data Event = Event {
  -- | action: The action that caused this Event. New actions may be added in the future.
  eventAction :: (GHC.Maybe.Maybe EventAction')
  -- | created: When this Event was created.
  , eventCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | duration: The total duration in seconds that it takes for the Event to complete.
  , eventDuration :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | entity: Detailed information about the Event\'s entity, including ID, type, label, and URL used to access it.
  , eventEntity :: (GHC.Maybe.Maybe EventEntity')
  -- | id: The unique ID of this Event.
  , eventId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | message: Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
  , eventMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | percent_complete: A percentage estimating the amount of time remaining for an Event.
  -- Returns \`null\` for notification events.
  , eventPercentComplete :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | rate: The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
  , eventRate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | read: If this Event has been read.
  , eventRead :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | secondary_entity: Detailed information about the Event\'s secondary entity, which provides additional information
  -- for events such as, but not limited to, \`linode_boot\`, \`linode_reboot\`, \`linode_create\`, and \`linode_clone\` Event actions.
  , eventSecondaryEntity :: (GHC.Maybe.Maybe EventSecondaryEntity')
  -- | seen: If this Event has been seen.
  , eventSeen :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | status: The current status of this Event.
  , eventStatus :: (GHC.Maybe.Maybe EventStatus')
  -- | time_remaining: The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the \`percent_complete\` attribute will indicate about how much more work is to be done.
  , eventTimeRemaining :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | username: The username of the User who caused the Event.
  , eventUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Event
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= eventAction obj : "created" Data.Aeson.Types.ToJSON..= eventCreated obj : "duration" Data.Aeson.Types.ToJSON..= eventDuration obj : "entity" Data.Aeson.Types.ToJSON..= eventEntity obj : "id" Data.Aeson.Types.ToJSON..= eventId obj : "message" Data.Aeson.Types.ToJSON..= eventMessage obj : "percent_complete" Data.Aeson.Types.ToJSON..= eventPercentComplete obj : "rate" Data.Aeson.Types.ToJSON..= eventRate obj : "read" Data.Aeson.Types.ToJSON..= eventRead obj : "secondary_entity" Data.Aeson.Types.ToJSON..= eventSecondaryEntity obj : "seen" Data.Aeson.Types.ToJSON..= eventSeen obj : "status" Data.Aeson.Types.ToJSON..= eventStatus obj : "time_remaining" Data.Aeson.Types.ToJSON..= eventTimeRemaining obj : "username" Data.Aeson.Types.ToJSON..= eventUsername obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("action" Data.Aeson.Types.ToJSON..= eventAction obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= eventCreated obj) GHC.Base.<> (("duration" Data.Aeson.Types.ToJSON..= eventDuration obj) GHC.Base.<> (("entity" Data.Aeson.Types.ToJSON..= eventEntity obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= eventId obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= eventMessage obj) GHC.Base.<> (("percent_complete" Data.Aeson.Types.ToJSON..= eventPercentComplete obj) GHC.Base.<> (("rate" Data.Aeson.Types.ToJSON..= eventRate obj) GHC.Base.<> (("read" Data.Aeson.Types.ToJSON..= eventRead obj) GHC.Base.<> (("secondary_entity" Data.Aeson.Types.ToJSON..= eventSecondaryEntity obj) GHC.Base.<> (("seen" Data.Aeson.Types.ToJSON..= eventSeen obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= eventStatus obj) GHC.Base.<> (("time_remaining" Data.Aeson.Types.ToJSON..= eventTimeRemaining obj) GHC.Base.<> ("username" Data.Aeson.Types.ToJSON..= eventUsername obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Event
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Event" (\obj -> (((((((((((((GHC.Base.pure Event GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "percent_complete")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "read")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "secondary_entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "seen")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "time_remaining")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))
-- | Create a new 'Event' with all required fields.
mkEvent :: Event
mkEvent = Event{eventAction = GHC.Maybe.Nothing,
                eventCreated = GHC.Maybe.Nothing,
                eventDuration = GHC.Maybe.Nothing,
                eventEntity = GHC.Maybe.Nothing,
                eventId = GHC.Maybe.Nothing,
                eventMessage = GHC.Maybe.Nothing,
                eventPercentComplete = GHC.Maybe.Nothing,
                eventRate = GHC.Maybe.Nothing,
                eventRead = GHC.Maybe.Nothing,
                eventSecondaryEntity = GHC.Maybe.Nothing,
                eventSeen = GHC.Maybe.Nothing,
                eventStatus = GHC.Maybe.Nothing,
                eventTimeRemaining = GHC.Maybe.Nothing,
                eventUsername = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Event.properties.action@ in the specification.
-- 
-- The action that caused this Event. New actions may be added in the future.
data EventAction' =
   EventAction'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | EventAction'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | EventAction'EnumAccountUpdate -- ^ Represents the JSON value @"account_update"@
  | EventAction'EnumAccountSettingsUpdate -- ^ Represents the JSON value @"account_settings_update"@
  | EventAction'EnumBackupsEnable -- ^ Represents the JSON value @"backups_enable"@
  | EventAction'EnumBackupsCancel -- ^ Represents the JSON value @"backups_cancel"@
  | EventAction'EnumBackupsRestore -- ^ Represents the JSON value @"backups_restore"@
  | EventAction'EnumCommunityQuestionReply -- ^ Represents the JSON value @"community_question_reply"@
  | EventAction'EnumCommunityLike -- ^ Represents the JSON value @"community_like"@
  | EventAction'EnumCreditCardUpdated -- ^ Represents the JSON value @"credit_card_updated"@
  | EventAction'EnumDiskCreate -- ^ Represents the JSON value @"disk_create"@
  | EventAction'EnumDiskDelete -- ^ Represents the JSON value @"disk_delete"@
  | EventAction'EnumDiskUpdate -- ^ Represents the JSON value @"disk_update"@
  | EventAction'EnumDiskDuplicate -- ^ Represents the JSON value @"disk_duplicate"@
  | EventAction'EnumDiskImagize -- ^ Represents the JSON value @"disk_imagize"@
  | EventAction'EnumDiskResize -- ^ Represents the JSON value @"disk_resize"@
  | EventAction'EnumDnsRecordCreate -- ^ Represents the JSON value @"dns_record_create"@
  | EventAction'EnumDnsRecordDelete -- ^ Represents the JSON value @"dns_record_delete"@
  | EventAction'EnumDnsRecordUpdate -- ^ Represents the JSON value @"dns_record_update"@
  | EventAction'EnumDnsZoneCreate -- ^ Represents the JSON value @"dns_zone_create"@
  | EventAction'EnumDnsZoneDelete -- ^ Represents the JSON value @"dns_zone_delete"@
  | EventAction'EnumDnsZoneImport -- ^ Represents the JSON value @"dns_zone_import"@
  | EventAction'EnumDnsZoneUpdate -- ^ Represents the JSON value @"dns_zone_update"@
  | EventAction'EnumEntityTransferAccept -- ^ Represents the JSON value @"entity_transfer_accept"@
  | EventAction'EnumEntityTransferCancel -- ^ Represents the JSON value @"entity_transfer_cancel"@
  | EventAction'EnumEntityTransferCreate -- ^ Represents the JSON value @"entity_transfer_create"@
  | EventAction'EnumEntityTransferFail -- ^ Represents the JSON value @"entity_transfer_fail"@
  | EventAction'EnumEntityTransferStale -- ^ Represents the JSON value @"entity_transfer_stale"@
  | EventAction'EnumFirewallCreate -- ^ Represents the JSON value @"firewall_create"@
  | EventAction'EnumFirewallDelete -- ^ Represents the JSON value @"firewall_delete"@
  | EventAction'EnumFirewallDisable -- ^ Represents the JSON value @"firewall_disable"@
  | EventAction'EnumFirewallEnable -- ^ Represents the JSON value @"firewall_enable"@
  | EventAction'EnumFirewallUpdate -- ^ Represents the JSON value @"firewall_update"@
  | EventAction'EnumFirewallDeviceAdd -- ^ Represents the JSON value @"firewall_device_add"@
  | EventAction'EnumFirewallDeviceRemove -- ^ Represents the JSON value @"firewall_device_remove"@
  | EventAction'EnumHostReboot -- ^ Represents the JSON value @"host_reboot"@
  | EventAction'EnumImageDelete -- ^ Represents the JSON value @"image_delete"@
  | EventAction'EnumImageUpdate -- ^ Represents the JSON value @"image_update"@
  | EventAction'EnumImageUpload -- ^ Represents the JSON value @"image_upload"@
  | EventAction'EnumIpaddressUpdate -- ^ Represents the JSON value @"ipaddress_update"@
  | EventAction'EnumLassieReboot -- ^ Represents the JSON value @"lassie_reboot"@
  | EventAction'EnumLishBoot -- ^ Represents the JSON value @"lish_boot"@
  | EventAction'EnumLinodeAddip -- ^ Represents the JSON value @"linode_addip"@
  | EventAction'EnumLinodeBoot -- ^ Represents the JSON value @"linode_boot"@
  | EventAction'EnumLinodeClone -- ^ Represents the JSON value @"linode_clone"@
  | EventAction'EnumLinodeCreate -- ^ Represents the JSON value @"linode_create"@
  | EventAction'EnumLinodeDelete -- ^ Represents the JSON value @"linode_delete"@
  | EventAction'EnumLinodeUpdate -- ^ Represents the JSON value @"linode_update"@
  | EventAction'EnumLinodeDeleteip -- ^ Represents the JSON value @"linode_deleteip"@
  | EventAction'EnumLinodeMigrate -- ^ Represents the JSON value @"linode_migrate"@
  | EventAction'EnumLinodeMigrateDatacenter -- ^ Represents the JSON value @"linode_migrate_datacenter"@
  | EventAction'EnumLinodeMigrateDatacenterCreate -- ^ Represents the JSON value @"linode_migrate_datacenter_create"@
  | EventAction'EnumLinodeMutate -- ^ Represents the JSON value @"linode_mutate"@
  | EventAction'EnumLinodeMutateCreate -- ^ Represents the JSON value @"linode_mutate_create"@
  | EventAction'EnumLinodeReboot -- ^ Represents the JSON value @"linode_reboot"@
  | EventAction'EnumLinodeRebuild -- ^ Represents the JSON value @"linode_rebuild"@
  | EventAction'EnumLinodeResize -- ^ Represents the JSON value @"linode_resize"@
  | EventAction'EnumLinodeResizeCreate -- ^ Represents the JSON value @"linode_resize_create"@
  | EventAction'EnumLinodeShutdown -- ^ Represents the JSON value @"linode_shutdown"@
  | EventAction'EnumLinodeSnapshot -- ^ Represents the JSON value @"linode_snapshot"@
  | EventAction'EnumLinodeConfigCreate -- ^ Represents the JSON value @"linode_config_create"@
  | EventAction'EnumLinodeConfigDelete -- ^ Represents the JSON value @"linode_config_delete"@
  | EventAction'EnumLinodeConfigUpdate -- ^ Represents the JSON value @"linode_config_update"@
  | EventAction'EnumLkeNodeCreate -- ^ Represents the JSON value @"lke_node_create"@
  | EventAction'EnumLongviewclientCreate -- ^ Represents the JSON value @"longviewclient_create"@
  | EventAction'EnumLongviewclientDelete -- ^ Represents the JSON value @"longviewclient_delete"@
  | EventAction'EnumLongviewclientUpdate -- ^ Represents the JSON value @"longviewclient_update"@
  | EventAction'EnumManagedDisabled -- ^ Represents the JSON value @"managed_disabled"@
  | EventAction'EnumManagedEnabled -- ^ Represents the JSON value @"managed_enabled"@
  | EventAction'EnumManagedServiceCreate -- ^ Represents the JSON value @"managed_service_create"@
  | EventAction'EnumManagedServiceDelete -- ^ Represents the JSON value @"managed_service_delete"@
  | EventAction'EnumNodebalancerCreate -- ^ Represents the JSON value @"nodebalancer_create"@
  | EventAction'EnumNodebalancerDelete -- ^ Represents the JSON value @"nodebalancer_delete"@
  | EventAction'EnumNodebalancerUpdate -- ^ Represents the JSON value @"nodebalancer_update"@
  | EventAction'EnumNodebalancerConfigCreate -- ^ Represents the JSON value @"nodebalancer_config_create"@
  | EventAction'EnumNodebalancerConfigDelete -- ^ Represents the JSON value @"nodebalancer_config_delete"@
  | EventAction'EnumNodebalancerConfigUpdate -- ^ Represents the JSON value @"nodebalancer_config_update"@
  | EventAction'EnumNodebalancerNodeCreate -- ^ Represents the JSON value @"nodebalancer_node_create"@
  | EventAction'EnumNodebalancerNodeDelete -- ^ Represents the JSON value @"nodebalancer_node_delete"@
  | EventAction'EnumNodebalancerNodeUpdate -- ^ Represents the JSON value @"nodebalancer_node_update"@
  | EventAction'EnumOauthClientCreate -- ^ Represents the JSON value @"oauth_client_create"@
  | EventAction'EnumOauthClientDelete -- ^ Represents the JSON value @"oauth_client_delete"@
  | EventAction'EnumOauthClientSecretReset -- ^ Represents the JSON value @"oauth_client_secret_reset"@
  | EventAction'EnumOauthClientUpdate -- ^ Represents the JSON value @"oauth_client_update"@
  | EventAction'EnumPasswordReset -- ^ Represents the JSON value @"password_reset"@
  | EventAction'EnumPaymentMethodAdd -- ^ Represents the JSON value @"payment_method_add"@
  | EventAction'EnumPaymentSubmitted -- ^ Represents the JSON value @"payment_submitted"@
  | EventAction'EnumProfileUpdate -- ^ Represents the JSON value @"profile_update"@
  | EventAction'EnumStackscriptCreate -- ^ Represents the JSON value @"stackscript_create"@
  | EventAction'EnumStackscriptDelete -- ^ Represents the JSON value @"stackscript_delete"@
  | EventAction'EnumStackscriptUpdate -- ^ Represents the JSON value @"stackscript_update"@
  | EventAction'EnumStackscriptPublicize -- ^ Represents the JSON value @"stackscript_publicize"@
  | EventAction'EnumStackscriptRevise -- ^ Represents the JSON value @"stackscript_revise"@
  | EventAction'EnumTagCreate -- ^ Represents the JSON value @"tag_create"@
  | EventAction'EnumTagDelete -- ^ Represents the JSON value @"tag_delete"@
  | EventAction'EnumTfaDisabled -- ^ Represents the JSON value @"tfa_disabled"@
  | EventAction'EnumTfaEnabled -- ^ Represents the JSON value @"tfa_enabled"@
  | EventAction'EnumTicketAttachmentUpload -- ^ Represents the JSON value @"ticket_attachment_upload"@
  | EventAction'EnumTicketCreate -- ^ Represents the JSON value @"ticket_create"@
  | EventAction'EnumTicketUpdate -- ^ Represents the JSON value @"ticket_update"@
  | EventAction'EnumTokenCreate -- ^ Represents the JSON value @"token_create"@
  | EventAction'EnumTokenDelete -- ^ Represents the JSON value @"token_delete"@
  | EventAction'EnumTokenUpdate -- ^ Represents the JSON value @"token_update"@
  | EventAction'EnumUserCreate -- ^ Represents the JSON value @"user_create"@
  | EventAction'EnumUserUpdate -- ^ Represents the JSON value @"user_update"@
  | EventAction'EnumUserDelete -- ^ Represents the JSON value @"user_delete"@
  | EventAction'EnumUserSshKeyAdd -- ^ Represents the JSON value @"user_ssh_key_add"@
  | EventAction'EnumUserSshKeyDelete -- ^ Represents the JSON value @"user_ssh_key_delete"@
  | EventAction'EnumUserSshKeyUpdate -- ^ Represents the JSON value @"user_ssh_key_update"@
  | EventAction'EnumVlanAttach -- ^ Represents the JSON value @"vlan_attach"@
  | EventAction'EnumVlanDetach -- ^ Represents the JSON value @"vlan_detach"@
  | EventAction'EnumVolumeAttach -- ^ Represents the JSON value @"volume_attach"@
  | EventAction'EnumVolumeClone -- ^ Represents the JSON value @"volume_clone"@
  | EventAction'EnumVolumeCreate -- ^ Represents the JSON value @"volume_create"@
  | EventAction'EnumVolumeDelete -- ^ Represents the JSON value @"volume_delete"@
  | EventAction'EnumVolumeUpdate -- ^ Represents the JSON value @"volume_update"@
  | EventAction'EnumVolumeDetach -- ^ Represents the JSON value @"volume_detach"@
  | EventAction'EnumVolumeResize -- ^ Represents the JSON value @"volume_resize"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EventAction'
    where toJSON (EventAction'Other val) = val
          toJSON (EventAction'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (EventAction'EnumAccountUpdate) = "account_update"
          toJSON (EventAction'EnumAccountSettingsUpdate) = "account_settings_update"
          toJSON (EventAction'EnumBackupsEnable) = "backups_enable"
          toJSON (EventAction'EnumBackupsCancel) = "backups_cancel"
          toJSON (EventAction'EnumBackupsRestore) = "backups_restore"
          toJSON (EventAction'EnumCommunityQuestionReply) = "community_question_reply"
          toJSON (EventAction'EnumCommunityLike) = "community_like"
          toJSON (EventAction'EnumCreditCardUpdated) = "credit_card_updated"
          toJSON (EventAction'EnumDiskCreate) = "disk_create"
          toJSON (EventAction'EnumDiskDelete) = "disk_delete"
          toJSON (EventAction'EnumDiskUpdate) = "disk_update"
          toJSON (EventAction'EnumDiskDuplicate) = "disk_duplicate"
          toJSON (EventAction'EnumDiskImagize) = "disk_imagize"
          toJSON (EventAction'EnumDiskResize) = "disk_resize"
          toJSON (EventAction'EnumDnsRecordCreate) = "dns_record_create"
          toJSON (EventAction'EnumDnsRecordDelete) = "dns_record_delete"
          toJSON (EventAction'EnumDnsRecordUpdate) = "dns_record_update"
          toJSON (EventAction'EnumDnsZoneCreate) = "dns_zone_create"
          toJSON (EventAction'EnumDnsZoneDelete) = "dns_zone_delete"
          toJSON (EventAction'EnumDnsZoneImport) = "dns_zone_import"
          toJSON (EventAction'EnumDnsZoneUpdate) = "dns_zone_update"
          toJSON (EventAction'EnumEntityTransferAccept) = "entity_transfer_accept"
          toJSON (EventAction'EnumEntityTransferCancel) = "entity_transfer_cancel"
          toJSON (EventAction'EnumEntityTransferCreate) = "entity_transfer_create"
          toJSON (EventAction'EnumEntityTransferFail) = "entity_transfer_fail"
          toJSON (EventAction'EnumEntityTransferStale) = "entity_transfer_stale"
          toJSON (EventAction'EnumFirewallCreate) = "firewall_create"
          toJSON (EventAction'EnumFirewallDelete) = "firewall_delete"
          toJSON (EventAction'EnumFirewallDisable) = "firewall_disable"
          toJSON (EventAction'EnumFirewallEnable) = "firewall_enable"
          toJSON (EventAction'EnumFirewallUpdate) = "firewall_update"
          toJSON (EventAction'EnumFirewallDeviceAdd) = "firewall_device_add"
          toJSON (EventAction'EnumFirewallDeviceRemove) = "firewall_device_remove"
          toJSON (EventAction'EnumHostReboot) = "host_reboot"
          toJSON (EventAction'EnumImageDelete) = "image_delete"
          toJSON (EventAction'EnumImageUpdate) = "image_update"
          toJSON (EventAction'EnumImageUpload) = "image_upload"
          toJSON (EventAction'EnumIpaddressUpdate) = "ipaddress_update"
          toJSON (EventAction'EnumLassieReboot) = "lassie_reboot"
          toJSON (EventAction'EnumLishBoot) = "lish_boot"
          toJSON (EventAction'EnumLinodeAddip) = "linode_addip"
          toJSON (EventAction'EnumLinodeBoot) = "linode_boot"
          toJSON (EventAction'EnumLinodeClone) = "linode_clone"
          toJSON (EventAction'EnumLinodeCreate) = "linode_create"
          toJSON (EventAction'EnumLinodeDelete) = "linode_delete"
          toJSON (EventAction'EnumLinodeUpdate) = "linode_update"
          toJSON (EventAction'EnumLinodeDeleteip) = "linode_deleteip"
          toJSON (EventAction'EnumLinodeMigrate) = "linode_migrate"
          toJSON (EventAction'EnumLinodeMigrateDatacenter) = "linode_migrate_datacenter"
          toJSON (EventAction'EnumLinodeMigrateDatacenterCreate) = "linode_migrate_datacenter_create"
          toJSON (EventAction'EnumLinodeMutate) = "linode_mutate"
          toJSON (EventAction'EnumLinodeMutateCreate) = "linode_mutate_create"
          toJSON (EventAction'EnumLinodeReboot) = "linode_reboot"
          toJSON (EventAction'EnumLinodeRebuild) = "linode_rebuild"
          toJSON (EventAction'EnumLinodeResize) = "linode_resize"
          toJSON (EventAction'EnumLinodeResizeCreate) = "linode_resize_create"
          toJSON (EventAction'EnumLinodeShutdown) = "linode_shutdown"
          toJSON (EventAction'EnumLinodeSnapshot) = "linode_snapshot"
          toJSON (EventAction'EnumLinodeConfigCreate) = "linode_config_create"
          toJSON (EventAction'EnumLinodeConfigDelete) = "linode_config_delete"
          toJSON (EventAction'EnumLinodeConfigUpdate) = "linode_config_update"
          toJSON (EventAction'EnumLkeNodeCreate) = "lke_node_create"
          toJSON (EventAction'EnumLongviewclientCreate) = "longviewclient_create"
          toJSON (EventAction'EnumLongviewclientDelete) = "longviewclient_delete"
          toJSON (EventAction'EnumLongviewclientUpdate) = "longviewclient_update"
          toJSON (EventAction'EnumManagedDisabled) = "managed_disabled"
          toJSON (EventAction'EnumManagedEnabled) = "managed_enabled"
          toJSON (EventAction'EnumManagedServiceCreate) = "managed_service_create"
          toJSON (EventAction'EnumManagedServiceDelete) = "managed_service_delete"
          toJSON (EventAction'EnumNodebalancerCreate) = "nodebalancer_create"
          toJSON (EventAction'EnumNodebalancerDelete) = "nodebalancer_delete"
          toJSON (EventAction'EnumNodebalancerUpdate) = "nodebalancer_update"
          toJSON (EventAction'EnumNodebalancerConfigCreate) = "nodebalancer_config_create"
          toJSON (EventAction'EnumNodebalancerConfigDelete) = "nodebalancer_config_delete"
          toJSON (EventAction'EnumNodebalancerConfigUpdate) = "nodebalancer_config_update"
          toJSON (EventAction'EnumNodebalancerNodeCreate) = "nodebalancer_node_create"
          toJSON (EventAction'EnumNodebalancerNodeDelete) = "nodebalancer_node_delete"
          toJSON (EventAction'EnumNodebalancerNodeUpdate) = "nodebalancer_node_update"
          toJSON (EventAction'EnumOauthClientCreate) = "oauth_client_create"
          toJSON (EventAction'EnumOauthClientDelete) = "oauth_client_delete"
          toJSON (EventAction'EnumOauthClientSecretReset) = "oauth_client_secret_reset"
          toJSON (EventAction'EnumOauthClientUpdate) = "oauth_client_update"
          toJSON (EventAction'EnumPasswordReset) = "password_reset"
          toJSON (EventAction'EnumPaymentMethodAdd) = "payment_method_add"
          toJSON (EventAction'EnumPaymentSubmitted) = "payment_submitted"
          toJSON (EventAction'EnumProfileUpdate) = "profile_update"
          toJSON (EventAction'EnumStackscriptCreate) = "stackscript_create"
          toJSON (EventAction'EnumStackscriptDelete) = "stackscript_delete"
          toJSON (EventAction'EnumStackscriptUpdate) = "stackscript_update"
          toJSON (EventAction'EnumStackscriptPublicize) = "stackscript_publicize"
          toJSON (EventAction'EnumStackscriptRevise) = "stackscript_revise"
          toJSON (EventAction'EnumTagCreate) = "tag_create"
          toJSON (EventAction'EnumTagDelete) = "tag_delete"
          toJSON (EventAction'EnumTfaDisabled) = "tfa_disabled"
          toJSON (EventAction'EnumTfaEnabled) = "tfa_enabled"
          toJSON (EventAction'EnumTicketAttachmentUpload) = "ticket_attachment_upload"
          toJSON (EventAction'EnumTicketCreate) = "ticket_create"
          toJSON (EventAction'EnumTicketUpdate) = "ticket_update"
          toJSON (EventAction'EnumTokenCreate) = "token_create"
          toJSON (EventAction'EnumTokenDelete) = "token_delete"
          toJSON (EventAction'EnumTokenUpdate) = "token_update"
          toJSON (EventAction'EnumUserCreate) = "user_create"
          toJSON (EventAction'EnumUserUpdate) = "user_update"
          toJSON (EventAction'EnumUserDelete) = "user_delete"
          toJSON (EventAction'EnumUserSshKeyAdd) = "user_ssh_key_add"
          toJSON (EventAction'EnumUserSshKeyDelete) = "user_ssh_key_delete"
          toJSON (EventAction'EnumUserSshKeyUpdate) = "user_ssh_key_update"
          toJSON (EventAction'EnumVlanAttach) = "vlan_attach"
          toJSON (EventAction'EnumVlanDetach) = "vlan_detach"
          toJSON (EventAction'EnumVolumeAttach) = "volume_attach"
          toJSON (EventAction'EnumVolumeClone) = "volume_clone"
          toJSON (EventAction'EnumVolumeCreate) = "volume_create"
          toJSON (EventAction'EnumVolumeDelete) = "volume_delete"
          toJSON (EventAction'EnumVolumeUpdate) = "volume_update"
          toJSON (EventAction'EnumVolumeDetach) = "volume_detach"
          toJSON (EventAction'EnumVolumeResize) = "volume_resize"
instance Data.Aeson.Types.FromJSON.FromJSON EventAction'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account_update" -> EventAction'EnumAccountUpdate
                                            | val GHC.Classes.== "account_settings_update" -> EventAction'EnumAccountSettingsUpdate
                                            | val GHC.Classes.== "backups_enable" -> EventAction'EnumBackupsEnable
                                            | val GHC.Classes.== "backups_cancel" -> EventAction'EnumBackupsCancel
                                            | val GHC.Classes.== "backups_restore" -> EventAction'EnumBackupsRestore
                                            | val GHC.Classes.== "community_question_reply" -> EventAction'EnumCommunityQuestionReply
                                            | val GHC.Classes.== "community_like" -> EventAction'EnumCommunityLike
                                            | val GHC.Classes.== "credit_card_updated" -> EventAction'EnumCreditCardUpdated
                                            | val GHC.Classes.== "disk_create" -> EventAction'EnumDiskCreate
                                            | val GHC.Classes.== "disk_delete" -> EventAction'EnumDiskDelete
                                            | val GHC.Classes.== "disk_update" -> EventAction'EnumDiskUpdate
                                            | val GHC.Classes.== "disk_duplicate" -> EventAction'EnumDiskDuplicate
                                            | val GHC.Classes.== "disk_imagize" -> EventAction'EnumDiskImagize
                                            | val GHC.Classes.== "disk_resize" -> EventAction'EnumDiskResize
                                            | val GHC.Classes.== "dns_record_create" -> EventAction'EnumDnsRecordCreate
                                            | val GHC.Classes.== "dns_record_delete" -> EventAction'EnumDnsRecordDelete
                                            | val GHC.Classes.== "dns_record_update" -> EventAction'EnumDnsRecordUpdate
                                            | val GHC.Classes.== "dns_zone_create" -> EventAction'EnumDnsZoneCreate
                                            | val GHC.Classes.== "dns_zone_delete" -> EventAction'EnumDnsZoneDelete
                                            | val GHC.Classes.== "dns_zone_import" -> EventAction'EnumDnsZoneImport
                                            | val GHC.Classes.== "dns_zone_update" -> EventAction'EnumDnsZoneUpdate
                                            | val GHC.Classes.== "entity_transfer_accept" -> EventAction'EnumEntityTransferAccept
                                            | val GHC.Classes.== "entity_transfer_cancel" -> EventAction'EnumEntityTransferCancel
                                            | val GHC.Classes.== "entity_transfer_create" -> EventAction'EnumEntityTransferCreate
                                            | val GHC.Classes.== "entity_transfer_fail" -> EventAction'EnumEntityTransferFail
                                            | val GHC.Classes.== "entity_transfer_stale" -> EventAction'EnumEntityTransferStale
                                            | val GHC.Classes.== "firewall_create" -> EventAction'EnumFirewallCreate
                                            | val GHC.Classes.== "firewall_delete" -> EventAction'EnumFirewallDelete
                                            | val GHC.Classes.== "firewall_disable" -> EventAction'EnumFirewallDisable
                                            | val GHC.Classes.== "firewall_enable" -> EventAction'EnumFirewallEnable
                                            | val GHC.Classes.== "firewall_update" -> EventAction'EnumFirewallUpdate
                                            | val GHC.Classes.== "firewall_device_add" -> EventAction'EnumFirewallDeviceAdd
                                            | val GHC.Classes.== "firewall_device_remove" -> EventAction'EnumFirewallDeviceRemove
                                            | val GHC.Classes.== "host_reboot" -> EventAction'EnumHostReboot
                                            | val GHC.Classes.== "image_delete" -> EventAction'EnumImageDelete
                                            | val GHC.Classes.== "image_update" -> EventAction'EnumImageUpdate
                                            | val GHC.Classes.== "image_upload" -> EventAction'EnumImageUpload
                                            | val GHC.Classes.== "ipaddress_update" -> EventAction'EnumIpaddressUpdate
                                            | val GHC.Classes.== "lassie_reboot" -> EventAction'EnumLassieReboot
                                            | val GHC.Classes.== "lish_boot" -> EventAction'EnumLishBoot
                                            | val GHC.Classes.== "linode_addip" -> EventAction'EnumLinodeAddip
                                            | val GHC.Classes.== "linode_boot" -> EventAction'EnumLinodeBoot
                                            | val GHC.Classes.== "linode_clone" -> EventAction'EnumLinodeClone
                                            | val GHC.Classes.== "linode_create" -> EventAction'EnumLinodeCreate
                                            | val GHC.Classes.== "linode_delete" -> EventAction'EnumLinodeDelete
                                            | val GHC.Classes.== "linode_update" -> EventAction'EnumLinodeUpdate
                                            | val GHC.Classes.== "linode_deleteip" -> EventAction'EnumLinodeDeleteip
                                            | val GHC.Classes.== "linode_migrate" -> EventAction'EnumLinodeMigrate
                                            | val GHC.Classes.== "linode_migrate_datacenter" -> EventAction'EnumLinodeMigrateDatacenter
                                            | val GHC.Classes.== "linode_migrate_datacenter_create" -> EventAction'EnumLinodeMigrateDatacenterCreate
                                            | val GHC.Classes.== "linode_mutate" -> EventAction'EnumLinodeMutate
                                            | val GHC.Classes.== "linode_mutate_create" -> EventAction'EnumLinodeMutateCreate
                                            | val GHC.Classes.== "linode_reboot" -> EventAction'EnumLinodeReboot
                                            | val GHC.Classes.== "linode_rebuild" -> EventAction'EnumLinodeRebuild
                                            | val GHC.Classes.== "linode_resize" -> EventAction'EnumLinodeResize
                                            | val GHC.Classes.== "linode_resize_create" -> EventAction'EnumLinodeResizeCreate
                                            | val GHC.Classes.== "linode_shutdown" -> EventAction'EnumLinodeShutdown
                                            | val GHC.Classes.== "linode_snapshot" -> EventAction'EnumLinodeSnapshot
                                            | val GHC.Classes.== "linode_config_create" -> EventAction'EnumLinodeConfigCreate
                                            | val GHC.Classes.== "linode_config_delete" -> EventAction'EnumLinodeConfigDelete
                                            | val GHC.Classes.== "linode_config_update" -> EventAction'EnumLinodeConfigUpdate
                                            | val GHC.Classes.== "lke_node_create" -> EventAction'EnumLkeNodeCreate
                                            | val GHC.Classes.== "longviewclient_create" -> EventAction'EnumLongviewclientCreate
                                            | val GHC.Classes.== "longviewclient_delete" -> EventAction'EnumLongviewclientDelete
                                            | val GHC.Classes.== "longviewclient_update" -> EventAction'EnumLongviewclientUpdate
                                            | val GHC.Classes.== "managed_disabled" -> EventAction'EnumManagedDisabled
                                            | val GHC.Classes.== "managed_enabled" -> EventAction'EnumManagedEnabled
                                            | val GHC.Classes.== "managed_service_create" -> EventAction'EnumManagedServiceCreate
                                            | val GHC.Classes.== "managed_service_delete" -> EventAction'EnumManagedServiceDelete
                                            | val GHC.Classes.== "nodebalancer_create" -> EventAction'EnumNodebalancerCreate
                                            | val GHC.Classes.== "nodebalancer_delete" -> EventAction'EnumNodebalancerDelete
                                            | val GHC.Classes.== "nodebalancer_update" -> EventAction'EnumNodebalancerUpdate
                                            | val GHC.Classes.== "nodebalancer_config_create" -> EventAction'EnumNodebalancerConfigCreate
                                            | val GHC.Classes.== "nodebalancer_config_delete" -> EventAction'EnumNodebalancerConfigDelete
                                            | val GHC.Classes.== "nodebalancer_config_update" -> EventAction'EnumNodebalancerConfigUpdate
                                            | val GHC.Classes.== "nodebalancer_node_create" -> EventAction'EnumNodebalancerNodeCreate
                                            | val GHC.Classes.== "nodebalancer_node_delete" -> EventAction'EnumNodebalancerNodeDelete
                                            | val GHC.Classes.== "nodebalancer_node_update" -> EventAction'EnumNodebalancerNodeUpdate
                                            | val GHC.Classes.== "oauth_client_create" -> EventAction'EnumOauthClientCreate
                                            | val GHC.Classes.== "oauth_client_delete" -> EventAction'EnumOauthClientDelete
                                            | val GHC.Classes.== "oauth_client_secret_reset" -> EventAction'EnumOauthClientSecretReset
                                            | val GHC.Classes.== "oauth_client_update" -> EventAction'EnumOauthClientUpdate
                                            | val GHC.Classes.== "password_reset" -> EventAction'EnumPasswordReset
                                            | val GHC.Classes.== "payment_method_add" -> EventAction'EnumPaymentMethodAdd
                                            | val GHC.Classes.== "payment_submitted" -> EventAction'EnumPaymentSubmitted
                                            | val GHC.Classes.== "profile_update" -> EventAction'EnumProfileUpdate
                                            | val GHC.Classes.== "stackscript_create" -> EventAction'EnumStackscriptCreate
                                            | val GHC.Classes.== "stackscript_delete" -> EventAction'EnumStackscriptDelete
                                            | val GHC.Classes.== "stackscript_update" -> EventAction'EnumStackscriptUpdate
                                            | val GHC.Classes.== "stackscript_publicize" -> EventAction'EnumStackscriptPublicize
                                            | val GHC.Classes.== "stackscript_revise" -> EventAction'EnumStackscriptRevise
                                            | val GHC.Classes.== "tag_create" -> EventAction'EnumTagCreate
                                            | val GHC.Classes.== "tag_delete" -> EventAction'EnumTagDelete
                                            | val GHC.Classes.== "tfa_disabled" -> EventAction'EnumTfaDisabled
                                            | val GHC.Classes.== "tfa_enabled" -> EventAction'EnumTfaEnabled
                                            | val GHC.Classes.== "ticket_attachment_upload" -> EventAction'EnumTicketAttachmentUpload
                                            | val GHC.Classes.== "ticket_create" -> EventAction'EnumTicketCreate
                                            | val GHC.Classes.== "ticket_update" -> EventAction'EnumTicketUpdate
                                            | val GHC.Classes.== "token_create" -> EventAction'EnumTokenCreate
                                            | val GHC.Classes.== "token_delete" -> EventAction'EnumTokenDelete
                                            | val GHC.Classes.== "token_update" -> EventAction'EnumTokenUpdate
                                            | val GHC.Classes.== "user_create" -> EventAction'EnumUserCreate
                                            | val GHC.Classes.== "user_update" -> EventAction'EnumUserUpdate
                                            | val GHC.Classes.== "user_delete" -> EventAction'EnumUserDelete
                                            | val GHC.Classes.== "user_ssh_key_add" -> EventAction'EnumUserSshKeyAdd
                                            | val GHC.Classes.== "user_ssh_key_delete" -> EventAction'EnumUserSshKeyDelete
                                            | val GHC.Classes.== "user_ssh_key_update" -> EventAction'EnumUserSshKeyUpdate
                                            | val GHC.Classes.== "vlan_attach" -> EventAction'EnumVlanAttach
                                            | val GHC.Classes.== "vlan_detach" -> EventAction'EnumVlanDetach
                                            | val GHC.Classes.== "volume_attach" -> EventAction'EnumVolumeAttach
                                            | val GHC.Classes.== "volume_clone" -> EventAction'EnumVolumeClone
                                            | val GHC.Classes.== "volume_create" -> EventAction'EnumVolumeCreate
                                            | val GHC.Classes.== "volume_delete" -> EventAction'EnumVolumeDelete
                                            | val GHC.Classes.== "volume_update" -> EventAction'EnumVolumeUpdate
                                            | val GHC.Classes.== "volume_detach" -> EventAction'EnumVolumeDetach
                                            | val GHC.Classes.== "volume_resize" -> EventAction'EnumVolumeResize
                                            | GHC.Base.otherwise -> EventAction'Other val)
-- | Defines the object schema located at @components.schemas.Event.properties.entity@ in the specification.
-- 
-- Detailed information about the Event\'s entity, including ID, type, label, and URL used to access it.
data EventEntity' = EventEntity' {
  -- | id: The unique ID for an Event\'s entity.
  -- 
  -- 
  -- Some Event entities do not have IDs associated with them, so they
  -- will not be returned when filtering by ID. These Events include:
  --   * \`account\`
  --   * \`profile\`
  -- 
  -- Entities for some Events are assigned the ID of the Linode they correspond to.
  -- When filtering by ID for these Events, use the corresponding Linode\'s ID.
  -- These Events include:
  --   * \`disks\`
  --   * \`backups\`
  -- 
  -- 
  -- Tag Events use a tag\'s name for the entity ID field. When filtering by ID
  -- for tag Events, supply the name of the tag.
  eventEntity'Id :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | label: The current label of this object. The label may reflect changes that occur with this Event.
  , eventEntity'Label :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity that is being referenced by the Event.
  , eventEntity'Type :: (GHC.Maybe.Maybe EventEntity'Type')
  -- | url: The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
  , eventEntity'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EventEntity'
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= eventEntity'Id obj : "label" Data.Aeson.Types.ToJSON..= eventEntity'Label obj : "type" Data.Aeson.Types.ToJSON..= eventEntity'Type obj : "url" Data.Aeson.Types.ToJSON..= eventEntity'Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= eventEntity'Id obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= eventEntity'Label obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= eventEntity'Type obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= eventEntity'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON EventEntity'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EventEntity'" (\obj -> (((GHC.Base.pure EventEntity' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'EventEntity'' with all required fields.
mkEventEntity' :: EventEntity'
mkEventEntity' = EventEntity'{eventEntity'Id = GHC.Maybe.Nothing,
                              eventEntity'Label = GHC.Maybe.Nothing,
                              eventEntity'Type = GHC.Maybe.Nothing,
                              eventEntity'Url = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Event.properties.entity.properties.type@ in the specification.
-- 
-- The type of entity that is being referenced by the Event.
data EventEntity'Type' =
   EventEntity'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | EventEntity'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | EventEntity'Type'EnumAccount -- ^ Represents the JSON value @"account"@
  | EventEntity'Type'EnumBackups -- ^ Represents the JSON value @"backups"@
  | EventEntity'Type'EnumCommunity -- ^ Represents the JSON value @"community"@
  | EventEntity'Type'EnumDisks -- ^ Represents the JSON value @"disks"@
  | EventEntity'Type'EnumDomain -- ^ Represents the JSON value @"domain"@
  | EventEntity'Type'EnumEntityTransfer -- ^ Represents the JSON value @"entity_transfer"@
  | EventEntity'Type'EnumFirewall -- ^ Represents the JSON value @"firewall"@
  | EventEntity'Type'EnumImage -- ^ Represents the JSON value @"image"@
  | EventEntity'Type'EnumIpaddress -- ^ Represents the JSON value @"ipaddress"@
  | EventEntity'Type'EnumLinode -- ^ Represents the JSON value @"linode"@
  | EventEntity'Type'EnumLongview -- ^ Represents the JSON value @"longview"@
  | EventEntity'Type'EnumManagedService -- ^ Represents the JSON value @"managed_service"@
  | EventEntity'Type'EnumNodebalancer -- ^ Represents the JSON value @"nodebalancer"@
  | EventEntity'Type'EnumOauthClient -- ^ Represents the JSON value @"oauth_client"@
  | EventEntity'Type'EnumProfile -- ^ Represents the JSON value @"profile"@
  | EventEntity'Type'EnumStackscript -- ^ Represents the JSON value @"stackscript"@
  | EventEntity'Type'EnumTag -- ^ Represents the JSON value @"tag"@
  | EventEntity'Type'EnumTicket -- ^ Represents the JSON value @"ticket"@
  | EventEntity'Type'EnumToken -- ^ Represents the JSON value @"token"@
  | EventEntity'Type'EnumUser -- ^ Represents the JSON value @"user"@
  | EventEntity'Type'EnumUserSshKey -- ^ Represents the JSON value @"user_ssh_key"@
  | EventEntity'Type'EnumVolume -- ^ Represents the JSON value @"volume"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EventEntity'Type'
    where toJSON (EventEntity'Type'Other val) = val
          toJSON (EventEntity'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (EventEntity'Type'EnumAccount) = "account"
          toJSON (EventEntity'Type'EnumBackups) = "backups"
          toJSON (EventEntity'Type'EnumCommunity) = "community"
          toJSON (EventEntity'Type'EnumDisks) = "disks"
          toJSON (EventEntity'Type'EnumDomain) = "domain"
          toJSON (EventEntity'Type'EnumEntityTransfer) = "entity_transfer"
          toJSON (EventEntity'Type'EnumFirewall) = "firewall"
          toJSON (EventEntity'Type'EnumImage) = "image"
          toJSON (EventEntity'Type'EnumIpaddress) = "ipaddress"
          toJSON (EventEntity'Type'EnumLinode) = "linode"
          toJSON (EventEntity'Type'EnumLongview) = "longview"
          toJSON (EventEntity'Type'EnumManagedService) = "managed_service"
          toJSON (EventEntity'Type'EnumNodebalancer) = "nodebalancer"
          toJSON (EventEntity'Type'EnumOauthClient) = "oauth_client"
          toJSON (EventEntity'Type'EnumProfile) = "profile"
          toJSON (EventEntity'Type'EnumStackscript) = "stackscript"
          toJSON (EventEntity'Type'EnumTag) = "tag"
          toJSON (EventEntity'Type'EnumTicket) = "ticket"
          toJSON (EventEntity'Type'EnumToken) = "token"
          toJSON (EventEntity'Type'EnumUser) = "user"
          toJSON (EventEntity'Type'EnumUserSshKey) = "user_ssh_key"
          toJSON (EventEntity'Type'EnumVolume) = "volume"
instance Data.Aeson.Types.FromJSON.FromJSON EventEntity'Type'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account" -> EventEntity'Type'EnumAccount
                                            | val GHC.Classes.== "backups" -> EventEntity'Type'EnumBackups
                                            | val GHC.Classes.== "community" -> EventEntity'Type'EnumCommunity
                                            | val GHC.Classes.== "disks" -> EventEntity'Type'EnumDisks
                                            | val GHC.Classes.== "domain" -> EventEntity'Type'EnumDomain
                                            | val GHC.Classes.== "entity_transfer" -> EventEntity'Type'EnumEntityTransfer
                                            | val GHC.Classes.== "firewall" -> EventEntity'Type'EnumFirewall
                                            | val GHC.Classes.== "image" -> EventEntity'Type'EnumImage
                                            | val GHC.Classes.== "ipaddress" -> EventEntity'Type'EnumIpaddress
                                            | val GHC.Classes.== "linode" -> EventEntity'Type'EnumLinode
                                            | val GHC.Classes.== "longview" -> EventEntity'Type'EnumLongview
                                            | val GHC.Classes.== "managed_service" -> EventEntity'Type'EnumManagedService
                                            | val GHC.Classes.== "nodebalancer" -> EventEntity'Type'EnumNodebalancer
                                            | val GHC.Classes.== "oauth_client" -> EventEntity'Type'EnumOauthClient
                                            | val GHC.Classes.== "profile" -> EventEntity'Type'EnumProfile
                                            | val GHC.Classes.== "stackscript" -> EventEntity'Type'EnumStackscript
                                            | val GHC.Classes.== "tag" -> EventEntity'Type'EnumTag
                                            | val GHC.Classes.== "ticket" -> EventEntity'Type'EnumTicket
                                            | val GHC.Classes.== "token" -> EventEntity'Type'EnumToken
                                            | val GHC.Classes.== "user" -> EventEntity'Type'EnumUser
                                            | val GHC.Classes.== "user_ssh_key" -> EventEntity'Type'EnumUserSshKey
                                            | val GHC.Classes.== "volume" -> EventEntity'Type'EnumVolume
                                            | GHC.Base.otherwise -> EventEntity'Type'Other val)
-- | Defines the object schema located at @components.schemas.Event.properties.secondary_entity@ in the specification.
-- 
-- Detailed information about the Event\'s secondary entity, which provides additional information
-- for events such as, but not limited to, \`linode_boot\`, \`linode_reboot\`, \`linode_create\`, and \`linode_clone\` Event actions.
data EventSecondaryEntity' = EventSecondaryEntity' {
  -- | id: The ID of the object that is the secondary entity.
  eventSecondaryEntity'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | label: The label of this object.
  , eventSecondaryEntity'Label :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity that is being referenced by the Event.
  , eventSecondaryEntity'Type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | url: The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
  , eventSecondaryEntity'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EventSecondaryEntity'
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Id obj : "label" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Label obj : "type" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Type obj : "url" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Id obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Label obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Type obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= eventSecondaryEntity'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON EventSecondaryEntity'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EventSecondaryEntity'" (\obj -> (((GHC.Base.pure EventSecondaryEntity' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'EventSecondaryEntity'' with all required fields.
mkEventSecondaryEntity' :: EventSecondaryEntity'
mkEventSecondaryEntity' = EventSecondaryEntity'{eventSecondaryEntity'Id = GHC.Maybe.Nothing,
                                                eventSecondaryEntity'Label = GHC.Maybe.Nothing,
                                                eventSecondaryEntity'Type = GHC.Maybe.Nothing,
                                                eventSecondaryEntity'Url = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.Event.properties.status@ in the specification.
-- 
-- The current status of this Event.
data EventStatus' =
   EventStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | EventStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | EventStatus'EnumFailed -- ^ Represents the JSON value @"failed"@
  | EventStatus'EnumFinished -- ^ Represents the JSON value @"finished"@
  | EventStatus'EnumNotification -- ^ Represents the JSON value @"notification"@
  | EventStatus'EnumScheduled -- ^ Represents the JSON value @"scheduled"@
  | EventStatus'EnumStarted -- ^ Represents the JSON value @"started"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EventStatus'
    where toJSON (EventStatus'Other val) = val
          toJSON (EventStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (EventStatus'EnumFailed) = "failed"
          toJSON (EventStatus'EnumFinished) = "finished"
          toJSON (EventStatus'EnumNotification) = "notification"
          toJSON (EventStatus'EnumScheduled) = "scheduled"
          toJSON (EventStatus'EnumStarted) = "started"
instance Data.Aeson.Types.FromJSON.FromJSON EventStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "failed" -> EventStatus'EnumFailed
                                            | val GHC.Classes.== "finished" -> EventStatus'EnumFinished
                                            | val GHC.Classes.== "notification" -> EventStatus'EnumNotification
                                            | val GHC.Classes.== "scheduled" -> EventStatus'EnumScheduled
                                            | val GHC.Classes.== "started" -> EventStatus'EnumStarted
                                            | GHC.Base.otherwise -> EventStatus'Other val)
