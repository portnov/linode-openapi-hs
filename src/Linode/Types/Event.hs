-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema Event
module Linode.Types.Event where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common

-- | Defines the data type for the schema Event
-- 
-- A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event.
-- The Events returned depends on your grants.
data Event = Event {
  -- | action: The action that caused this Event. New actions may be added in the future.
  eventAction :: (GHC.Base.Maybe EventAction)
  -- | created: When this Event was created.
  , eventCreated :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | duration: The total duration in seconds that it takes for the Event to complete.
  , eventDuration :: (GHC.Base.Maybe GHC.Types.Double)
  -- | entity: Detailed information about the Event\'s entity, including ID, type, label, and URL used to access it.
  , eventEntity :: (GHC.Base.Maybe EventEntity)
  -- | id: The unique ID of this Event.
  , eventId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | message: Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
  , eventMessage :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | percent_complete: A percentage estimating the amount of time remaining for an Event.
  -- Returns \`null\` for notification events.
  , eventPercent_complete :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | rate: The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
  , eventRate :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | read: If this Event has been read.
  , eventRead :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | secondary_entity: Detailed information about the Event\'s secondary entity, which provides additional information
  -- for events such as, but not limited to, \`linode_boot\`, \`linode_reboot\`, \`linode_create\`, and \`linode_clone\` Event actions.
  , eventSecondary_entity :: (GHC.Base.Maybe EventSecondary_entity)
  -- | seen: If this Event has been seen.
  , eventSeen :: (GHC.Base.Maybe GHC.Types.Bool)
  -- | status: The current status of this Event.
  , eventStatus :: (GHC.Base.Maybe EventStatus)
  -- | time_remaining: The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the \`percent_complete\` attribute will indicate about how much more work is to be done.
  , eventTime_remaining :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | username: The username of the User who caused the Event.
  , eventUsername :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON Event
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (eventAction obj) : (Data.Aeson..=) "created" (eventCreated obj) : (Data.Aeson..=) "duration" (eventDuration obj) : (Data.Aeson..=) "entity" (eventEntity obj) : (Data.Aeson..=) "id" (eventId obj) : (Data.Aeson..=) "message" (eventMessage obj) : (Data.Aeson..=) "percent_complete" (eventPercent_complete obj) : (Data.Aeson..=) "rate" (eventRate obj) : (Data.Aeson..=) "read" (eventRead obj) : (Data.Aeson..=) "secondary_entity" (eventSecondary_entity obj) : (Data.Aeson..=) "seen" (eventSeen obj) : (Data.Aeson..=) "status" (eventStatus obj) : (Data.Aeson..=) "time_remaining" (eventTime_remaining obj) : (Data.Aeson..=) "username" (eventUsername obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (eventAction obj) GHC.Base.<> ((Data.Aeson..=) "created" (eventCreated obj) GHC.Base.<> ((Data.Aeson..=) "duration" (eventDuration obj) GHC.Base.<> ((Data.Aeson..=) "entity" (eventEntity obj) GHC.Base.<> ((Data.Aeson..=) "id" (eventId obj) GHC.Base.<> ((Data.Aeson..=) "message" (eventMessage obj) GHC.Base.<> ((Data.Aeson..=) "percent_complete" (eventPercent_complete obj) GHC.Base.<> ((Data.Aeson..=) "rate" (eventRate obj) GHC.Base.<> ((Data.Aeson..=) "read" (eventRead obj) GHC.Base.<> ((Data.Aeson..=) "secondary_entity" (eventSecondary_entity obj) GHC.Base.<> ((Data.Aeson..=) "seen" (eventSeen obj) GHC.Base.<> ((Data.Aeson..=) "status" (eventStatus obj) GHC.Base.<> ((Data.Aeson..=) "time_remaining" (eventTime_remaining obj) GHC.Base.<> (Data.Aeson..=) "username" (eventUsername obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Event
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Event" (\obj -> (((((((((((((GHC.Base.pure Event GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "percent_complete")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "read")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "secondary_entity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "seen")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "time_remaining")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))
-- | Defines the enum schema EventAction
-- 
-- The action that caused this Event. New actions may be added in the future.
data EventAction
    = EventActionEnumOther Data.Aeson.Types.Internal.Value
    | EventActionEnumTyped Data.Text.Internal.Text
    | EventActionEnumString_account_settings_update
    | EventActionEnumString_account_update
    | EventActionEnumString_backups_cancel
    | EventActionEnumString_backups_enable
    | EventActionEnumString_backups_restore
    | EventActionEnumString_community_like
    | EventActionEnumString_community_question_reply
    | EventActionEnumString_credit_card_updated
    | EventActionEnumString_disk_create
    | EventActionEnumString_disk_delete
    | EventActionEnumString_disk_duplicate
    | EventActionEnumString_disk_imagize
    | EventActionEnumString_disk_resize
    | EventActionEnumString_disk_update
    | EventActionEnumString_dns_record_create
    | EventActionEnumString_dns_record_delete
    | EventActionEnumString_dns_record_update
    | EventActionEnumString_dns_zone_create
    | EventActionEnumString_dns_zone_delete
    | EventActionEnumString_dns_zone_import
    | EventActionEnumString_dns_zone_update
    | EventActionEnumString_entity_transfer_accept
    | EventActionEnumString_entity_transfer_cancel
    | EventActionEnumString_entity_transfer_create
    | EventActionEnumString_entity_transfer_fail
    | EventActionEnumString_entity_transfer_stale
    | EventActionEnumString_firewall_create
    | EventActionEnumString_firewall_delete
    | EventActionEnumString_firewall_device_add
    | EventActionEnumString_firewall_device_remove
    | EventActionEnumString_firewall_disable
    | EventActionEnumString_firewall_enable
    | EventActionEnumString_firewall_update
    | EventActionEnumString_host_reboot
    | EventActionEnumString_image_delete
    | EventActionEnumString_image_update
    | EventActionEnumString_image_upload
    | EventActionEnumString_ipaddress_update
    | EventActionEnumString_lassie_reboot
    | EventActionEnumString_linode_addip
    | EventActionEnumString_linode_boot
    | EventActionEnumString_linode_clone
    | EventActionEnumString_linode_config_create
    | EventActionEnumString_linode_config_delete
    | EventActionEnumString_linode_config_update
    | EventActionEnumString_linode_create
    | EventActionEnumString_linode_delete
    | EventActionEnumString_linode_deleteip
    | EventActionEnumString_linode_migrate
    | EventActionEnumString_linode_migrate_datacenter
    | EventActionEnumString_linode_migrate_datacenter_create
    | EventActionEnumString_linode_mutate
    | EventActionEnumString_linode_mutate_create
    | EventActionEnumString_linode_reboot
    | EventActionEnumString_linode_rebuild
    | EventActionEnumString_linode_resize
    | EventActionEnumString_linode_resize_create
    | EventActionEnumString_linode_shutdown
    | EventActionEnumString_linode_snapshot
    | EventActionEnumString_linode_update
    | EventActionEnumString_lish_boot
    | EventActionEnumString_lke_node_create
    | EventActionEnumString_longviewclient_create
    | EventActionEnumString_longviewclient_delete
    | EventActionEnumString_longviewclient_update
    | EventActionEnumString_managed_disabled
    | EventActionEnumString_managed_enabled
    | EventActionEnumString_managed_service_create
    | EventActionEnumString_managed_service_delete
    | EventActionEnumString_nodebalancer_config_create
    | EventActionEnumString_nodebalancer_config_delete
    | EventActionEnumString_nodebalancer_config_update
    | EventActionEnumString_nodebalancer_create
    | EventActionEnumString_nodebalancer_delete
    | EventActionEnumString_nodebalancer_node_create
    | EventActionEnumString_nodebalancer_node_delete
    | EventActionEnumString_nodebalancer_node_update
    | EventActionEnumString_nodebalancer_update
    | EventActionEnumString_oauth_client_create
    | EventActionEnumString_oauth_client_delete
    | EventActionEnumString_oauth_client_secret_reset
    | EventActionEnumString_oauth_client_update
    | EventActionEnumString_password_reset
    | EventActionEnumString_payment_method_add
    | EventActionEnumString_payment_submitted
    | EventActionEnumString_profile_update
    | EventActionEnumString_stackscript_create
    | EventActionEnumString_stackscript_delete
    | EventActionEnumString_stackscript_publicize
    | EventActionEnumString_stackscript_revise
    | EventActionEnumString_stackscript_update
    | EventActionEnumString_tag_create
    | EventActionEnumString_tag_delete
    | EventActionEnumString_tfa_disabled
    | EventActionEnumString_tfa_enabled
    | EventActionEnumString_ticket_attachment_upload
    | EventActionEnumString_ticket_create
    | EventActionEnumString_ticket_update
    | EventActionEnumString_token_create
    | EventActionEnumString_token_delete
    | EventActionEnumString_token_update
    | EventActionEnumString_user_create
    | EventActionEnumString_user_delete
    | EventActionEnumString_user_ssh_key_add
    | EventActionEnumString_user_ssh_key_delete
    | EventActionEnumString_user_ssh_key_update
    | EventActionEnumString_user_update
    | EventActionEnumString_vlan_attach
    | EventActionEnumString_vlan_detach
    | EventActionEnumString_volume_attach
    | EventActionEnumString_volume_clone
    | EventActionEnumString_volume_create
    | EventActionEnumString_volume_delete
    | EventActionEnumString_volume_detach
    | EventActionEnumString_volume_resize
    | EventActionEnumString_volume_update
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventAction
    where toJSON (EventActionEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventActionEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventActionEnumString_account_settings_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account_settings_update"
          toJSON (EventActionEnumString_account_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account_update"
          toJSON (EventActionEnumString_backups_cancel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups_cancel"
          toJSON (EventActionEnumString_backups_enable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups_enable"
          toJSON (EventActionEnumString_backups_restore) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups_restore"
          toJSON (EventActionEnumString_community_like) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "community_like"
          toJSON (EventActionEnumString_community_question_reply) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "community_question_reply"
          toJSON (EventActionEnumString_credit_card_updated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_card_updated"
          toJSON (EventActionEnumString_disk_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_create"
          toJSON (EventActionEnumString_disk_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_delete"
          toJSON (EventActionEnumString_disk_duplicate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_duplicate"
          toJSON (EventActionEnumString_disk_imagize) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_imagize"
          toJSON (EventActionEnumString_disk_resize) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_resize"
          toJSON (EventActionEnumString_disk_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_update"
          toJSON (EventActionEnumString_dns_record_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_record_create"
          toJSON (EventActionEnumString_dns_record_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_record_delete"
          toJSON (EventActionEnumString_dns_record_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_record_update"
          toJSON (EventActionEnumString_dns_zone_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_create"
          toJSON (EventActionEnumString_dns_zone_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_delete"
          toJSON (EventActionEnumString_dns_zone_import) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_import"
          toJSON (EventActionEnumString_dns_zone_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_update"
          toJSON (EventActionEnumString_entity_transfer_accept) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_accept"
          toJSON (EventActionEnumString_entity_transfer_cancel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_cancel"
          toJSON (EventActionEnumString_entity_transfer_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_create"
          toJSON (EventActionEnumString_entity_transfer_fail) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_fail"
          toJSON (EventActionEnumString_entity_transfer_stale) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_stale"
          toJSON (EventActionEnumString_firewall_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_create"
          toJSON (EventActionEnumString_firewall_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_delete"
          toJSON (EventActionEnumString_firewall_device_add) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_device_add"
          toJSON (EventActionEnumString_firewall_device_remove) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_device_remove"
          toJSON (EventActionEnumString_firewall_disable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_disable"
          toJSON (EventActionEnumString_firewall_enable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_enable"
          toJSON (EventActionEnumString_firewall_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_update"
          toJSON (EventActionEnumString_host_reboot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "host_reboot"
          toJSON (EventActionEnumString_image_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image_delete"
          toJSON (EventActionEnumString_image_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image_update"
          toJSON (EventActionEnumString_image_upload) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image_upload"
          toJSON (EventActionEnumString_ipaddress_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipaddress_update"
          toJSON (EventActionEnumString_lassie_reboot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lassie_reboot"
          toJSON (EventActionEnumString_linode_addip) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_addip"
          toJSON (EventActionEnumString_linode_boot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_boot"
          toJSON (EventActionEnumString_linode_clone) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_clone"
          toJSON (EventActionEnumString_linode_config_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_config_create"
          toJSON (EventActionEnumString_linode_config_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_config_delete"
          toJSON (EventActionEnumString_linode_config_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_config_update"
          toJSON (EventActionEnumString_linode_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_create"
          toJSON (EventActionEnumString_linode_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_delete"
          toJSON (EventActionEnumString_linode_deleteip) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_deleteip"
          toJSON (EventActionEnumString_linode_migrate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_migrate"
          toJSON (EventActionEnumString_linode_migrate_datacenter) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_migrate_datacenter"
          toJSON (EventActionEnumString_linode_migrate_datacenter_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_migrate_datacenter_create"
          toJSON (EventActionEnumString_linode_mutate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_mutate"
          toJSON (EventActionEnumString_linode_mutate_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_mutate_create"
          toJSON (EventActionEnumString_linode_reboot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_reboot"
          toJSON (EventActionEnumString_linode_rebuild) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_rebuild"
          toJSON (EventActionEnumString_linode_resize) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_resize"
          toJSON (EventActionEnumString_linode_resize_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_resize_create"
          toJSON (EventActionEnumString_linode_shutdown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_shutdown"
          toJSON (EventActionEnumString_linode_snapshot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_snapshot"
          toJSON (EventActionEnumString_linode_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_update"
          toJSON (EventActionEnumString_lish_boot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lish_boot"
          toJSON (EventActionEnumString_lke_node_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lke_node_create"
          toJSON (EventActionEnumString_longviewclient_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longviewclient_create"
          toJSON (EventActionEnumString_longviewclient_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longviewclient_delete"
          toJSON (EventActionEnumString_longviewclient_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longviewclient_update"
          toJSON (EventActionEnumString_managed_disabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_disabled"
          toJSON (EventActionEnumString_managed_enabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_enabled"
          toJSON (EventActionEnumString_managed_service_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_service_create"
          toJSON (EventActionEnumString_managed_service_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_service_delete"
          toJSON (EventActionEnumString_nodebalancer_config_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_config_create"
          toJSON (EventActionEnumString_nodebalancer_config_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_config_delete"
          toJSON (EventActionEnumString_nodebalancer_config_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_config_update"
          toJSON (EventActionEnumString_nodebalancer_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_create"
          toJSON (EventActionEnumString_nodebalancer_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_delete"
          toJSON (EventActionEnumString_nodebalancer_node_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_node_create"
          toJSON (EventActionEnumString_nodebalancer_node_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_node_delete"
          toJSON (EventActionEnumString_nodebalancer_node_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_node_update"
          toJSON (EventActionEnumString_nodebalancer_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_update"
          toJSON (EventActionEnumString_oauth_client_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_create"
          toJSON (EventActionEnumString_oauth_client_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_delete"
          toJSON (EventActionEnumString_oauth_client_secret_reset) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_secret_reset"
          toJSON (EventActionEnumString_oauth_client_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_update"
          toJSON (EventActionEnumString_password_reset) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "password_reset"
          toJSON (EventActionEnumString_payment_method_add) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_method_add"
          toJSON (EventActionEnumString_payment_submitted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_submitted"
          toJSON (EventActionEnumString_profile_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "profile_update"
          toJSON (EventActionEnumString_stackscript_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_create"
          toJSON (EventActionEnumString_stackscript_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_delete"
          toJSON (EventActionEnumString_stackscript_publicize) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_publicize"
          toJSON (EventActionEnumString_stackscript_revise) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_revise"
          toJSON (EventActionEnumString_stackscript_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_update"
          toJSON (EventActionEnumString_tag_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tag_create"
          toJSON (EventActionEnumString_tag_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tag_delete"
          toJSON (EventActionEnumString_tfa_disabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tfa_disabled"
          toJSON (EventActionEnumString_tfa_enabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tfa_enabled"
          toJSON (EventActionEnumString_ticket_attachment_upload) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_attachment_upload"
          toJSON (EventActionEnumString_ticket_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_create"
          toJSON (EventActionEnumString_ticket_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_update"
          toJSON (EventActionEnumString_token_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token_create"
          toJSON (EventActionEnumString_token_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token_delete"
          toJSON (EventActionEnumString_token_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token_update"
          toJSON (EventActionEnumString_user_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_create"
          toJSON (EventActionEnumString_user_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_delete"
          toJSON (EventActionEnumString_user_ssh_key_add) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key_add"
          toJSON (EventActionEnumString_user_ssh_key_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key_delete"
          toJSON (EventActionEnumString_user_ssh_key_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key_update"
          toJSON (EventActionEnumString_user_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_update"
          toJSON (EventActionEnumString_vlan_attach) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vlan_attach"
          toJSON (EventActionEnumString_vlan_detach) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vlan_detach"
          toJSON (EventActionEnumString_volume_attach) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_attach"
          toJSON (EventActionEnumString_volume_clone) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_clone"
          toJSON (EventActionEnumString_volume_create) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_create"
          toJSON (EventActionEnumString_volume_delete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_delete"
          toJSON (EventActionEnumString_volume_detach) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_detach"
          toJSON (EventActionEnumString_volume_resize) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_resize"
          toJSON (EventActionEnumString_volume_update) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_update"
instance Data.Aeson.FromJSON EventAction
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account_settings_update")
                                          then EventActionEnumString_account_settings_update
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account_update")
                                                then EventActionEnumString_account_update
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups_cancel")
                                                      then EventActionEnumString_backups_cancel
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups_enable")
                                                            then EventActionEnumString_backups_enable
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups_restore")
                                                                  then EventActionEnumString_backups_restore
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "community_like")
                                                                        then EventActionEnumString_community_like
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "community_question_reply")
                                                                              then EventActionEnumString_community_question_reply
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_card_updated")
                                                                                    then EventActionEnumString_credit_card_updated
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_create")
                                                                                          then EventActionEnumString_disk_create
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_delete")
                                                                                                then EventActionEnumString_disk_delete
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_duplicate")
                                                                                                      then EventActionEnumString_disk_duplicate
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_imagize")
                                                                                                            then EventActionEnumString_disk_imagize
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_resize")
                                                                                                                  then EventActionEnumString_disk_resize
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disk_update")
                                                                                                                        then EventActionEnumString_disk_update
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_record_create")
                                                                                                                              then EventActionEnumString_dns_record_create
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_record_delete")
                                                                                                                                    then EventActionEnumString_dns_record_delete
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_record_update")
                                                                                                                                          then EventActionEnumString_dns_record_update
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_create")
                                                                                                                                                then EventActionEnumString_dns_zone_create
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_delete")
                                                                                                                                                      then EventActionEnumString_dns_zone_delete
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_import")
                                                                                                                                                            then EventActionEnumString_dns_zone_import
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dns_zone_update")
                                                                                                                                                                  then EventActionEnumString_dns_zone_update
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_accept")
                                                                                                                                                                        then EventActionEnumString_entity_transfer_accept
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_cancel")
                                                                                                                                                                              then EventActionEnumString_entity_transfer_cancel
                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_create")
                                                                                                                                                                                    then EventActionEnumString_entity_transfer_create
                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_fail")
                                                                                                                                                                                          then EventActionEnumString_entity_transfer_fail
                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer_stale")
                                                                                                                                                                                                then EventActionEnumString_entity_transfer_stale
                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_create")
                                                                                                                                                                                                      then EventActionEnumString_firewall_create
                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_delete")
                                                                                                                                                                                                            then EventActionEnumString_firewall_delete
                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_device_add")
                                                                                                                                                                                                                  then EventActionEnumString_firewall_device_add
                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_device_remove")
                                                                                                                                                                                                                        then EventActionEnumString_firewall_device_remove
                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_disable")
                                                                                                                                                                                                                              then EventActionEnumString_firewall_disable
                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_enable")
                                                                                                                                                                                                                                    then EventActionEnumString_firewall_enable
                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall_update")
                                                                                                                                                                                                                                          then EventActionEnumString_firewall_update
                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "host_reboot")
                                                                                                                                                                                                                                                then EventActionEnumString_host_reboot
                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image_delete")
                                                                                                                                                                                                                                                      then EventActionEnumString_image_delete
                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image_update")
                                                                                                                                                                                                                                                            then EventActionEnumString_image_update
                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image_upload")
                                                                                                                                                                                                                                                                  then EventActionEnumString_image_upload
                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipaddress_update")
                                                                                                                                                                                                                                                                        then EventActionEnumString_ipaddress_update
                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lassie_reboot")
                                                                                                                                                                                                                                                                              then EventActionEnumString_lassie_reboot
                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_addip")
                                                                                                                                                                                                                                                                                    then EventActionEnumString_linode_addip
                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_boot")
                                                                                                                                                                                                                                                                                          then EventActionEnumString_linode_boot
                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_clone")
                                                                                                                                                                                                                                                                                                then EventActionEnumString_linode_clone
                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_config_create")
                                                                                                                                                                                                                                                                                                      then EventActionEnumString_linode_config_create
                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_config_delete")
                                                                                                                                                                                                                                                                                                            then EventActionEnumString_linode_config_delete
                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_config_update")
                                                                                                                                                                                                                                                                                                                  then EventActionEnumString_linode_config_update
                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_create")
                                                                                                                                                                                                                                                                                                                        then EventActionEnumString_linode_create
                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_delete")
                                                                                                                                                                                                                                                                                                                              then EventActionEnumString_linode_delete
                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_deleteip")
                                                                                                                                                                                                                                                                                                                                    then EventActionEnumString_linode_deleteip
                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_migrate")
                                                                                                                                                                                                                                                                                                                                          then EventActionEnumString_linode_migrate
                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_migrate_datacenter")
                                                                                                                                                                                                                                                                                                                                                then EventActionEnumString_linode_migrate_datacenter
                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_migrate_datacenter_create")
                                                                                                                                                                                                                                                                                                                                                      then EventActionEnumString_linode_migrate_datacenter_create
                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_mutate")
                                                                                                                                                                                                                                                                                                                                                            then EventActionEnumString_linode_mutate
                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_mutate_create")
                                                                                                                                                                                                                                                                                                                                                                  then EventActionEnumString_linode_mutate_create
                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_reboot")
                                                                                                                                                                                                                                                                                                                                                                        then EventActionEnumString_linode_reboot
                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_rebuild")
                                                                                                                                                                                                                                                                                                                                                                              then EventActionEnumString_linode_rebuild
                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_resize")
                                                                                                                                                                                                                                                                                                                                                                                    then EventActionEnumString_linode_resize
                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_resize_create")
                                                                                                                                                                                                                                                                                                                                                                                          then EventActionEnumString_linode_resize_create
                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_shutdown")
                                                                                                                                                                                                                                                                                                                                                                                                then EventActionEnumString_linode_shutdown
                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_snapshot")
                                                                                                                                                                                                                                                                                                                                                                                                      then EventActionEnumString_linode_snapshot
                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode_update")
                                                                                                                                                                                                                                                                                                                                                                                                            then EventActionEnumString_linode_update
                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lish_boot")
                                                                                                                                                                                                                                                                                                                                                                                                                  then EventActionEnumString_lish_boot
                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lke_node_create")
                                                                                                                                                                                                                                                                                                                                                                                                                        then EventActionEnumString_lke_node_create
                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longviewclient_create")
                                                                                                                                                                                                                                                                                                                                                                                                                              then EventActionEnumString_longviewclient_create
                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longviewclient_delete")
                                                                                                                                                                                                                                                                                                                                                                                                                                    then EventActionEnumString_longviewclient_delete
                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longviewclient_update")
                                                                                                                                                                                                                                                                                                                                                                                                                                          then EventActionEnumString_longviewclient_update
                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_disabled")
                                                                                                                                                                                                                                                                                                                                                                                                                                                then EventActionEnumString_managed_disabled
                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_enabled")
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then EventActionEnumString_managed_enabled
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_service_create")
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then EventActionEnumString_managed_service_create
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_service_delete")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then EventActionEnumString_managed_service_delete
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_config_create")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then EventActionEnumString_nodebalancer_config_create
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_config_delete")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then EventActionEnumString_nodebalancer_config_delete
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_config_update")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then EventActionEnumString_nodebalancer_config_update
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_create")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then EventActionEnumString_nodebalancer_create
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_delete")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then EventActionEnumString_nodebalancer_delete
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_node_create")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then EventActionEnumString_nodebalancer_node_create
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_node_delete")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then EventActionEnumString_nodebalancer_node_delete
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_node_update")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then EventActionEnumString_nodebalancer_node_update
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer_update")
then EventActionEnumString_nodebalancer_update
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_create")
then EventActionEnumString_oauth_client_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_delete")
then EventActionEnumString_oauth_client_delete
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_secret_reset")
then EventActionEnumString_oauth_client_secret_reset
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client_update")
then EventActionEnumString_oauth_client_update
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "password_reset")
then EventActionEnumString_password_reset
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_method_add")
then EventActionEnumString_payment_method_add
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_submitted")
then EventActionEnumString_payment_submitted
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "profile_update")
then EventActionEnumString_profile_update
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_create")
then EventActionEnumString_stackscript_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_delete")
then EventActionEnumString_stackscript_delete
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_publicize")
then EventActionEnumString_stackscript_publicize
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_revise")
then EventActionEnumString_stackscript_revise
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript_update")
then EventActionEnumString_stackscript_update
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tag_create")
then EventActionEnumString_tag_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tag_delete")
then EventActionEnumString_tag_delete
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tfa_disabled")
then EventActionEnumString_tfa_disabled
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tfa_enabled")
then EventActionEnumString_tfa_enabled
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_attachment_upload")
then EventActionEnumString_ticket_attachment_upload
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_create")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then EventActionEnumString_ticket_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket_update")
then EventActionEnumString_ticket_update
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token_create")
then EventActionEnumString_token_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token_delete")
then EventActionEnumString_token_delete
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token_update")
then EventActionEnumString_token_update
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_create")
then EventActionEnumString_user_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_delete")
then EventActionEnumString_user_delete
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key_add")
then EventActionEnumString_user_ssh_key_add
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key_delete")
then EventActionEnumString_user_ssh_key_delete
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key_update")
then EventActionEnumString_user_ssh_key_update
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_update")
then EventActionEnumString_user_update
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vlan_attach")
then EventActionEnumString_vlan_attach
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vlan_detach")
then EventActionEnumString_vlan_detach
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_attach")
then EventActionEnumString_volume_attach
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_clone")
then EventActionEnumString_volume_clone
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_create")
then EventActionEnumString_volume_create
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_delete")
then EventActionEnumString_volume_delete
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_detach")
then EventActionEnumString_volume_detach
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_resize")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then EventActionEnumString_volume_resize
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume_update")
then EventActionEnumString_volume_update
else EventActionEnumOther val)
-- | Defines the data type for the schema EventEntity
-- 
-- Detailed information about the Event\'s entity, including ID, type, label, and URL used to access it.
data EventEntity = EventEntity {
  -- | id: The unique ID for an Event\'s entity.
  -- 
  -- 
  -- Some Event entities do not have IDs associated with them, so they
  -- will not be returned when filtering by ID. These Events include:
  --   * \`account\`
  --   * \`profile\`
  -- 
  -- Entities for some Events are assigned the ID of the Linode they correspond to.
  -- When filtering by ID for these Events, use the corresponding Linode\'s ID.
  -- These Events include:
  --   * \`disks\`
  --   * \`backups\`
  -- 
  -- 
  -- Tag Events use a tag\'s name for the entity ID field. When filtering by ID
  -- for tag Events, supply the name of the tag.
  eventEntityId :: (GHC.Base.Maybe GHC.Integer.Type.Integer)
  -- | label: The current label of this object. The label may reflect changes that occur with this Event.
  , eventEntityLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity that is being referenced by the Event.
  , eventEntityType :: (GHC.Base.Maybe EventEntityType)
  -- | url: The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
  , eventEntityUrl :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventEntity
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (eventEntityId obj) : (Data.Aeson..=) "label" (eventEntityLabel obj) : (Data.Aeson..=) "type" (eventEntityType obj) : (Data.Aeson..=) "url" (eventEntityUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (eventEntityId obj) GHC.Base.<> ((Data.Aeson..=) "label" (eventEntityLabel obj) GHC.Base.<> ((Data.Aeson..=) "type" (eventEntityType obj) GHC.Base.<> (Data.Aeson..=) "url" (eventEntityUrl obj))))
instance Data.Aeson.Types.FromJSON.FromJSON EventEntity
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EventEntity" (\obj -> (((GHC.Base.pure EventEntity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Defines the enum schema EventEntityType
-- 
-- The type of entity that is being referenced by the Event.
data EventEntityType
    = EventEntityTypeEnumOther Data.Aeson.Types.Internal.Value
    | EventEntityTypeEnumTyped Data.Text.Internal.Text
    | EventEntityTypeEnumString_account
    | EventEntityTypeEnumString_backups
    | EventEntityTypeEnumString_community
    | EventEntityTypeEnumString_disks
    | EventEntityTypeEnumString_domain
    | EventEntityTypeEnumString_entity_transfer
    | EventEntityTypeEnumString_firewall
    | EventEntityTypeEnumString_image
    | EventEntityTypeEnumString_ipaddress
    | EventEntityTypeEnumString_linode
    | EventEntityTypeEnumString_longview
    | EventEntityTypeEnumString_managed_service
    | EventEntityTypeEnumString_nodebalancer
    | EventEntityTypeEnumString_oauth_client
    | EventEntityTypeEnumString_profile
    | EventEntityTypeEnumString_stackscript
    | EventEntityTypeEnumString_tag
    | EventEntityTypeEnumString_ticket
    | EventEntityTypeEnumString_token
    | EventEntityTypeEnumString_user
    | EventEntityTypeEnumString_user_ssh_key
    | EventEntityTypeEnumString_volume
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventEntityType
    where toJSON (EventEntityTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventEntityTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventEntityTypeEnumString_account) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account"
          toJSON (EventEntityTypeEnumString_backups) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups"
          toJSON (EventEntityTypeEnumString_community) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "community"
          toJSON (EventEntityTypeEnumString_disks) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disks"
          toJSON (EventEntityTypeEnumString_domain) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "domain"
          toJSON (EventEntityTypeEnumString_entity_transfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer"
          toJSON (EventEntityTypeEnumString_firewall) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall"
          toJSON (EventEntityTypeEnumString_image) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image"
          toJSON (EventEntityTypeEnumString_ipaddress) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipaddress"
          toJSON (EventEntityTypeEnumString_linode) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode"
          toJSON (EventEntityTypeEnumString_longview) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview"
          toJSON (EventEntityTypeEnumString_managed_service) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_service"
          toJSON (EventEntityTypeEnumString_nodebalancer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer"
          toJSON (EventEntityTypeEnumString_oauth_client) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client"
          toJSON (EventEntityTypeEnumString_profile) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "profile"
          toJSON (EventEntityTypeEnumString_stackscript) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript"
          toJSON (EventEntityTypeEnumString_tag) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tag"
          toJSON (EventEntityTypeEnumString_ticket) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket"
          toJSON (EventEntityTypeEnumString_token) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token"
          toJSON (EventEntityTypeEnumString_user) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user"
          toJSON (EventEntityTypeEnumString_user_ssh_key) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key"
          toJSON (EventEntityTypeEnumString_volume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume"
instance Data.Aeson.FromJSON EventEntityType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account")
                                          then EventEntityTypeEnumString_account
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backups")
                                                then EventEntityTypeEnumString_backups
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "community")
                                                      then EventEntityTypeEnumString_community
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disks")
                                                            then EventEntityTypeEnumString_disks
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "domain")
                                                                  then EventEntityTypeEnumString_domain
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "entity_transfer")
                                                                        then EventEntityTypeEnumString_entity_transfer
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "firewall")
                                                                              then EventEntityTypeEnumString_firewall
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "image")
                                                                                    then EventEntityTypeEnumString_image
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipaddress")
                                                                                          then EventEntityTypeEnumString_ipaddress
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linode")
                                                                                                then EventEntityTypeEnumString_linode
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "longview")
                                                                                                      then EventEntityTypeEnumString_longview
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed_service")
                                                                                                            then EventEntityTypeEnumString_managed_service
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nodebalancer")
                                                                                                                  then EventEntityTypeEnumString_nodebalancer
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "oauth_client")
                                                                                                                        then EventEntityTypeEnumString_oauth_client
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "profile")
                                                                                                                              then EventEntityTypeEnumString_profile
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stackscript")
                                                                                                                                    then EventEntityTypeEnumString_stackscript
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tag")
                                                                                                                                          then EventEntityTypeEnumString_tag
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ticket")
                                                                                                                                                then EventEntityTypeEnumString_ticket
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token")
                                                                                                                                                      then EventEntityTypeEnumString_token
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user")
                                                                                                                                                            then EventEntityTypeEnumString_user
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "user_ssh_key")
                                                                                                                                                                  then EventEntityTypeEnumString_user_ssh_key
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume")
                                                                                                                                                                        then EventEntityTypeEnumString_volume
                                                                                                                                                                        else EventEntityTypeEnumOther val)
-- | Defines the data type for the schema EventSecondary_entity
-- 
-- Detailed information about the Event\'s secondary entity, which provides additional information
-- for events such as, but not limited to, \`linode_boot\`, \`linode_reboot\`, \`linode_create\`, and \`linode_clone\` Event actions.
data EventSecondary_entity = EventSecondary_entity {
  -- | id: The ID of the object that is the secondary entity.
  eventSecondary_entityId :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | label: The label of this object.
  , eventSecondary_entityLabel :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | type: The type of entity that is being referenced by the Event.
  , eventSecondary_entityType :: (GHC.Base.Maybe Data.Text.Internal.Text)
  -- | url: The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
  , eventSecondary_entityUrl :: (GHC.Base.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventSecondary_entity
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (eventSecondary_entityId obj) : (Data.Aeson..=) "label" (eventSecondary_entityLabel obj) : (Data.Aeson..=) "type" (eventSecondary_entityType obj) : (Data.Aeson..=) "url" (eventSecondary_entityUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (eventSecondary_entityId obj) GHC.Base.<> ((Data.Aeson..=) "label" (eventSecondary_entityLabel obj) GHC.Base.<> ((Data.Aeson..=) "type" (eventSecondary_entityType obj) GHC.Base.<> (Data.Aeson..=) "url" (eventSecondary_entityUrl obj))))
instance Data.Aeson.Types.FromJSON.FromJSON EventSecondary_entity
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EventSecondary_entity" (\obj -> (((GHC.Base.pure EventSecondary_entity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Defines the enum schema EventStatus
-- 
-- The current status of this Event.
data EventStatus
    = EventStatusEnumOther Data.Aeson.Types.Internal.Value
    | EventStatusEnumTyped Data.Text.Internal.Text
    | EventStatusEnumString_failed
    | EventStatusEnumString_finished
    | EventStatusEnumString_notification
    | EventStatusEnumString_scheduled
    | EventStatusEnumString_started
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventStatus
    where toJSON (EventStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventStatusEnumString_failed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (EventStatusEnumString_finished) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "finished"
          toJSON (EventStatusEnumString_notification) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "notification"
          toJSON (EventStatusEnumString_scheduled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "scheduled"
          toJSON (EventStatusEnumString_started) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "started"
instance Data.Aeson.FromJSON EventStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                          then EventStatusEnumString_failed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "finished")
                                                then EventStatusEnumString_finished
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "notification")
                                                      then EventStatusEnumString_notification
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "scheduled")
                                                            then EventStatusEnumString_scheduled
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "started")
                                                                  then EventStatusEnumString_started
                                                                  else EventStatusEnumOther val)