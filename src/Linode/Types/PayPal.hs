-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PayPal
module Linode.Types.PayPal where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Linode.Common
import Linode.TypeAlias

-- | Defines the object schema located at @components.schemas.PayPal@ in the specification.
-- 
-- An object representing the staging of a Payment via PayPal.
data PayPal = PayPal {
  -- | cancel_url: The URL to have PayPal redirect to when Payment is cancelled.
  payPalCancelUrl :: Data.Text.Internal.Text
  -- | redirect_url: The URL to have PayPal redirect to when Payment is approved.
  , payPalRedirectUrl :: Data.Text.Internal.Text
  -- | usd: The payment amount in USD. Minimum accepted value of \$5 USD. Maximum accepted value of \$500 USD or credit card payment limit; whichever value is highest. PayPal\'s maximum transaction limit is \$10,000 USD.
  , payPalUsd :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PayPal
    where toJSON obj = Data.Aeson.Types.Internal.object ("cancel_url" Data.Aeson.Types.ToJSON..= payPalCancelUrl obj : "redirect_url" Data.Aeson.Types.ToJSON..= payPalRedirectUrl obj : "usd" Data.Aeson.Types.ToJSON..= payPalUsd obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cancel_url" Data.Aeson.Types.ToJSON..= payPalCancelUrl obj) GHC.Base.<> (("redirect_url" Data.Aeson.Types.ToJSON..= payPalRedirectUrl obj) GHC.Base.<> ("usd" Data.Aeson.Types.ToJSON..= payPalUsd obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PayPal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PayPal" (\obj -> ((GHC.Base.pure PayPal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancel_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redirect_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "usd"))
-- | Create a new 'PayPal' with all required fields.
mkPayPal :: Data.Text.Internal.Text -- ^ 'payPalCancelUrl'
  -> Data.Text.Internal.Text -- ^ 'payPalRedirectUrl'
  -> Data.Text.Internal.Text -- ^ 'payPalUsd'
  -> PayPal
mkPayPal payPalCancelUrl payPalRedirectUrl payPalUsd = PayPal{payPalCancelUrl = payPalCancelUrl,
                                                              payPalRedirectUrl = payPalRedirectUrl,
                                                              payPalUsd = payPalUsd}
